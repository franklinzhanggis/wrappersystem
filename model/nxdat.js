// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk



function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 18112;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_xml_conv_cpp() } }, { func: function() { __GLOBAL__sub_I_xml_tree_cpp() } }, { func: function() { __GLOBAL__sub_I_nxid_cpp() } }, { func: function() { __GLOBAL__sub_I_nxdat_mini_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });
  

/* memory initializer */ allocate([188,23,0,0,112,34,0,0,228,23,0,0,92,34,0,0,8,0,0,0,0,0,0,0,228,23,0,0,132,34,0,0,128,0,0,0,0,0,0,0,228,23,0,0,156,34,0,0,8,0,0,0,0,0,0,0,228,23,0,0,180,34,0,0,8,0,0,0,0,0,0,0,228,23,0,0,208,34,0,0,8,0,0,0,0,0,0,0,228,23,0,0,232,34,0,0,8,0,0,0,0,0,0,0,228,23,0,0,0,35,0,0,8,0,0,0,0,0,0,0,188,23,0,0,182,35,0,0,228,23,0,0,206,35,0,0,152,0,0,0,0,0,0,0,188,23,0,0,234,35,0,0,228,23,0,0,254,35,0,0,152,0,0,0,0,0,0,0,228,23,0,0,26,36,0,0,152,0,0,0,0,0,0,0,228,23,0,0,54,36,0,0,152,0,0,0,0,0,0,0,188,23,0,0,82,36,0,0,228,23,0,0,149,36,0,0,232,0,0,0,0,0,0,0,12,24,0,0,255,43,0,0,0,0,0,0,1,0,0,0,144,1,0,0,2,4,0,0,228,23,0,0,145,43,0,0,128,1,0,0,0,0,0,0,228,23,0,0,29,43,0,0,128,1,0,0,0,0,0,0,228,23,0,0,175,42,0,0,128,1,0,0,0,0,0,0,228,23,0,0,40,42,0,0,128,1,0,0,0,0,0,0,12,24,0,0,49,41,0,0,0,0,0,0,1,0,0,0,88,1,0,0,0,0,0,0,188,23,0,0,112,41,0,0,188,23,0,0,150,41,0,0,188,23,0,0,160,41,0,0,188,23,0,0,170,41,0,0,160,23,0,0,6,42,0,0,228,23,0,0,156,42,0,0,232,0,0,0,0,0,0,0,188,23,0,0,23,44,0,0,228,23,0,0,32,44,0,0,216,0,0,0,0,0,0,0,228,23,0,0,77,44,0,0,216,0,0,0,0,0,0,0,228,23,0,0,122,44,0,0,216,0,0,0,0,0,0,0,228,23,0,0,166,44,0,0,216,0,0,0,0,0,0,0,228,23,0,0,210,44,0,0,128,1,0,0,0,0,0,0,228,23,0,0,17,45,0,0,128,1,0,0,0,0,0,0,228,23,0,0,80,45,0,0,128,1,0,0,0,0,0,0,228,23,0,0,143,45,0,0,128,1,0,0,0,0,0,0,228,23,0,0,193,45,0,0,128,1,0,0,0,0,0,0,228,23,0,0,243,45,0,0,128,1,0,0,0,0,0,0,228,23,0,0,44,46,0,0,128,1,0,0,0,0,0,0,228,23,0,0,101,46,0,0,128,1,0,0,0,0,0,0,228,23,0,0,158,46,0,0,128,1,0,0,0,0,0,0,228,23,0,0,202,46,0,0,128,1,0,0,0,0,0,0,188,23,0,0,20,50,0,0,188,23,0,0,51,50,0,0,188,23,0,0,82,50,0,0,188,23,0,0,113,50,0,0,188,23,0,0,144,50,0,0,188,23,0,0,175,50,0,0,188,23,0,0,206,50,0,0,188,23,0,0,237,50,0,0,188,23,0,0,12,51,0,0,188,23,0,0,43,51,0,0,188,23,0,0,74,51,0,0,188,23,0,0,105,51,0,0,188,23,0,0,136,51,0,0,12,24,0,0,155,51,0,0,0,0,0,0,1,0,0,0,88,1,0,0,0,0,0,0,12,24,0,0,218,51,0,0,0,0,0,0,1,0,0,0,88,1,0,0,0,0,0,0,228,23,0,0,26,52,0,0,32,3,0,0,0,0,0,0,188,23,0,0,39,52,0,0,188,23,0,0,52,52,0,0,228,23,0,0,65,52,0,0,40,3,0,0,0,0,0,0,228,23,0,0,98,52,0,0,48,3,0,0,0,0,0,0,228,23,0,0,168,52,0,0,48,3,0,0,0,0,0,0,228,23,0,0,132,52,0,0,80,3,0,0,0,0,0,0,228,23,0,0,202,52,0,0,48,3,0,0,0,0,0,0,132,23,0,0,242,52,0,0,132,23,0,0,244,52,0,0,132,23,0,0,246,52,0,0,132,23,0,0,248,52,0,0,132,23,0,0,250,52,0,0,132,23,0,0,252,52,0,0,132,23,0,0,254,52,0,0,132,23,0,0,0,53,0,0,132,23,0,0,2,53,0,0,132,23,0,0,4,53,0,0,132,23,0,0,6,53,0,0,132,23,0,0,8,53,0,0,132,23,0,0,10,53,0,0,228,23,0,0,12,53,0,0,48,3,0,0,0,0,0,0,228,23,0,0,45,53,0,0,64,3,0,0,0,0,0,0,228,23,0,0,82,53,0,0,64,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([8,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,48,0,0,0,1,0,0,0,2,0,0,0,17,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,18,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,64,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,25,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,26,0,0,0,12,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,0,0,0,0,80,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,33,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,0,0,0,0,96,0,0,0,41,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,42,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,112,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,49,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,50,0,0,0,11,0,0,0,12,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,16,0,0,0,0,0,0,0,32,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,0,0,0,0,16,0,0,0,1,0,0,0,69,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,70,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,129,36,0,0,4,0,0,0,34,0,0,0,134,36,0,0,3,0,0,0,38,0,0,0,138,36,0,0,4,0,0,0,39,0,0,0,143,36,0,0,2,0,0,0,60,0,0,0,146,36,0,0,2,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,224,0,0,0,240,0,0,0,248,0,0,0,252,0,0,0,126,36,0,0,121,36,0,0,111,36,0,0,108,36,0,0,35,35,0,0,0,0,0,0,128,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,136,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,0,0,0,0,160,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,0,0,0,0,176,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,0,0,0,0,192,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,0,0,0,0,152,0,0,0,115,0,0,0,116,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,208,0,0,0,117,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,13,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,64,1,0,0,184,3,0,0,64,1,0,0,96,1,0,0,184,3,0,0,184,3,0,0,104,1,0,0,184,3,0,0,184,3,0,0,112,1,0,0,184,3,0,0,184,3,0,0,64,1,0,0,184,3,0,0,184,3,0,0,224,3,0,0,184,3,0,0,184,3,0,0,96,1,0,0,184,3,0,0,104,1,0,0,184,3,0,0,112,1,0,0,184,3,0,0,224,3,0,0,184,3,0,0,136,3,0,0,184,3,0,0,224,3,0,0,224,3,0,0,224,3,0,0,224,3,0,0,184,3,0,0,136,3,0,0,184,3,0,0,224,3,0,0,224,3,0,0,224,3,0,0,184,3,0,0,136,3,0,0,184,3,0,0,224,3,0,0,224,3,0,0,184,3,0,0,136,3,0,0,184,3,0,0,64,1,0,0,184,3,0,0,136,3,0,0,184,3,0,0,224,3,0,0,184,3,0,0,136,3,0,0,184,3,0,0,184,3,0,0,184,3,0,0,136,3,0,0,184,3,0,0,224,3,0,0,224,3,0,0,224,3,0,0,224,3,0,0,136,3,0,0,184,3,0,0,224,3,0,0,224,3,0,0,224,3,0,0,136,3,0,0,184,3,0,0,224,3,0,0,224,3,0,0,136,3,0,0,184,3,0,0,64,1,0,0,136,3,0,0,184,3,0,0,224,3,0,0,136,3,0,0,184,3,0,0,184,3,0,0,184,3,0,0,184,3,0,0,64,1,0,0,120,1,0,0,184,3,0,0,120,1,0,0,64,1,0,0,64,1,0,0,120,1,0,0,184,3,0,0,120,1,0,0,184,3,0,0,64,1,0,0,184,3,0,0,184,3,0,0,184,3,0,0,184,3,0,0,184,3,0,0,184,3,0,0,184,3,0,0,216,3,0,0,0,0,0,0,152,1,0,0,152,0,0,0,153,0,0,0,121,0,0,0,154,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,168,1,0,0,155,0,0,0,156,0,0,0,121,0,0,0,157,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,184,1,0,0,158,0,0,0,159,0,0,0,121,0,0,0,160,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,200,1,0,0,161,0,0,0,162,0,0,0,121,0,0,0,163,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,48,1,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,128,1,0,0,170,0,0,0,171,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,16,1,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,216,1,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,232,1,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,248,1,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,8,2,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,24,2,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,32,1,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,0,1,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,40,2,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,56,2,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,72,2,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,88,2,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,104,2,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,169,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,232,0,0,0,237,0,0,0,238,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,239,0,0,0,0,0,0,0,16,3,0,0,240,0,0,0,241,0,0,0,242,0,0,0,0,0,0,0,0,0,0,0,112,3,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,0,0,0,0,232,3,0,0,243,0,0,0,248,0,0,0,245,0,0,0,246,0,0,0,249,0,0,0,0,0,0,0,64,3,0,0,243,0,0,0,250,0,0,0,245,0,0,0,246,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,0,0,0,0,248,3,0,0,243,0,0,0,255,0,0,0,245,0,0,0,246,0,0,0,251,0,0,0,0,1,0,0,1,1,0,0,2,1,0,0,0,0,0,0,8,4,0,0,243,0,0,0,3,1,0,0,245,0,0,0,246,0,0,0,251,0,0,0,4,1,0,0,5,1,0,0,6,1,0,0,0,0,0,0,0,0,0,0,18,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,212,25,0,0,68,26,0,0,68,26,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,1,0,0,10,1,0,0,162,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,1,0,0,10,1,0,0,154,64,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,108,105,99,101,98,108,117,101,0,97,110,116,105,113,117,101,119,104,105,116,101,0,97,113,117,97,0,97,113,117,97,109,97,114,105,110,101,0,97,122,117,114,101,0,98,101,105,103,101,0,98,105,115,113,117,101,0,98,108,97,99,107,0,98,108,97,110,99,104,101,100,97,108,109,111,110,100,0,98,108,117,101,0,98,108,117,101,118,105,111,108,101,116,0,98,114,111,119,110,0,98,117,114,108,121,119,111,111,100,0,99,97,100,101,116,98,108,117,101,0,99,104,97,114,116,114,101,117,115,101,0,99,104,111,99,111,108,97,116,101,0,99,111,114,97,108,0,99,111,114,110,102,108,111,119,101,114,98,108,117,101,0,99,111,114,110,115,105,108,107,0,99,114,105,109,115,111,110,0,99,121,97,110,0,100,97,114,107,98,108,117,101,0,100,97,114,107,99,121,97,110,0,100,97,114,107,103,111,108,100,101,110,114,111,100,0,100,97,114,107,103,114,97,121,0,100,97,114,107,103,114,101,101,110,0,100,97,114,107,103,114,101,121,0,100,97,114,107,107,104,97,107,105,0,100,97,114,107,109,97,103,101,110,116,97,0,100,97,114,107,111,108,105,118,101,103,114,101,101,110,0,100,97,114,107,111,114,97,110,103,101,0,100,97,114,107,111,114,99,104,105,100,0,100,97,114,107,114,101,100,0,100,97,114,107,115,97,108,109,111,110,0,100,97,114,107,115,101,97,103,114,101,101,110,0,100,97,114,107,115,108,97,116,101,98,108,117,101,0,100,97,114,107,115,108,97,116,101,103,114,101,121,0,100,97,114,107,116,117,114,113,117,111,105,115,101,0,100,97,114,107,118,105,111,108,101,116,0,100,101,101,112,112,105,110,107,0,100,101,101,112,115,107,121,98,108,117,101,0,100,105,109,103,114,97,121,0,100,105,109,103,114,101,121,0,100,111,100,103,101,114,98,108,117,101,0,102,105,114,101,98,114,105,99,107,0,102,108,111,114,97,108,119,104,105,116,101,0,102,111,114,101,115,116,103,114,101,101,110,0,102,117,99,104,115,105,97,0,103,97,105,110,115,98,111,114,111,0,103,104,111,115,116,119,104,105,116,101,0,103,111,108,100,0,103,111,108,100,101,110,114,111,100,0,103,114,97,121,0,103,114,101,121,0,103,114,101,101,110,0,103,114,101,101,110,121,101,108,108,111,119,0,104,111,110,101,121,100,101,119,0,104,111,116,112,105,110,107,0,105,110,100,105,97,110,114,101,100,0,105,110,100,105,103,111,0,105,118,111,114,121,0,107,104,97,107,105,0,108,97,118,101,110,100,101,114,0,108,97,118,101,110,100,101,114,98,108,117,115,104,0,108,97,119,110,103,114,101,101,110,0,108,101,109,111,110,99,104,105,102,102,111,110,0,108,105,103,104,116,98,108,117,101,0,108,105,103,104,116,99,111,114,97,108,0,108,105,103,104,116,99,121,97,110,0,108,105,103,104,116,103,111,108,100,101,110,114,111,100,121,101,108,108,111,119,0,108,105,103,104,116,103,114,97,121,0,108,105,103,104,116,103,114,101,101,110,0,108,105,103,104,116,103,114,101,121,0,108,105,103,104,116,112,105,110,107,0,108,105,103,104,116,115,97,108,109,111,110,0,108,105,103,104,116,115,101,97,103,114,101,101,110,0,108,105,103,104,116,115,107,121,98,108,117,101,0,108,105,103,104,116,115,108,97,116,101,103,114,97,121,0,108,105,103,104,116,115,108,97,116,101,103,114,101,121,0,108,105,103,104,116,115,116,101,101,108,98,108,117,101,0,108,105,103,104,116,121,101,108,108,111,119,0,108,105,109,101,0,108,105,109,101,103,114,101,101,110,0,108,105,110,101,110,0,109,97,103,101,110,116,97,0,109,97,114,111,111,110,0,109,101,100,105,117,109,97,113,117,97,109,97,114,105,110,101,0,109,101,100,105,117,109,98,108,117,101,0,109,101,100,105,117,109,111,114,99,104,105,100,0,109,101,100,105,117,109,112,117,114,112,108,101,0,109,101,100,105,117,109,115,101,97,103,114,101,101,110,0,109,101,100,105,117,109,115,108,97,116,101,98,108,117,101,0,109,101,100,105,117,109,115,112,114,105,110,103,103,114,101,101,110,0,109,101,100,105,117,109,116,117,114,113,117,111,105,115,101,0,109,101,100,105,117,109,118,105,111,108,101,116,114,101,100,0,109,105,100,110,105,103,104,116,98,108,117,101,0,109,105,110,116,99,114,101,97,109,0,109,105,115,116,121,114,111,115,101,0,109,111,99,99,97,115,105,110,0,110,97,118,97,106,111,119,104,105,116,101,0,110,97,118,121,0,111,108,100,108,97,99,101,0,111,108,105,118,101,0,111,108,105,118,101,100,114,97,98,0,111,114,97,110,103,101,0,111,114,97,110,103,101,114,101,100,0,111,114,99,104,105,100,0,112,97,108,101,103,111,108,100,101,110,114,111,100,0,112,97,108,101,103,114,101,101,110,0,112,97,108,101,116,117,114,113,117,111,105,115,101,0,112,97,108,101,118,105,111,108,101,116,114,101,100,0,112,97,112,97,121,97,119,104,105,112,0,112,101,97,99,104,112,117,102,102,0,112,101,114,117,0,112,105,110,107,0,112,108,117,109,0,112,111,119,100,101,114,98,108,117,101,0,112,117,114,112,108,101,0,114,101,100,0,114,111,115,121,98,114,111,119,110,0,114,111,121,97,108,98,108,117,101,0,115,97,100,100,108,101,98,114,111,119,110,0,115,97,108,109,111,110,0,115,97,110,100,121,98,114,111,119,110,0,115,101,97,103,114,101,101,110,0,115,101,97,115,104,101,108,108,0,115,105,101,110,110,97,0,115,105,108,118,101,114,0,115,107,121,98,108,117,101,0,115,108,97,116,101,98,108,117,101,0,115,108,97,116,101,103,114,97,121,0,115,108,97,116,101,103,114,101,121,0,115,110,111,119,0,115,112,114,105,110,103,103,114,101,101,110,0,115,116,101,101,108,98,108,117,101,0,116,97,110,0,116,101,97,108,0,116,104,105,115,116,108,101,0,116,111,109,97,116,111,0,116,117,114,113,117,111,105,115,101,0,118,105,111,108,101,116,0,119,104,101,97,116,0,119,104,105,116,101,0,119,104,105,116,101,115,109,111,107,101,0,121,101,108,108,111,119,0,121,101,108,108,111,119,103,114,101,101,110,0,116,114,97,110,115,112,97,114,101,110,116,0,60,120,109,108,116,101,120,116,62,0,78,56,116,105,110,121,120,109,108,50,55,88,77,76,84,101,120,116,69,0,78,56,116,105,110,121,120,109,108,50,55,88,77,76,78,111,100,101,69,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,80,114,105,110,116,101,114,69,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,67,111,109,109,101,110,116,69,0,78,56,116,105,110,121,120,109,108,50,49,52,88,77,76,68,101,99,108,97,114,97,116,105,111,110,69,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,85,110,107,110,111,119,110,69,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,69,108,101,109,101,110,116,69,0,78,56,116,105,110,121,120,109,108,50,49,49,88,77,76,68,111,99,117,109,101,110,116,69,0,37,46,49,55,103,0,93,93,62,0,60,0,45,45,62,0,63,62,0,120,109,108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,32,101,110,99,111,100,105,110,103,61,34,85,84,70,45,56,34,0,62,0,37,115,0,32,32,32,32,0,37,46,42,115,0,38,37,115,59,0,239,187,191,0,120,109,108,32,118,101,114,115,105,111,110,61,34,49,46,48,34,0,10,0,60,63,37,115,63,62,0,60,37,115,0,32,37,115,61,34,0,34,0,47,62,0,60,47,37,115,62,0,60,33,91,67,68,65,84,65,91,37,115,93,93,62,0,60,33,45,45,37,115,45,45,62,0,60,33,37,115,62,0,78,56,116,105,110,121,120,109,108,50,49,48,88,77,76,86,105,115,105,116,111,114,69,0,78,56,116,105,110,121,120,109,108,50,56,77,101,109,80,111,111,108,84,73,76,105,52,56,69,69,69,0,78,56,116,105,110,121,120,109,108,50,55,77,101,109,80,111,111,108,69,0,78,56,116,105,110,121,120,109,108,50,56,77,101,109,80,111,111,108,84,73,76,105,53,54,69,69,69,0,78,56,116,105,110,121,120,109,108,50,56,77,101,109,80,111,111,108,84,73,76,105,51,54,69,69,69,0,78,56,116,105,110,121,120,109,108,50,56,77,101,109,80,111,111,108,84,73,76,105,53,50,69,69,69,0,78,56,116,105,110,121,120,109,108,50,49,50,88,77,76,65,116,116,114,105,98,117,116,101,69,0,60,33,0,60,33,91,67,68,65,84,65,91,0,60,33,45,45,0,60,63,0,113,117,111,116,0,97,109,112,0,97,112,111,115,0,108,116,0,103,116,0,78,50,100,120,49,50,99,95,100,120,95,120,110,111,100,101,95,116,69,0,100,97,116,115,101,116,0,0,105,110,116,95,97,114,114,97,121,0,114,101,97,108,0,114,101,97,108,95,97,114,114,97,121,0,115,116,114,105,110,103,0,115,116,114,105,110,103,95,97,114,114,97,121,0,118,101,99,116,111,114,50,100,0,118,101,99,116,111,114,50,100,95,97,114,114,97,121,0,118,101,99,116,111,114,51,100,0,118,101,99,116,111,114,51,100,95,97,114,114,97,121,0,118,101,99,116,111,114,52,100,0,118,101,99,116,111,114,52,100,95,97,114,114,97,121,0,97,110,121,0,108,105,115,116,0,109,97,112,0,116,97,98,108,101,0,88,68,79,0,110,97,109,101,0,107,101,114,110,101,108,84,121,112,101,0,118,97,108,117,101,0,37,100,44,32,0,37,100,0,37,108,102,44,32,0,37,108,102,0,44,32,0,37,108,102,44,37,108,102,0,37,108,102,44,37,108,102,59,32,0,37,102,44,37,102,44,37,102,0,37,108,102,44,37,108,102,44,37,108,102,59,32,0,37,108,102,44,37,108,102,44,37,108,102,0,37,102,44,37,102,44,37,102,44,37,102,0,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,59,32,0,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,0,100,97,116,97,115,101,116,0,44,0,59,0,80,97,114,115,101,32,88,77,76,32,69,114,114,111,114,0,80,97,114,115,101,32,88,77,76,32,79,75,0,75,101,114,110,101,108,84,121,112,101,0,100,120,110,117,108,108,0,100,120,105,110,116,0,100,120,114,101,97,108,0,100,120,118,101,99,116,111,114,50,0,100,120,118,101,99,116,111,114,51,0,100,120,118,101,99,116,111,114,52,0,100,120,115,116,114,105,110,103,0,100,120,119,115,116,114,105,110,103,0,100,120,110,111,100,101,0,100,120,108,105,115,116,0,100,120,109,97,112,0,100,120,116,97,98,108,101,0,100,120,99,111,117,110,116,0,86,101,99,116,111,114,50,100,0,86,101,99,116,111,114,51,100,0,86,101,99,116,111,114,52,100,0,103,101,116,86,101,114,115,105,111,110,0,99,114,101,97,116,101,68,97,116,97,115,101,116,0,103,101,116,68,97,116,97,115,101,116,78,111,100,101,0,103,101,116,78,111,100,101,67,104,105,108,100,67,111,117,110,116,0,103,101,116,67,104,105,108,100,78,111,100,101,0,103,101,116,78,111,100,101,78,97,109,101,0,103,101,116,78,111,100,101,84,121,112,101,0,103,101,116,78,111,100,101,76,101,110,103,116,104,0,107,101,114,110,101,108,116,121,112,101,50,115,116,114,105,110,103,0,115,116,114,105,110,103,50,107,101,114,110,101,108,116,121,112,101,0,97,100,100,67,104,105,108,100,78,111,100,101,0,115,101,116,73,110,116,78,111,100,101,86,97,108,117,101,0,115,101,116,82,101,97,108,78,111,100,101,86,97,108,117,101,0,115,101,116,83,116,114,105,110,103,78,111,100,101,86,97,108,117,101,0,115,101,116,86,101,99,116,111,114,50,100,78,111,100,101,86,97,108,117,101,0,115,101,116,86,101,99,116,111,114,51,100,78,111,100,101,86,97,108,117,101,0,115,101,116,86,101,99,116,111,114,52,100,78,111,100,101,86,97,108,117,101,0,97,100,100,73,110,116,78,111,100,101,86,97,108,117,101,0,97,100,100,82,101,97,108,78,111,100,101,86,97,108,117,101,0,97,100,100,83,116,114,105,110,103,78,111,100,101,86,97,108,117,101,0,97,100,100,86,101,99,116,111,114,50,100,78,111,100,101,86,97,108,117,101,0,97,100,100,86,101,99,116,111,114,51,100,78,111,100,101,86,97,108,117,101,0,97,100,100,86,101,99,116,111,114,52,100,78,111,100,101,86,97,108,117,101,0,103,101,116,78,111,100,101,73,110,116,86,97,108,117,101,0,103,101,116,78,111,100,101,82,101,97,108,86,97,108,117,101,0,103,101,116,78,111,100,101,83,116,114,105,110,103,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,50,100,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,51,100,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,52,100,86,97,108,117,101,0,103,101,116,78,111,100,101,73,110,116,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,82,101,97,108,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,83,116,114,105,110,103,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,50,100,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,51,100,65,114,114,97,121,86,97,108,117,101,0,103,101,116,78,111,100,101,86,101,99,116,111,114,52,100,65,114,114,97,121,86,97,108,117,101,0,102,111,114,109,97,116,84,111,88,109,108,70,105,108,101,0,108,111,97,100,70,114,111,109,88,109,108,70,105,108,101,0,105,105,105,105,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,56,86,101,99,116,111,114,52,100,0,56,86,101,99,116,111,114,51,100,0,56,86,101,99,116,111,114,50,100,0,100,105,105,105,0,105,105,105,0,100,105,105,0,105,105,105,100,100,100,100,105,0,105,105,105,100,100,100,105,0,105,105,105,100,100,105,0,105,105,105,105,105,0,105,105,105,100,105,0,105,105,105,100,100,100,100,0,105,105,105,100,100,100,0,105,105,105,100,100,0,105,105,105,100,0,105,105,105,105,105,105,0,49,49,101,95,100,120,95,116,121,112,101,95,116,0,105,105,0,102,105,0,118,105,105,102,0,102,105,105,0,118,105,0,105,0,78,50,100,120,50,53,99,95,100,120,95,99,101,108,108,95,115,116,114,105,110,103,95,97,114,114,97,121,95,116,116,73,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,49,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,49,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,119,76,49,49,101,95,100,120,95,116,121,112,101,95,116,55,69,69,69,0,78,50,100,120,49,49,99,95,100,120,95,99,101,108,108,95,116,69,0,78,50,100,120,49,57,99,95,100,120,95,99,101,108,108,95,115,116,114,105,110,103,95,116,116,73,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,49,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,49,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,119,76,49,49,101,95,100,120,95,116,121,112,101,95,116,55,69,69,69,0,78,50,100,120,50,53,99,95,100,120,95,99,101,108,108,95,115,116,114,105,110,103,95,97,114,114,97,121,95,116,116,73,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,49,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,49,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,99,76,49,49,101,95,100,120,95,116,121,112,101,95,116,54,69,69,69,0,78,50,100,120,49,57,99,95,100,120,95,99,101,108,108,95,115,116,114,105,110,103,95,116,116,73,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,49,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,49,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,99,76,49,49,101,95,100,120,95,116,121,112,101,95,116,54,69,69,69,0,78,50,100,120,49,54,99,95,100,120,95,110,111,100,101,95,109,105,110,105,95,116,69,0,55,100,120,95,110,111,100,101,0,78,50,100,120,49,56,99,95,100,120,95,120,110,111,100,101,95,105,109,112,108,95,116,116,73,76,49,49,101,95,100,120,95,116,121,112,101,95,116,49,49,69,69,69,0,78,50,100,120,49,56,99,95,100,120,95,120,110,111,100,101,95,105,109,112,108,95,116,116,73,76,49,49,101,95,100,120,95,116,121,112,101,95,116,49,48,69,69,69,0,78,50,100,120,49,56,99,95,100,120,95,120,110,111,100,101,95,105,109,112,108,95,116,116,73,76,49,49,101,95,100,120,95,116,121,112,101,95,116,57,69,69,69,0,78,50,100,120,49,56,99,95,100,120,95,120,110,111,100,101,95,105,109,112,108,95,116,116,73,76,49,49,101,95,100,120,95,116,121,112,101,95,116,56,69,69,69,0,78,50,100,120,50,51,99,95,100,120,95,99,101,108,108,95,97,114,114,97,121,95,105,109,112,108,95,116,116,73,49,50,100,120,95,118,101,99,116,111,114,52,95,116,76,49,49,101,95,100,120,95,116,121,112,101,95,116,53,69,69,69,0,78,50,100,120,50,51,99,95,100,120,95,99,101,108,108,95,97,114,114,97,121,95,105,109,112,108,95,116,116,73,49,50,100,120,95,118,101,99,116,111,114,51,95,116,76,49,49,101,95,100,120,95,116,121,112,101,95,116,52,69,69,69,0,78,50,100,120,50,51,99,95,100,120,95,99,101,108,108,95,97,114,114,97,121,95,105,109,112,108,95,116,116,73,49,50,100,120,95,118,101,99,116,111,114,50,95,116,76,49,49,101,95,100,120,95,116,121,112,101,95,116,51,69,69,69,0,78,50,100,120,50,51,99,95,100,120,95,99,101,108,108,95,97,114,114,97,121,95,105,109,112,108,95,116,116,73,100,76,49,49,101,95,100,120,95,116,121,112,101,95,116,50,69,69,69,0,78,50,100,120,50,51,99,95,100,120,95,99,101,108,108,95,97,114,114,97,121,95,105,109,112,108,95,116,116,73,105,76,49,49,101,95,100,120,95,116,121,112,101,95,116,49,69,69,69,0,78,50,100,120,49,55,99,95,100,120,95,99,101,108,108,95,105,109,112,108,95,116,116,73,49,50,100,120,95,118,101,99,116,111,114,52,95,116,76,49,49,101,95,100,120,95,116,121,112,101,95,116,53,69,69,69,0,78,50,100,120,49,55,99,95,100,120,95,99,101,108,108,95,105,109,112,108,95,116,116,73,49,50,100,120,95,118,101,99,116,111,114,51,95,116,76,49,49,101,95,100,120,95,116,121,112,101,95,116,52,69,69,69,0,78,50,100,120,49,55,99,95,100,120,95,99,101,108,108,95,105,109,112,108,95,116,116,73,49,50,100,120,95,118,101,99,116,111,114,50,95,116,76,49,49,101,95,100,120,95,116,121,112,101,95,116,51,69,69,69,0,78,50,100,120,49,55,99,95,100,120,95,99,101,108,108,95,105,109,112,108,95,116,116,73,100,76,49,49,101,95,100,120,95,116,121,112,101,95,116,50,69,69,69,0,78,50,100,120,49,55,99,95,100,120,95,99,101,108,108,95,105,109,112,108,95,116,116,73,105,76,49,49,101,95,100,120,95,116,121,112,101,95,116,49,69,69,69,0,0,118,111,105,100,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,108,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,101,110,117,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+3408);
/* memory initializer */ allocate([120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,68,58,92,80,114,111,103,114,97,109,32,70,105,108,101,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,68,58,92,80,114,111,103,114,97,109,32,70,105,108,101,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,118,101,99,116,111,114,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+13648);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+17562);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ___gxx_personality_v0() {
    }

  var _emscripten_landingpad=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __embind_register_enum_value(
      rawEnumType,
      name,
      enumValue
    ) {
      var enumType = requireRegisteredType(rawEnumType, 'enum');
      name = readLatin1String(name);
  
      var Enum = enumType.constructor;
  
      var Value = Object.create(enumType.constructor.prototype, {
          value: {value: enumValue},
          constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
      });
      Enum.values[enumValue] = Value;
      Enum[name] = Value;
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  var tupleRegistrations={};
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }function __embind_register_value_array_element(
      rawTupleType,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      tupleRegistrations[rawTupleType].elements.push({
          getterReturnType: getterReturnType,
          getter: requireFunction(getterSignature, getter),
          getterContext: getterContext,
          setterArgumentType: setterArgumentType,
          setter: requireFunction(setterSignature, setter),
          setterContext: setterContext,
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __embind_register_value_array(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      tupleRegistrations[rawType] = {
          name: readLatin1String(name),
          rawConstructor: requireFunction(constructorSignature, rawConstructor),
          rawDestructor: requireFunction(destructorSignature, rawDestructor),
          elements: [],
      };
    }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  var _emscripten_resume=true;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __embind_finalize_value_array(rawTupleType) {
      var reg = tupleRegistrations[rawTupleType];
      delete tupleRegistrations[rawTupleType];
      var elements = reg.elements;
      var elementsLength = elements.length;
      var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                  concat(elements.map(function(elt) { return elt.setterArgumentType; }));
  
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
  
      whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
          elements.forEach(function(elt, i) {
              var getterReturnType = elementTypes[i];
              var getter = elt.getter;
              var getterContext = elt.getterContext;
              var setterArgumentType = elementTypes[i + elementsLength];
              var setter = elt.setter;
              var setterContext = elt.setterContext;
              elt.read = function(ptr) {
                  return getterReturnType['fromWireType'](getter(getterContext, ptr));
              };
              elt.write = function(ptr, o) {
                  var destructors = [];
                  setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                  runDestructors(destructors);
              };
          });
  
          return [{
              name: reg.name,
              'fromWireType': function(ptr) {
                  var rv = new Array(elementsLength);
                  for (var i = 0; i < elementsLength; ++i) {
                      rv[i] = elements[i].read(ptr);
                  }
                  rawDestructor(ptr);
                  return rv;
              },
              'toWireType': function(destructors, o) {
                  if (elementsLength !== o.length) {
                      throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                  }
                  var ptr = rawConstructor();
                  for (var i = 0; i < elementsLength; ++i) {
                      elements[i].write(ptr, o[i]);
                  }
                  if (destructors !== null) {
                      destructors.push(rawDestructor, ptr);
                  }
                  return ptr;
              },
              'argPackAdvance': 8,
              'readValueFromPointer': simpleReadValueFromPointer,
              destructorFunction: rawDestructor,
          }];
      });
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _fabs=Math_abs;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function enumReadValueFromPointer(name, shift, signed) {
      switch (shift) {
          case 0: return function(pointer) {
              var heap = signed ? HEAP8 : HEAPU8;
              return this['fromWireType'](heap[pointer]);
          };
          case 1: return function(pointer) {
              var heap = signed ? HEAP16 : HEAPU16;
              return this['fromWireType'](heap[pointer >> 1]);
          };
          case 2: return function(pointer) {
              var heap = signed ? HEAP32 : HEAPU32;
              return this['fromWireType'](heap[pointer >> 2]);
          };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_enum(
      rawType,
      name,
      size,
      isSigned
    ) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
  
      function constructor() {
      }
      constructor.values = {};
  
      registerType(rawType, {
          name: name,
          constructor: constructor,
          'fromWireType': function(c) {
              return this.constructor.values[c];
          },
          'toWireType': function(destructors, c) {
              return c.value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': enumReadValueFromPointer(name, shift, isSigned),
          destructorFunction: null,
      });
      exposePublicSymbol(name, constructor);
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);
embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
init_emval();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiidi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiidd(x) { Module["printErr"]("Invalid function pointer called with signature 'iiidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiddd(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'iidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidd(x) { Module["printErr"]("Invalid function pointer called with signature 'iidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iidddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidi(x) { Module["printErr"]("Invalid function pointer called with signature 'iidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiddddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiddddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiidddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiidddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'iiidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iid(x) { Module["printErr"]("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiddd(x) { Module["printErr"]("Invalid function pointer called with signature 'iiddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiddddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiddddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiddi(x) { Module["printErr"]("Invalid function pointer called with signature 'iiddi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_d(x) { Module["printErr"]("Invalid function pointer called with signature 'd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiddi(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiddi"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidi(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiidi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidd(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiidd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiddd(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidddd(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidd(index,a1,a2,a3) {
  try {
    return Module["dynCall_iidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidddi(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iidddi"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidi(index,a1,a2,a3) {
  try {
    return Module["dynCall_iidi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiddddi(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiddddi"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidddi(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiidddi"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiidddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiddd(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiddddi(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiddddi"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiddi(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiddi"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_d(index) {
  try {
    return Module["dynCall_d"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_iiiddi": nullFunc_iiiddi, "nullFunc_iiidi": nullFunc_iiidi, "nullFunc_vi": nullFunc_vi, "nullFunc_iiidd": nullFunc_iiidd, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiddd": nullFunc_iiiddd, "nullFunc_ii": nullFunc_ii, "nullFunc_iidddd": nullFunc_iidddd, "nullFunc_iidd": nullFunc_iidd, "nullFunc_iidddi": nullFunc_iidddi, "nullFunc_iidi": nullFunc_iidi, "nullFunc_iiiddddi": nullFunc_iiiddddi, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiidddi": nullFunc_iiidddi, "nullFunc_iiidddd": nullFunc_iiidddd, "nullFunc_diii": nullFunc_diii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_di": nullFunc_di, "nullFunc_iid": nullFunc_iid, "nullFunc_iiddd": nullFunc_iiddd, "nullFunc_iiddddi": nullFunc_iiddddi, "nullFunc_iiddi": nullFunc_iiddi, "nullFunc_iii": nullFunc_iii, "nullFunc_dii": nullFunc_dii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_d": nullFunc_d, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_viiii": nullFunc_viiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiddi": invoke_iiiddi, "invoke_iiidi": invoke_iiidi, "invoke_vi": invoke_vi, "invoke_iiidd": invoke_iiidd, "invoke_vii": invoke_vii, "invoke_iiiddd": invoke_iiiddd, "invoke_ii": invoke_ii, "invoke_iidddd": invoke_iidddd, "invoke_iidd": invoke_iidd, "invoke_iidddi": invoke_iidddi, "invoke_iidi": invoke_iidi, "invoke_iiiddddi": invoke_iiiddddi, "invoke_iiiiii": invoke_iiiiii, "invoke_iiii": invoke_iiii, "invoke_iiidddi": invoke_iiidddi, "invoke_iiidddd": invoke_iiidddd, "invoke_diii": invoke_diii, "invoke_iiid": invoke_iiid, "invoke_di": invoke_di, "invoke_iid": invoke_iid, "invoke_iiddd": invoke_iiddd, "invoke_iiddddi": invoke_iiddddi, "invoke_iiddi": invoke_iiddi, "invoke_iii": invoke_iii, "invoke_dii": invoke_dii, "invoke_viiiiii": invoke_viiiiii, "invoke_d": invoke_d, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_pthread_cleanup_pop": _pthread_cleanup_pop, "__embind_register_enum": __embind_register_enum, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "___gxx_personality_v0": ___gxx_personality_v0, "__embind_register_memory_view": __embind_register_memory_view, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "_abort": _abort, "__embind_register_value_array_element": __embind_register_value_array_element, "throwBindingError": throwBindingError, "___setErrNo": ___setErrNo, "__embind_register_integer": __embind_register_integer, "integerReadValueFromPointer": integerReadValueFromPointer, "extendError": extendError, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___syscall54": ___syscall54, "getShiftFromSize": getShiftFromSize, "__embind_register_function": __embind_register_function, "__embind_register_emval": __embind_register_emval, "__embind_finalize_value_array": __embind_finalize_value_array, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "__emval_register": __emval_register, "_sbrk": _sbrk, "__embind_register_void": __embind_register_void, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "enumReadValueFromPointer": enumReadValueFromPointer, "_embind_repr": _embind_repr, "__embind_register_std_wstring": __embind_register_std_wstring, "_pthread_getspecific": _pthread_getspecific, "createNamedFunction": createNamedFunction, "embind_init_charCodes": embind_init_charCodes, "readLatin1String": readLatin1String, "throwUnboundTypeError": throwUnboundTypeError, "_pthread_self": _pthread_self, "craftInvokerFunction": craftInvokerFunction, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "__embind_register_enum_value": __embind_register_enum_value, "__embind_register_float": __embind_register_float, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "___unlock": ___unlock, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "_emscripten_set_main_loop": _emscripten_set_main_loop, "getTypeName": getTypeName, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "registerType": registerType, "___cxa_throw": ___cxa_throw, "__embind_register_value_array": __embind_register_value_array, "___lock": ___lock, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "ensureOverloadTable": ensureOverloadTable, "count_emval_handles": count_emval_handles, "_time": _time, "requireFunction": requireFunction, "runDestructors": runDestructors, "new_": new_, "_atexit": _atexit, "___syscall140": ___syscall140, "exposePublicSymbol": exposePublicSymbol, "__embind_register_std_string": __embind_register_std_string, "replacePublicSymbol": replacePublicSymbol, "___cxa_pure_virtual": ___cxa_pure_virtual, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_iiiddi=env.nullFunc_iiiddi;
  var nullFunc_iiidi=env.nullFunc_iiidi;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_iiidd=env.nullFunc_iiidd;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiddd=env.nullFunc_iiiddd;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iidddd=env.nullFunc_iidddd;
  var nullFunc_iidd=env.nullFunc_iidd;
  var nullFunc_iidddi=env.nullFunc_iidddi;
  var nullFunc_iidi=env.nullFunc_iidi;
  var nullFunc_iiiddddi=env.nullFunc_iiiddddi;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiidddi=env.nullFunc_iiidddi;
  var nullFunc_iiidddd=env.nullFunc_iiidddd;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_iiid=env.nullFunc_iiid;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_iid=env.nullFunc_iid;
  var nullFunc_iiddd=env.nullFunc_iiddd;
  var nullFunc_iiddddi=env.nullFunc_iiddddi;
  var nullFunc_iiddi=env.nullFunc_iiddi;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_d=env.nullFunc_d;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiddi=env.invoke_iiiddi;
  var invoke_iiidi=env.invoke_iiidi;
  var invoke_vi=env.invoke_vi;
  var invoke_iiidd=env.invoke_iiidd;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiddd=env.invoke_iiiddd;
  var invoke_ii=env.invoke_ii;
  var invoke_iidddd=env.invoke_iidddd;
  var invoke_iidd=env.invoke_iidd;
  var invoke_iidddi=env.invoke_iidddi;
  var invoke_iidi=env.invoke_iidi;
  var invoke_iiiddddi=env.invoke_iiiddddi;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiidddi=env.invoke_iiidddi;
  var invoke_iiidddd=env.invoke_iiidddd;
  var invoke_diii=env.invoke_diii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_di=env.invoke_di;
  var invoke_iid=env.invoke_iid;
  var invoke_iiddd=env.invoke_iiddd;
  var invoke_iiddddi=env.invoke_iiddddi;
  var invoke_iiddi=env.invoke_iiddi;
  var invoke_iii=env.invoke_iii;
  var invoke_dii=env.invoke_dii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_d=env.invoke_d;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var __embind_register_enum=env.__embind_register_enum;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var _abort=env._abort;
  var __embind_register_value_array_element=env.__embind_register_value_array_element;
  var throwBindingError=env.throwBindingError;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_integer=env.__embind_register_integer;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var extendError=env.extendError;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___syscall54=env.___syscall54;
  var getShiftFromSize=env.getShiftFromSize;
  var __embind_register_function=env.__embind_register_function;
  var __embind_register_emval=env.__embind_register_emval;
  var __embind_finalize_value_array=env.__embind_finalize_value_array;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var __emval_register=env.__emval_register;
  var _sbrk=env._sbrk;
  var __embind_register_void=env.__embind_register_void;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var enumReadValueFromPointer=env.enumReadValueFromPointer;
  var _embind_repr=env._embind_repr;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _pthread_getspecific=env._pthread_getspecific;
  var createNamedFunction=env.createNamedFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var readLatin1String=env.readLatin1String;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var _pthread_self=env._pthread_self;
  var craftInvokerFunction=env.craftInvokerFunction;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var __embind_register_enum_value=env.__embind_register_enum_value;
  var __embind_register_float=env.__embind_register_float;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var ___unlock=env.___unlock;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_emval=env.init_emval;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var getTypeName=env.getTypeName;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var __embind_register_value_array=env.__embind_register_value_array;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ensureOverloadTable=env.ensureOverloadTable;
  var count_emval_handles=env.count_emval_handles;
  var _time=env._time;
  var requireFunction=env.requireFunction;
  var runDestructors=env.runDestructors;
  var new_=env.new_;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var exposePublicSymbol=env.exposePublicSymbol;
  var __embind_register_std_string=env.__embind_register_std_string;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $5 = sp + 76|0;
 $17 = $this;
 $18 = $__nd;
 $19 = $17;
 $20 = $18;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $18;
 $23 = HEAP32[$22>>2]|0;
 __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($19,$23);
 $24 = $18;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($19,$26);
 $9 = $19;
 $27 = $9;
 $28 = ((($27)) + 4|0);
 $8 = $28;
 $29 = $8;
 $7 = $29;
 $30 = $7;
 $__na = $30;
 $31 = $__na;
 $32 = $18;
 $33 = ((($32)) + 16|0);
 $6 = $33;
 $34 = $6;
 $3 = $31;
 $4 = $34;
 $35 = $3;
 $36 = $4;
 ;HEAP8[$2>>0]=HEAP8[$5>>0]|0;
 $0 = $35;
 $1 = $36;
 $37 = $1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($37);
 $38 = $__na;
 $39 = $18;
 $14 = $38;
 $15 = $39;
 $16 = 1;
 $40 = $14;
 $41 = $15;
 $42 = $16;
 $11 = $40;
 $12 = $41;
 $13 = $42;
 $43 = $12;
 $10 = $43;
 $44 = $10;
 __ZdlPv($44);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESG_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i = 0, $__lhs_sz$i$i$i1 = 0, $__nd = 0, $__result$i$i$i = 0, $__result$i$i$i3 = 0, $__rhs_sz$i$i$i = 0, $__rhs_sz$i$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $22 = sp + 8|0;
 $25 = sp + 629|0;
 $__lhs_sz$i$i$i1 = sp + 380|0;
 $__rhs_sz$i$i$i2 = sp + 376|0;
 $90 = sp;
 $93 = sp + 628|0;
 $__lhs_sz$i$i$i = sp + 104|0;
 $__rhs_sz$i$i$i = sp + 100|0;
 $148 = $this;
 $149 = $__parent;
 $150 = $__v;
 $151 = $148;
 $146 = $151;
 $152 = $146;
 $145 = $152;
 $153 = $145;
 $154 = ((($153)) + 4|0);
 $144 = $154;
 $155 = $144;
 $143 = $155;
 $156 = $143;
 $142 = $156;
 $157 = $142;
 $141 = $157;
 $158 = $141;
 $159 = HEAP32[$158>>2]|0;
 $__nd = $159;
 $160 = $__nd;
 $161 = ($160|0)!=(0|0);
 if (!($161)) {
  $140 = $151;
  $437 = $140;
  $438 = ((($437)) + 4|0);
  $139 = $438;
  $439 = $139;
  $138 = $439;
  $440 = $138;
  $137 = $440;
  $441 = $137;
  $136 = $441;
  $442 = $136;
  $443 = $149;
  HEAP32[$443>>2] = $442;
  $444 = $149;
  $445 = HEAP32[$444>>2]|0;
  $147 = $445;
  $446 = $147;
  STACKTOP = sp;return ($446|0);
 }
 while(1) {
  $70 = $151;
  $162 = $70;
  $163 = ((($162)) + 8|0);
  $69 = $163;
  $164 = $69;
  $68 = $164;
  $165 = $68;
  $166 = $150;
  $167 = $__nd;
  $168 = ((($167)) + 16|0);
  $65 = $165;
  $66 = $166;
  $67 = $168;
  $169 = $66;
  $170 = $67;
  $63 = $169;
  $64 = $170;
  $171 = $63;
  $172 = $64;
  $61 = $171;
  $62 = $172;
  $173 = $61;
  $59 = $173;
  $174 = $59;
  $58 = $174;
  $175 = $58;
  $57 = $175;
  $176 = $57;
  $56 = $176;
  $177 = $56;
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = $179 & 1;
  $181 = ($180|0)!=(0);
  if ($181) {
   $52 = $174;
   $182 = $52;
   $51 = $182;
   $183 = $51;
   $50 = $183;
   $184 = $50;
   $185 = ((($184)) + 4|0);
   $186 = HEAP32[$185>>2]|0;
   $193 = $186;
  } else {
   $55 = $174;
   $187 = $55;
   $54 = $187;
   $188 = $54;
   $53 = $188;
   $189 = $53;
   $190 = HEAP8[$189>>0]|0;
   $191 = $190&255;
   $192 = $191 >> 1;
   $193 = $192;
  }
  HEAP32[$__lhs_sz$i$i$i1>>2] = $193;
  $194 = $62;
  $49 = $194;
  $195 = $49;
  $48 = $195;
  $196 = $48;
  $47 = $196;
  $197 = $47;
  $46 = $197;
  $198 = $46;
  $199 = HEAP8[$198>>0]|0;
  $200 = $199&255;
  $201 = $200 & 1;
  $202 = ($201|0)!=(0);
  if ($202) {
   $42 = $195;
   $203 = $42;
   $41 = $203;
   $204 = $41;
   $40 = $204;
   $205 = $40;
   $206 = ((($205)) + 4|0);
   $207 = HEAP32[$206>>2]|0;
   $214 = $207;
  } else {
   $45 = $195;
   $208 = $45;
   $44 = $208;
   $209 = $44;
   $43 = $209;
   $210 = $43;
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   $213 = $212 >> 1;
   $214 = $213;
  }
  HEAP32[$__rhs_sz$i$i$i2>>2] = $214;
  $39 = $173;
  $215 = $39;
  $38 = $215;
  $216 = $38;
  $37 = $216;
  $217 = $37;
  $36 = $217;
  $218 = $36;
  $35 = $218;
  $219 = $35;
  $220 = HEAP8[$219>>0]|0;
  $221 = $220&255;
  $222 = $221 & 1;
  $223 = ($222|0)!=(0);
  if ($223) {
   $29 = $216;
   $224 = $29;
   $28 = $224;
   $225 = $28;
   $27 = $225;
   $226 = $27;
   $227 = ((($226)) + 8|0);
   $228 = HEAP32[$227>>2]|0;
   $235 = $228;
  } else {
   $34 = $216;
   $229 = $34;
   $33 = $229;
   $230 = $33;
   $32 = $230;
   $231 = $32;
   $232 = ((($231)) + 1|0);
   $31 = $232;
   $233 = $31;
   $30 = $233;
   $234 = $30;
   $235 = $234;
  }
  $26 = $235;
  $236 = $26;
  $237 = $62;
  $16 = $237;
  $238 = $16;
  $15 = $238;
  $239 = $15;
  $14 = $239;
  $240 = $14;
  $13 = $240;
  $241 = $13;
  $12 = $241;
  $242 = $12;
  $243 = HEAP8[$242>>0]|0;
  $244 = $243&255;
  $245 = $244 & 1;
  $246 = ($245|0)!=(0);
  if ($246) {
   $6 = $239;
   $247 = $6;
   $5 = $247;
   $248 = $5;
   $4 = $248;
   $249 = $4;
   $250 = ((($249)) + 8|0);
   $251 = HEAP32[$250>>2]|0;
   $258 = $251;
  } else {
   $11 = $239;
   $252 = $11;
   $10 = $252;
   $253 = $10;
   $9 = $253;
   $254 = $9;
   $255 = ((($254)) + 1|0);
   $8 = $255;
   $256 = $8;
   $7 = $256;
   $257 = $7;
   $258 = $257;
  }
  $3 = $258;
  $259 = $3;
  $23 = $__lhs_sz$i$i$i1;
  $24 = $__rhs_sz$i$i$i2;
  $260 = $23;
  $261 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $260;
  $21 = $261;
  $262 = $21;
  $263 = $20;
  $17 = $22;
  $18 = $262;
  $19 = $263;
  $264 = $18;
  $265 = HEAP32[$264>>2]|0;
  $266 = $19;
  $267 = HEAP32[$266>>2]|0;
  $268 = ($265>>>0)<($267>>>0);
  $269 = $21;
  $270 = $20;
  $271 = $268 ? $269 : $270;
  $272 = HEAP32[$271>>2]|0;
  __THREW__ = 0;
  $273 = (invoke_iiii(268,($236|0),($259|0),($272|0))|0);
  $274 = __THREW__; __THREW__ = 0;
  $275 = $274&1;
  if ($275) {
   label = 22;
   break;
  }
  $__result$i$i$i3 = $273;
  $276 = $__result$i$i$i3;
  $277 = ($276|0)!=(0);
  do {
   if ($277) {
    $278 = $__result$i$i$i3;
    $60 = $278;
   } else {
    $279 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $280 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $281 = ($279>>>0)<($280>>>0);
    if ($281) {
     $60 = -1;
     break;
    }
    $282 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $283 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $284 = ($282>>>0)>($283>>>0);
    if ($284) {
     $60 = 1;
     break;
    } else {
     $60 = 0;
     break;
    }
   }
  } while(0);
  $287 = $60;
  $288 = ($287|0)<(0);
  if ($288) {
   $289 = $__nd;
   $290 = HEAP32[$289>>2]|0;
   $291 = ($290|0)!=(0|0);
   $292 = $__nd;
   if (!($291)) {
    label = 26;
    break;
   }
   $293 = HEAP32[$292>>2]|0;
   $__nd = $293;
   continue;
  }
  $2 = $151;
  $297 = $2;
  $298 = ((($297)) + 8|0);
  $1 = $298;
  $299 = $1;
  $0 = $299;
  $300 = $0;
  $301 = $__nd;
  $302 = ((($301)) + 16|0);
  $303 = $150;
  $133 = $300;
  $134 = $302;
  $135 = $303;
  $304 = $134;
  $305 = $135;
  $131 = $304;
  $132 = $305;
  $306 = $131;
  $307 = $132;
  $129 = $306;
  $130 = $307;
  $308 = $129;
  $127 = $308;
  $309 = $127;
  $126 = $309;
  $310 = $126;
  $125 = $310;
  $311 = $125;
  $124 = $311;
  $312 = $124;
  $313 = HEAP8[$312>>0]|0;
  $314 = $313&255;
  $315 = $314 & 1;
  $316 = ($315|0)!=(0);
  if ($316) {
   $120 = $309;
   $317 = $120;
   $119 = $317;
   $318 = $119;
   $118 = $318;
   $319 = $118;
   $320 = ((($319)) + 4|0);
   $321 = HEAP32[$320>>2]|0;
   $328 = $321;
  } else {
   $123 = $309;
   $322 = $123;
   $122 = $322;
   $323 = $122;
   $121 = $323;
   $324 = $121;
   $325 = HEAP8[$324>>0]|0;
   $326 = $325&255;
   $327 = $326 >> 1;
   $328 = $327;
  }
  HEAP32[$__lhs_sz$i$i$i>>2] = $328;
  $329 = $130;
  $117 = $329;
  $330 = $117;
  $116 = $330;
  $331 = $116;
  $115 = $331;
  $332 = $115;
  $114 = $332;
  $333 = $114;
  $334 = HEAP8[$333>>0]|0;
  $335 = $334&255;
  $336 = $335 & 1;
  $337 = ($336|0)!=(0);
  if ($337) {
   $110 = $330;
   $338 = $110;
   $109 = $338;
   $339 = $109;
   $108 = $339;
   $340 = $108;
   $341 = ((($340)) + 4|0);
   $342 = HEAP32[$341>>2]|0;
   $349 = $342;
  } else {
   $113 = $330;
   $343 = $113;
   $112 = $343;
   $344 = $112;
   $111 = $344;
   $345 = $111;
   $346 = HEAP8[$345>>0]|0;
   $347 = $346&255;
   $348 = $347 >> 1;
   $349 = $348;
  }
  HEAP32[$__rhs_sz$i$i$i>>2] = $349;
  $107 = $308;
  $350 = $107;
  $106 = $350;
  $351 = $106;
  $105 = $351;
  $352 = $105;
  $104 = $352;
  $353 = $104;
  $103 = $353;
  $354 = $103;
  $355 = HEAP8[$354>>0]|0;
  $356 = $355&255;
  $357 = $356 & 1;
  $358 = ($357|0)!=(0);
  if ($358) {
   $97 = $351;
   $359 = $97;
   $96 = $359;
   $360 = $96;
   $95 = $360;
   $361 = $95;
   $362 = ((($361)) + 8|0);
   $363 = HEAP32[$362>>2]|0;
   $370 = $363;
  } else {
   $102 = $351;
   $364 = $102;
   $101 = $364;
   $365 = $101;
   $100 = $365;
   $366 = $100;
   $367 = ((($366)) + 1|0);
   $99 = $367;
   $368 = $99;
   $98 = $368;
   $369 = $98;
   $370 = $369;
  }
  $94 = $370;
  $371 = $94;
  $372 = $130;
  $84 = $372;
  $373 = $84;
  $83 = $373;
  $374 = $83;
  $82 = $374;
  $375 = $82;
  $81 = $375;
  $376 = $81;
  $80 = $376;
  $377 = $80;
  $378 = HEAP8[$377>>0]|0;
  $379 = $378&255;
  $380 = $379 & 1;
  $381 = ($380|0)!=(0);
  if ($381) {
   $74 = $374;
   $382 = $74;
   $73 = $382;
   $383 = $73;
   $72 = $383;
   $384 = $72;
   $385 = ((($384)) + 8|0);
   $386 = HEAP32[$385>>2]|0;
   $393 = $386;
  } else {
   $79 = $374;
   $387 = $79;
   $78 = $387;
   $388 = $78;
   $77 = $388;
   $389 = $77;
   $390 = ((($389)) + 1|0);
   $76 = $390;
   $391 = $76;
   $75 = $391;
   $392 = $75;
   $393 = $392;
  }
  $71 = $393;
  $394 = $71;
  $91 = $__lhs_sz$i$i$i;
  $92 = $__rhs_sz$i$i$i;
  $395 = $91;
  $396 = $92;
  ;HEAP8[$90>>0]=HEAP8[$93>>0]|0;
  $88 = $395;
  $89 = $396;
  $397 = $89;
  $398 = $88;
  $85 = $90;
  $86 = $397;
  $87 = $398;
  $399 = $86;
  $400 = HEAP32[$399>>2]|0;
  $401 = $87;
  $402 = HEAP32[$401>>2]|0;
  $403 = ($400>>>0)<($402>>>0);
  $404 = $89;
  $405 = $88;
  $406 = $403 ? $404 : $405;
  $407 = HEAP32[$406>>2]|0;
  __THREW__ = 0;
  $408 = (invoke_iiii(268,($371|0),($394|0),($407|0))|0);
  $409 = __THREW__; __THREW__ = 0;
  $410 = $409&1;
  if ($410) {
   label = 47;
   break;
  }
  $__result$i$i$i = $408;
  $411 = $__result$i$i$i;
  $412 = ($411|0)!=(0);
  do {
   if ($412) {
    $413 = $__result$i$i$i;
    $128 = $413;
   } else {
    $414 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $415 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $416 = ($414>>>0)<($415>>>0);
    if ($416) {
     $128 = -1;
     break;
    }
    $417 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $418 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $419 = ($417>>>0)>($418>>>0);
    if ($419) {
     $128 = 1;
     break;
    } else {
     $128 = 0;
     break;
    }
   }
  } while(0);
  $422 = $128;
  $423 = ($422|0)<(0);
  $424 = $__nd;
  if (!($423)) {
   label = 52;
   break;
  }
  $425 = ((($424)) + 4|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = ($426|0)!=(0|0);
  $428 = $__nd;
  if (!($427)) {
   label = 51;
   break;
  }
  $429 = ((($428)) + 4|0);
  $430 = HEAP32[$429>>2]|0;
  $__nd = $430;
 }
 if ((label|0) == 22) {
  $285 = ___cxa_find_matching_catch(0|0)|0;
  $286 = tempRet0;
  ___clang_call_terminate($285);
  // unreachable;
 }
 else if ((label|0) == 26) {
  $294 = $149;
  HEAP32[$294>>2] = $292;
  $295 = $149;
  $296 = HEAP32[$295>>2]|0;
  $147 = $296;
  $446 = $147;
  STACKTOP = sp;return ($446|0);
 }
 else if ((label|0) == 47) {
  $420 = ___cxa_find_matching_catch(0|0)|0;
  $421 = tempRet0;
  ___clang_call_terminate($420);
  // unreachable;
 }
 else if ((label|0) == 51) {
  $431 = $149;
  HEAP32[$431>>2] = $428;
  $432 = $149;
  $433 = HEAP32[$432>>2]|0;
  $434 = ((($433)) + 4|0);
  $147 = $434;
  $446 = $147;
  STACKTOP = sp;return ($446|0);
 }
 else if ((label|0) == 52) {
  $435 = $149;
  HEAP32[$435>>2] = $424;
  $436 = $149;
  $147 = $436;
  $446 = $147;
  STACKTOP = sp;return ($446|0);
 }
 return (0)|0;
}
function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSE_SE_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = $this;
 $12 = $__parent;
 $13 = $__child;
 $14 = $__new_node;
 $15 = $11;
 $16 = $14;
 HEAP32[$16>>2] = 0;
 $17 = $14;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = $12;
 $20 = $14;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $14;
 $23 = $13;
 HEAP32[$23>>2] = $22;
 $10 = $15;
 $24 = $10;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $6 = $15;
  $28 = $6;
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $0 = $15;
  $31 = $0;
  HEAP32[$31>>2] = $30;
 }
 $5 = $15;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $4 = $33;
 $34 = $4;
 $3 = $34;
 $35 = $3;
 $2 = $35;
 $36 = $2;
 $1 = $36;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $39 = $13;
 $40 = HEAP32[$39>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($38,$40);
 $9 = $15;
 $41 = $9;
 $42 = ((($41)) + 8|0);
 $8 = $42;
 $43 = $8;
 $7 = $43;
 $44 = $7;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__root;
 $4 = $__x;
 $5 = $4;
 $6 = $3;
 $7 = ($5|0)==($6|0);
 $8 = $4;
 $9 = ((($8)) + 12|0);
 $10 = $7&1;
 HEAP8[$9>>0] = $10;
 while(1) {
  $11 = $4;
  $12 = $3;
  $13 = ($11|0)!=($12|0);
  if (!($13)) {
   label = 17;
   break;
  }
  $14 = $4;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&1;
  $20 = $19 ^ 1;
  if (!($20)) {
   label = 17;
   break;
  }
  $21 = $4;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $2 = $23;
  $24 = $2;
  $25 = $2;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($24|0)==($28|0);
  $30 = $4;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  if ($29) {
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $__y = $36;
   $37 = $__y;
   $38 = ($37|0)!=(0|0);
   if (!($38)) {
    label = 8;
    break;
   }
   $39 = $__y;
   $40 = ((($39)) + 12|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&1;
   if ($42) {
    label = 8;
    break;
   }
   $43 = $4;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $4 = $45;
   $46 = $4;
   $47 = ((($46)) + 12|0);
   HEAP8[$47>>0] = 1;
   $48 = $4;
   $49 = ((($48)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $4 = $50;
   $51 = $4;
   $52 = $3;
   $53 = ($51|0)==($52|0);
   $54 = $4;
   $55 = ((($54)) + 12|0);
   $56 = $53&1;
   HEAP8[$55>>0] = $56;
   $57 = $__y;
   $58 = ((($57)) + 12|0);
   HEAP8[$58>>0] = 1;
   continue;
  } else {
   $81 = HEAP32[$34>>2]|0;
   $__y1 = $81;
   $82 = $__y1;
   $83 = ($82|0)!=(0|0);
   if (!($83)) {
    label = 14;
    break;
   }
   $84 = $__y1;
   $85 = ((($84)) + 12|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&1;
   if ($87) {
    label = 14;
    break;
   }
   $88 = $4;
   $89 = ((($88)) + 8|0);
   $90 = HEAP32[$89>>2]|0;
   $4 = $90;
   $91 = $4;
   $92 = ((($91)) + 12|0);
   HEAP8[$92>>0] = 1;
   $93 = $4;
   $94 = ((($93)) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $4 = $95;
   $96 = $4;
   $97 = $3;
   $98 = ($96|0)==($97|0);
   $99 = $4;
   $100 = ((($99)) + 12|0);
   $101 = $98&1;
   HEAP8[$100>>0] = $101;
   $102 = $__y1;
   $103 = ((($102)) + 12|0);
   HEAP8[$103>>0] = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $59 = $4;
  $1 = $59;
  $60 = $1;
  $61 = $1;
  $62 = ((($61)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  $65 = ($60|0)==($64|0);
  if (!($65)) {
   $66 = $4;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $4 = $68;
   $69 = $4;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($69);
  }
  $70 = $4;
  $71 = ((($70)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $4 = $72;
  $73 = $4;
  $74 = ((($73)) + 12|0);
  HEAP8[$74>>0] = 1;
  $75 = $4;
  $76 = ((($75)) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $4 = $77;
  $78 = $4;
  $79 = ((($78)) + 12|0);
  HEAP8[$79>>0] = 0;
  $80 = $4;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($80);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $104 = $4;
  $0 = $104;
  $105 = $0;
  $106 = $0;
  $107 = ((($106)) + 8|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = HEAP32[$108>>2]|0;
  $110 = ($105|0)==($109|0);
  if ($110) {
   $111 = $4;
   $112 = ((($111)) + 8|0);
   $113 = HEAP32[$112>>2]|0;
   $4 = $113;
   $114 = $4;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($114);
  }
  $115 = $4;
  $116 = ((($115)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  $4 = $117;
  $118 = $4;
  $119 = ((($118)) + 12|0);
  HEAP8[$119>>0] = 1;
  $120 = $4;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $4 = $122;
  $123 = $4;
  $124 = ((($123)) + 12|0);
  HEAP8[$124>>0] = 0;
  $125 = $4;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($125);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__x;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $__y = $4;
 $5 = $__y;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = $1;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 8|0);
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__y;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $0 = $23;
 $24 = $0;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($24|0)==($28|0);
 $30 = $__y;
 $31 = $1;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 if ($29) {
  HEAP32[$33>>2] = $30;
  $35 = $1;
  $36 = $__y;
  HEAP32[$36>>2] = $35;
  $37 = $__y;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 } else {
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $30;
  $35 = $1;
  $36 = $__y;
  HEAP32[$36>>2] = $35;
  $37 = $__y;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__x;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $__y = $3;
 $4 = $__y;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 8|0);
  HEAP32[$14>>2] = $11;
 }
 $15 = $1;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $__y;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $0 = $20;
 $21 = $0;
 $22 = $0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($21|0)==($25|0);
 $27 = $__y;
 $28 = $1;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 if ($26) {
  HEAP32[$30>>2] = $27;
  $32 = $1;
  $33 = $__y;
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $32;
  $35 = $__y;
  $36 = $1;
  $37 = ((($36)) + 8|0);
  HEAP32[$37>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = $27;
  $32 = $1;
  $33 = $__y;
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $32;
  $35 = $__y;
  $36 = $1;
  $37 = ((($36)) + 8|0);
  HEAP32[$37>>2] = $35;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 12)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEC2ERKS8_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 48|0;
 $11 = sp + 8|0;
 $14 = sp + 36|0;
 $15 = sp + 93|0;
 $16 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = ((($24)) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = ((($24)) + 8|0);
 ;HEAP8[$16>>0]=HEAP8[$23>>0]|0;
 $13 = $29;
 HEAP32[$14>>2] = 0;
 $30 = $13;
 $12 = $14;
 $31 = $12;
 $32 = HEAP32[$31>>2]|0;
 $6 = $16;
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $9 = $30;
 HEAP32[$10>>2] = $32;
 $33 = $9;
 $8 = $11;
 $7 = $10;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $4 = $24;
 $36 = $4;
 $37 = ((($36)) + 4|0);
 $3 = $37;
 $38 = $3;
 $2 = $38;
 $39 = $2;
 $1 = $39;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $5 = $24;
 $42 = $5;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE4findIS6_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__lhs_sz$i$i$i = 0, $__p = 0, $__result$i$i$i = 0, $__rhs_sz$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 372|0;
 $41 = sp;
 $44 = sp + 436|0;
 $__lhs_sz$i$i$i = sp + 112|0;
 $__rhs_sz$i$i$i = sp + 108|0;
 $94 = sp + 52|0;
 $102 = sp + 20|0;
 $__p = sp + 8|0;
 $105 = sp + 4|0;
 $103 = $this;
 $104 = $__v;
 $106 = $103;
 $107 = $104;
 $101 = $106;
 $108 = $101;
 $100 = $108;
 $109 = $100;
 $110 = ((($109)) + 4|0);
 $99 = $110;
 $111 = $99;
 $98 = $111;
 $112 = $98;
 $97 = $112;
 $113 = $97;
 $96 = $113;
 $114 = $96;
 $115 = HEAP32[$114>>2]|0;
 $21 = $106;
 $116 = $21;
 $117 = ((($116)) + 4|0);
 $20 = $117;
 $118 = $20;
 $19 = $118;
 $119 = $19;
 $18 = $119;
 $120 = $18;
 $17 = $120;
 $121 = $17;
 $122 = (__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE13__lower_boundIS6_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_SG_SG_($106,$107,$115,$121)|0);
 HEAP32[$__p>>2] = $122;
 $16 = $106;
 $123 = $16;
 $14 = $123;
 $124 = $14;
 $125 = ((($124)) + 4|0);
 $13 = $125;
 $126 = $13;
 $12 = $126;
 $127 = $12;
 $11 = $127;
 $128 = $11;
 $10 = $128;
 $129 = $10;
 $8 = $15;
 $9 = $129;
 $130 = $8;
 $131 = $9;
 HEAP32[$130>>2] = $131;
 $132 = HEAP32[$15>>2]|0;
 HEAP32[$105>>2] = $132;
 $2 = $__p;
 $3 = $105;
 $133 = $2;
 $134 = $3;
 $0 = $133;
 $1 = $134;
 $135 = $0;
 $136 = HEAP32[$135>>2]|0;
 $137 = $1;
 $138 = HEAP32[$137>>2]|0;
 $139 = ($136|0)==($138|0);
 $140 = $139 ^ 1;
 if ($140) {
  $6 = $106;
  $141 = $6;
  $142 = ((($141)) + 8|0);
  $5 = $142;
  $143 = $5;
  $4 = $143;
  $144 = $4;
  $145 = $104;
  $7 = $__p;
  $146 = $7;
  $147 = HEAP32[$146>>2]|0;
  $148 = ((($147)) + 16|0);
  $84 = $144;
  $85 = $145;
  $86 = $148;
  $149 = $85;
  $150 = $86;
  $82 = $149;
  $83 = $150;
  $151 = $82;
  $152 = $83;
  $80 = $151;
  $81 = $152;
  $153 = $80;
  $78 = $153;
  $154 = $78;
  $77 = $154;
  $155 = $77;
  $76 = $155;
  $156 = $76;
  $75 = $156;
  $157 = $75;
  $158 = HEAP8[$157>>0]|0;
  $159 = $158&255;
  $160 = $159 & 1;
  $161 = ($160|0)!=(0);
  if ($161) {
   $71 = $154;
   $162 = $71;
   $70 = $162;
   $163 = $70;
   $69 = $163;
   $164 = $69;
   $165 = ((($164)) + 4|0);
   $166 = HEAP32[$165>>2]|0;
   $173 = $166;
  } else {
   $74 = $154;
   $167 = $74;
   $73 = $167;
   $168 = $73;
   $72 = $168;
   $169 = $72;
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $171 >> 1;
   $173 = $172;
  }
  HEAP32[$__lhs_sz$i$i$i>>2] = $173;
  $174 = $81;
  $68 = $174;
  $175 = $68;
  $67 = $175;
  $176 = $67;
  $66 = $176;
  $177 = $66;
  $65 = $177;
  $178 = $65;
  $179 = HEAP8[$178>>0]|0;
  $180 = $179&255;
  $181 = $180 & 1;
  $182 = ($181|0)!=(0);
  if ($182) {
   $61 = $175;
   $183 = $61;
   $60 = $183;
   $184 = $60;
   $59 = $184;
   $185 = $59;
   $186 = ((($185)) + 4|0);
   $187 = HEAP32[$186>>2]|0;
   $194 = $187;
  } else {
   $64 = $175;
   $188 = $64;
   $63 = $188;
   $189 = $63;
   $62 = $189;
   $190 = $62;
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = $192 >> 1;
   $194 = $193;
  }
  HEAP32[$__rhs_sz$i$i$i>>2] = $194;
  $58 = $153;
  $195 = $58;
  $57 = $195;
  $196 = $57;
  $56 = $196;
  $197 = $56;
  $55 = $197;
  $198 = $55;
  $54 = $198;
  $199 = $54;
  $200 = HEAP8[$199>>0]|0;
  $201 = $200&255;
  $202 = $201 & 1;
  $203 = ($202|0)!=(0);
  if ($203) {
   $48 = $196;
   $204 = $48;
   $47 = $204;
   $205 = $47;
   $46 = $205;
   $206 = $46;
   $207 = ((($206)) + 8|0);
   $208 = HEAP32[$207>>2]|0;
   $215 = $208;
  } else {
   $53 = $196;
   $209 = $53;
   $52 = $209;
   $210 = $52;
   $51 = $210;
   $211 = $51;
   $212 = ((($211)) + 1|0);
   $50 = $212;
   $213 = $50;
   $49 = $213;
   $214 = $49;
   $215 = $214;
  }
  $45 = $215;
  $216 = $45;
  $217 = $81;
  $35 = $217;
  $218 = $35;
  $34 = $218;
  $219 = $34;
  $33 = $219;
  $220 = $33;
  $32 = $220;
  $221 = $32;
  $31 = $221;
  $222 = $31;
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 & 1;
  $226 = ($225|0)!=(0);
  if ($226) {
   $25 = $219;
   $227 = $25;
   $24 = $227;
   $228 = $24;
   $23 = $228;
   $229 = $23;
   $230 = ((($229)) + 8|0);
   $231 = HEAP32[$230>>2]|0;
   $238 = $231;
  } else {
   $30 = $219;
   $232 = $30;
   $29 = $232;
   $233 = $29;
   $28 = $233;
   $234 = $28;
   $235 = ((($234)) + 1|0);
   $27 = $235;
   $236 = $27;
   $26 = $236;
   $237 = $26;
   $238 = $237;
  }
  $22 = $238;
  $239 = $22;
  $42 = $__lhs_sz$i$i$i;
  $43 = $__rhs_sz$i$i$i;
  $240 = $42;
  $241 = $43;
  ;HEAP8[$41>>0]=HEAP8[$44>>0]|0;
  $39 = $240;
  $40 = $241;
  $242 = $40;
  $243 = $39;
  $36 = $41;
  $37 = $242;
  $38 = $243;
  $244 = $37;
  $245 = HEAP32[$244>>2]|0;
  $246 = $38;
  $247 = HEAP32[$246>>2]|0;
  $248 = ($245>>>0)<($247>>>0);
  $249 = $40;
  $250 = $39;
  $251 = $248 ? $249 : $250;
  $252 = HEAP32[$251>>2]|0;
  __THREW__ = 0;
  $253 = (invoke_iiii(268,($216|0),($239|0),($252|0))|0);
  $254 = __THREW__; __THREW__ = 0;
  $255 = $254&1;
  if ($255) {
   $265 = ___cxa_find_matching_catch(0|0)|0;
   $266 = tempRet0;
   ___clang_call_terminate($265);
   // unreachable;
  }
  $__result$i$i$i = $253;
  $256 = $__result$i$i$i;
  $257 = ($256|0)!=(0);
  do {
   if ($257) {
    $258 = $__result$i$i$i;
    $79 = $258;
   } else {
    $259 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $260 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $261 = ($259>>>0)<($260>>>0);
    if ($261) {
     $79 = -1;
     break;
    }
    $262 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $263 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $264 = ($262>>>0)>($263>>>0);
    if ($264) {
     $79 = 1;
     break;
    } else {
     $79 = 0;
     break;
    }
   }
  } while(0);
  $267 = $79;
  $268 = ($267|0)<(0);
  if (!($268)) {
   ;HEAP32[$102>>2]=HEAP32[$__p>>2]|0;
   $279 = HEAP32[$102>>2]|0;
   STACKTOP = sp;return ($279|0);
  }
 }
 $95 = $106;
 $269 = $95;
 $93 = $269;
 $270 = $93;
 $271 = ((($270)) + 4|0);
 $92 = $271;
 $272 = $92;
 $91 = $272;
 $273 = $91;
 $90 = $273;
 $274 = $90;
 $89 = $274;
 $275 = $89;
 $87 = $94;
 $88 = $275;
 $276 = $87;
 $277 = $88;
 HEAP32[$276>>2] = $277;
 $278 = HEAP32[$94>>2]|0;
 HEAP32[$102>>2] = $278;
 $279 = HEAP32[$102>>2]|0;
 STACKTOP = sp;return ($279|0);
}
function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE13__lower_boundIS6_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_SG_SG_($this,$__v,$__root,$__result) {
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i = 0, $__result$i$i$i = 0, $__rhs_sz$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 308|0;
 $__lhs_sz$i$i$i = sp + 72|0;
 $__rhs_sz$i$i$i = sp + 68|0;
 $70 = sp + 20|0;
 $71 = $this;
 $72 = $__v;
 $73 = $__root;
 $74 = $__result;
 $75 = $71;
 while(1) {
  $76 = $73;
  $77 = ($76|0)!=(0|0);
  if (!($77)) {
   label = 27;
   break;
  }
  $69 = $75;
  $78 = $69;
  $79 = ((($78)) + 8|0);
  $68 = $79;
  $80 = $68;
  $67 = $80;
  $81 = $67;
  $82 = $73;
  $83 = ((($82)) + 16|0);
  $84 = $72;
  $62 = $81;
  $63 = $83;
  $64 = $84;
  $85 = $63;
  $86 = $64;
  $60 = $85;
  $61 = $86;
  $87 = $60;
  $88 = $61;
  $58 = $87;
  $59 = $88;
  $89 = $58;
  $56 = $89;
  $90 = $56;
  $55 = $90;
  $91 = $55;
  $54 = $91;
  $92 = $54;
  $53 = $92;
  $93 = $53;
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = $95 & 1;
  $97 = ($96|0)!=(0);
  if ($97) {
   $49 = $90;
   $98 = $49;
   $48 = $98;
   $99 = $48;
   $47 = $99;
   $100 = $47;
   $101 = ((($100)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $109 = $102;
  } else {
   $52 = $90;
   $103 = $52;
   $51 = $103;
   $104 = $51;
   $50 = $104;
   $105 = $50;
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = $107 >> 1;
   $109 = $108;
  }
  HEAP32[$__lhs_sz$i$i$i>>2] = $109;
  $110 = $59;
  $46 = $110;
  $111 = $46;
  $45 = $111;
  $112 = $45;
  $44 = $112;
  $113 = $44;
  $43 = $113;
  $114 = $43;
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = $116 & 1;
  $118 = ($117|0)!=(0);
  if ($118) {
   $39 = $111;
   $119 = $39;
   $38 = $119;
   $120 = $38;
   $37 = $120;
   $121 = $37;
   $122 = ((($121)) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $130 = $123;
  } else {
   $42 = $111;
   $124 = $42;
   $41 = $124;
   $125 = $41;
   $40 = $125;
   $126 = $40;
   $127 = HEAP8[$126>>0]|0;
   $128 = $127&255;
   $129 = $128 >> 1;
   $130 = $129;
  }
  HEAP32[$__rhs_sz$i$i$i>>2] = $130;
  $36 = $89;
  $131 = $36;
  $35 = $131;
  $132 = $35;
  $34 = $132;
  $133 = $34;
  $33 = $133;
  $134 = $33;
  $32 = $134;
  $135 = $32;
  $136 = HEAP8[$135>>0]|0;
  $137 = $136&255;
  $138 = $137 & 1;
  $139 = ($138|0)!=(0);
  if ($139) {
   $26 = $132;
   $140 = $26;
   $25 = $140;
   $141 = $25;
   $24 = $141;
   $142 = $24;
   $143 = ((($142)) + 8|0);
   $144 = HEAP32[$143>>2]|0;
   $151 = $144;
  } else {
   $31 = $132;
   $145 = $31;
   $30 = $145;
   $146 = $30;
   $29 = $146;
   $147 = $29;
   $148 = ((($147)) + 1|0);
   $28 = $148;
   $149 = $28;
   $27 = $149;
   $150 = $27;
   $151 = $150;
  }
  $23 = $151;
  $152 = $23;
  $153 = $59;
  $13 = $153;
  $154 = $13;
  $12 = $154;
  $155 = $12;
  $11 = $155;
  $156 = $11;
  $10 = $156;
  $157 = $10;
  $9 = $157;
  $158 = $9;
  $159 = HEAP8[$158>>0]|0;
  $160 = $159&255;
  $161 = $160 & 1;
  $162 = ($161|0)!=(0);
  if ($162) {
   $3 = $155;
   $163 = $3;
   $2 = $163;
   $164 = $2;
   $1 = $164;
   $165 = $1;
   $166 = ((($165)) + 8|0);
   $167 = HEAP32[$166>>2]|0;
   $174 = $167;
  } else {
   $8 = $155;
   $168 = $8;
   $7 = $168;
   $169 = $7;
   $6 = $169;
   $170 = $6;
   $171 = ((($170)) + 1|0);
   $5 = $171;
   $172 = $5;
   $4 = $172;
   $173 = $4;
   $174 = $173;
  }
  $0 = $174;
  $175 = $0;
  $20 = $__lhs_sz$i$i$i;
  $21 = $__rhs_sz$i$i$i;
  $176 = $20;
  $177 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $176;
  $18 = $177;
  $178 = $18;
  $179 = $17;
  $14 = $19;
  $15 = $178;
  $16 = $179;
  $180 = $15;
  $181 = HEAP32[$180>>2]|0;
  $182 = $16;
  $183 = HEAP32[$182>>2]|0;
  $184 = ($181>>>0)<($183>>>0);
  $185 = $18;
  $186 = $17;
  $187 = $184 ? $185 : $186;
  $188 = HEAP32[$187>>2]|0;
  __THREW__ = 0;
  $189 = (invoke_iiii(268,($152|0),($175|0),($188|0))|0);
  $190 = __THREW__; __THREW__ = 0;
  $191 = $190&1;
  if ($191) {
   label = 23;
   break;
  }
  $__result$i$i$i = $189;
  $192 = $__result$i$i$i;
  $193 = ($192|0)!=(0);
  do {
   if ($193) {
    $194 = $__result$i$i$i;
    $57 = $194;
   } else {
    $195 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $196 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $197 = ($195>>>0)<($196>>>0);
    if ($197) {
     $57 = -1;
     break;
    }
    $198 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
    $199 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
    $200 = ($198>>>0)>($199>>>0);
    if ($200) {
     $57 = 1;
     break;
    } else {
     $57 = 0;
     break;
    }
   }
  } while(0);
  $203 = $57;
  $204 = ($203|0)<(0);
  $205 = $73;
  if ($204) {
   $208 = ((($205)) + 4|0);
   $209 = HEAP32[$208>>2]|0;
   $73 = $209;
   continue;
  } else {
   $74 = $205;
   $206 = $73;
   $207 = HEAP32[$206>>2]|0;
   $73 = $207;
   continue;
  }
 }
 if ((label|0) == 23) {
  $201 = ___cxa_find_matching_catch(0|0)|0;
  $202 = tempRet0;
  ___clang_call_terminate($201);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $210 = $74;
  $65 = $70;
  $66 = $210;
  $211 = $65;
  $212 = $66;
  HEAP32[$211>>2] = $212;
  $213 = HEAP32[$70>>2]|0;
  STACKTOP = sp;return ($213|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__a$i$i$i$i$i = 0, $__cap$i = 0, $__i$i$i$i$i$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 8|0;
 $19 = sp + 233|0;
 $28 = sp;
 $31 = sp + 232|0;
 $39 = sp + 80|0;
 $40 = sp + 68|0;
 $__v = sp + 20|0;
 $45 = $this;
 $46 = $__x;
 $49 = $45;
 $44 = $49;
 $50 = $44;
 $51 = ((($50)) + 8|0);
 $43 = $51;
 $52 = $43;
 $42 = $52;
 $53 = $42;
 $__a = $53;
 $41 = $49;
 $54 = $41;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$54>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $61 = (($60|0) / 12)&-1;
 $62 = (($61) + 1)|0;
 $38 = $49;
 HEAP32[$39>>2] = $62;
 $63 = $38;
 $64 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($63)|0);
 $__ms$i = $64;
 $65 = HEAP32[$39>>2]|0;
 $66 = $__ms$i;
 $67 = ($65>>>0)>($66>>>0);
 if ($67) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($63);
 }
 $36 = $63;
 $68 = $36;
 $35 = $68;
 $69 = $35;
 $34 = $69;
 $70 = $34;
 $71 = ((($70)) + 8|0);
 $33 = $71;
 $72 = $33;
 $32 = $72;
 $73 = $32;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 12)&-1;
 $__cap$i = $79;
 $80 = $__cap$i;
 $81 = $__ms$i;
 $82 = (($81>>>0) / 2)&-1;
 $83 = ($80>>>0)>=($82>>>0);
 if ($83) {
  $84 = $__ms$i;
  $37 = $84;
 } else {
  $85 = $__cap$i;
  $86 = $85<<1;
  HEAP32[$40>>2] = $86;
  $29 = $40;
  $30 = $39;
  $87 = $29;
  $88 = $30;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $26 = $87;
  $27 = $88;
  $89 = $26;
  $90 = $27;
  $23 = $28;
  $24 = $89;
  $25 = $90;
  $91 = $24;
  $92 = HEAP32[$91>>2]|0;
  $93 = $25;
  $94 = HEAP32[$93>>2]|0;
  $95 = ($92>>>0)<($94>>>0);
  $96 = $27;
  $97 = $26;
  $98 = $95 ? $96 : $97;
  $99 = HEAP32[$98>>2]|0;
  $37 = $99;
 }
 $100 = $37;
 $22 = $49;
 $101 = $22;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 12)&-1;
 $109 = $__a;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($__v,$100,$108,$109);
 $110 = $__a;
 $111 = ((($__v)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $21 = $112;
 $113 = $21;
 $114 = $46;
 $20 = $114;
 $115 = $20;
 $16 = $110;
 $17 = $113;
 $18 = $115;
 $116 = $16;
 $117 = $17;
 $118 = $18;
 $15 = $118;
 $119 = $15;
 ;HEAP8[$14>>0]=HEAP8[$19>>0]|0;
 $11 = $116;
 $12 = $117;
 $13 = $119;
 $120 = $11;
 $121 = $12;
 $122 = $13;
 $10 = $122;
 $123 = $10;
 $7 = $120;
 $8 = $121;
 $9 = $123;
 $124 = $8;
 $125 = $9;
 $6 = $125;
 $126 = $6;
 $4 = $124;
 $5 = $126;
 $127 = $4;
 $128 = $5;
 $3 = $128;
 $129 = $3;
 ;HEAP32[$127>>2]=HEAP32[$129>>2]|0;HEAP32[$127+4>>2]=HEAP32[$129+4>>2]|0;HEAP32[$127+8>>2]=HEAP32[$129+8>>2]|0;
 $130 = $5;
 $2 = $130;
 $131 = $2;
 $1 = $131;
 $132 = $1;
 $0 = $132;
 $133 = $0;
 $__a$i$i$i$i$i = $133;
 $__i$i$i$i$i$i = 0;
 while(1) {
  $134 = $__i$i$i$i$i$i;
  $135 = ($134>>>0)<(3);
  if (!($135)) {
   break;
  }
  $136 = $__i$i$i$i$i$i;
  $137 = $__a$i$i$i$i$i;
  $138 = (($137) + ($136<<2)|0);
  HEAP32[$138>>2] = 0;
  $139 = $__i$i$i$i$i$i;
  $140 = (($139) + 1)|0;
  $__i$i$i$i$i$i = $140;
 }
 $141 = ((($__v)) + 8|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($142)) + 12|0);
 HEAP32[$141>>2] = $143;
 __THREW__ = 0;
 invoke_vii(269,($49|0),($__v|0));
 $144 = __THREW__; __THREW__ = 0;
 $145 = $144&1;
 if ($145) {
  $146 = ___cxa_find_matching_catch()|0;
  $147 = tempRet0;
  $47 = $146;
  $48 = $147;
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  $148 = $47;
  $149 = $48;
  ___resumeException($148|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$i$i$i$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 212|0;
 $__t$i1 = sp + 188|0;
 $__t$i = sp + 140|0;
 $38 = sp;
 $43 = sp + 236|0;
 $53 = $this;
 $54 = $__v;
 $55 = $53;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($55);
 $52 = $55;
 $56 = $52;
 $57 = ((($56)) + 8|0);
 $51 = $57;
 $58 = $51;
 $50 = $58;
 $59 = $50;
 $60 = HEAP32[$55>>2]|0;
 $61 = ((($55)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $54;
 $64 = ((($63)) + 4|0);
 $45 = $59;
 $46 = $60;
 $47 = $62;
 $48 = $64;
 while(1) {
  $65 = $47;
  $66 = $46;
  $67 = ($65|0)!=($66|0);
  if (!($67)) {
   break;
  }
  $68 = $45;
  $69 = $48;
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + -12|0);
  $44 = $71;
  $72 = $44;
  $73 = $47;
  $74 = ((($73)) + -12|0);
  $47 = $74;
  $23 = $74;
  $75 = $23;
  $22 = $75;
  $76 = $22;
  $40 = $68;
  $41 = $72;
  $42 = $76;
  $77 = $40;
  $78 = $41;
  $79 = $42;
  $39 = $79;
  $80 = $39;
  ;HEAP8[$38>>0]=HEAP8[$43>>0]|0;
  $35 = $77;
  $36 = $78;
  $37 = $80;
  $81 = $35;
  $82 = $36;
  $83 = $37;
  $34 = $83;
  $84 = $34;
  $31 = $81;
  $32 = $82;
  $33 = $84;
  $85 = $32;
  $86 = $33;
  $30 = $86;
  $87 = $30;
  $28 = $85;
  $29 = $87;
  $88 = $28;
  $89 = $29;
  $27 = $89;
  $90 = $27;
  ;HEAP32[$88>>2]=HEAP32[$90>>2]|0;HEAP32[$88+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$90+8>>2]|0;
  $91 = $29;
  $26 = $91;
  $92 = $26;
  $25 = $92;
  $93 = $25;
  $24 = $93;
  $94 = $24;
  $__a$i$i$i$i$i$i = $94;
  $__i$i$i$i$i$i$i = 0;
  while(1) {
   $95 = $__i$i$i$i$i$i$i;
   $96 = ($95>>>0)<(3);
   if (!($96)) {
    break;
   }
   $97 = $__i$i$i$i$i$i$i;
   $98 = $__a$i$i$i$i$i$i;
   $99 = (($98) + ($97<<2)|0);
   HEAP32[$99>>2] = 0;
   $100 = $__i$i$i$i$i$i$i;
   $101 = (($100) + 1)|0;
   $__i$i$i$i$i$i$i = $101;
  }
  $102 = $48;
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($103)) + -12|0);
  HEAP32[$102>>2] = $104;
 }
 $105 = $54;
 $106 = ((($105)) + 4|0);
 $3 = $55;
 $4 = $106;
 $107 = $3;
 $2 = $107;
 $108 = $2;
 $109 = HEAP32[$108>>2]|0;
 HEAP32[$__t$i2>>2] = $109;
 $110 = $4;
 $0 = $110;
 $111 = $0;
 $112 = HEAP32[$111>>2]|0;
 $113 = $3;
 HEAP32[$113>>2] = $112;
 $1 = $__t$i2;
 $114 = $1;
 $115 = HEAP32[$114>>2]|0;
 $116 = $4;
 HEAP32[$116>>2] = $115;
 $117 = ((($55)) + 4|0);
 $118 = $54;
 $119 = ((($118)) + 8|0);
 $8 = $117;
 $9 = $119;
 $120 = $8;
 $7 = $120;
 $121 = $7;
 $122 = HEAP32[$121>>2]|0;
 HEAP32[$__t$i1>>2] = $122;
 $123 = $9;
 $5 = $123;
 $124 = $5;
 $125 = HEAP32[$124>>2]|0;
 $126 = $8;
 HEAP32[$126>>2] = $125;
 $6 = $__t$i1;
 $127 = $6;
 $128 = HEAP32[$127>>2]|0;
 $129 = $9;
 HEAP32[$129>>2] = $128;
 $12 = $55;
 $130 = $12;
 $131 = ((($130)) + 8|0);
 $11 = $131;
 $132 = $11;
 $10 = $132;
 $133 = $10;
 $134 = $54;
 $15 = $134;
 $135 = $15;
 $136 = ((($135)) + 12|0);
 $14 = $136;
 $137 = $14;
 $13 = $137;
 $138 = $13;
 $19 = $133;
 $20 = $138;
 $139 = $19;
 $18 = $139;
 $140 = $18;
 $141 = HEAP32[$140>>2]|0;
 HEAP32[$__t$i>>2] = $141;
 $142 = $20;
 $16 = $142;
 $143 = $16;
 $144 = HEAP32[$143>>2]|0;
 $145 = $19;
 HEAP32[$145>>2] = $144;
 $17 = $__t$i;
 $146 = $17;
 $147 = HEAP32[$146>>2]|0;
 $148 = $20;
 HEAP32[$148>>2] = $147;
 $149 = $54;
 $150 = ((($149)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $54;
 HEAP32[$152>>2] = $151;
 $21 = $55;
 $153 = $21;
 $154 = ((($153)) + 4|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$153>>2]|0;
 $157 = $155;
 $158 = $156;
 $159 = (($157) - ($158))|0;
 $160 = (($159|0) / 12)&-1;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($55,$160);
 $49 = $55;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 12)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_xml_conv_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0;
 var $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0;
 var $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0;
 var $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2960|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $735 = 1048;
 $733 = 1048;
 $734 = 7332;
 $738 = $733;
 $732 = $738;
 $739 = $732;
 $731 = $739;
 $740 = $731;
 $730 = $740;
 $741 = $734;
 $742 = $734;
 __THREW__ = 0;
 $743 = (invoke_ii(270,($742|0))|0);
 $744 = __THREW__; __THREW__ = 0;
 $745 = $744&1;
 do {
  if ($745) {
   label = 443;
  } else {
   __THREW__ = 0;
   invoke_viii(271,($738|0),($741|0),($743|0));
   $746 = __THREW__; __THREW__ = 0;
   $747 = $746&1;
   if ($747) {
    label = 443;
   } else {
    __THREW__ = 0;
    invoke_viiiii(272,((1060)|0),-16,-8,-1,-1);
    $748 = __THREW__; __THREW__ = 0;
    $749 = $748&1;
    if ($749) {
     $2504 = ___cxa_find_matching_catch()|0;
     $2505 = tempRet0;
     $736 = $2504;
     $737 = $2505;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(1048);
     break;
    }
    $735 = (1064);
    $728 = (1064);
    $729 = 7342;
    $750 = $728;
    $727 = $750;
    $751 = $727;
    $726 = $751;
    $752 = $726;
    $725 = $752;
    $753 = $729;
    $754 = $729;
    __THREW__ = 0;
    $755 = (invoke_ii(270,($754|0))|0);
    $756 = __THREW__; __THREW__ = 0;
    $757 = $756&1;
    if ($757) {
     label = 443;
    } else {
     __THREW__ = 0;
     invoke_viii(271,($750|0),($753|0),($755|0));
     $758 = __THREW__; __THREW__ = 0;
     $759 = $758&1;
     if ($759) {
      label = 443;
     } else {
      __THREW__ = 0;
      invoke_viiiii(272,((1076)|0),-6,-21,-41,-1);
      $760 = __THREW__; __THREW__ = 0;
      $761 = $760&1;
      if ($761) {
       $2506 = ___cxa_find_matching_catch()|0;
       $2507 = tempRet0;
       $736 = $2506;
       $737 = $2507;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1064));
       break;
      }
      $735 = (1080);
      $723 = (1080);
      $724 = 7355;
      $762 = $723;
      $722 = $762;
      $763 = $722;
      $721 = $763;
      $764 = $721;
      $720 = $764;
      $765 = $724;
      $766 = $724;
      __THREW__ = 0;
      $767 = (invoke_ii(270,($766|0))|0);
      $768 = __THREW__; __THREW__ = 0;
      $769 = $768&1;
      if ($769) {
       label = 443;
      } else {
       __THREW__ = 0;
       invoke_viii(271,($762|0),($765|0),($767|0));
       $770 = __THREW__; __THREW__ = 0;
       $771 = $770&1;
       if ($771) {
        label = 443;
       } else {
        __THREW__ = 0;
        invoke_viiiii(272,((1092)|0),0,-1,-1,-1);
        $772 = __THREW__; __THREW__ = 0;
        $773 = $772&1;
        if ($773) {
         $2508 = ___cxa_find_matching_catch()|0;
         $2509 = tempRet0;
         $736 = $2508;
         $737 = $2509;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1080));
         break;
        }
        $735 = (1096);
        $718 = (1096);
        $719 = 7360;
        $774 = $718;
        $717 = $774;
        $775 = $717;
        $716 = $775;
        $776 = $716;
        $715 = $776;
        $777 = $719;
        $778 = $719;
        __THREW__ = 0;
        $779 = (invoke_ii(270,($778|0))|0);
        $780 = __THREW__; __THREW__ = 0;
        $781 = $780&1;
        if ($781) {
         label = 443;
        } else {
         __THREW__ = 0;
         invoke_viii(271,($774|0),($777|0),($779|0));
         $782 = __THREW__; __THREW__ = 0;
         $783 = $782&1;
         if ($783) {
          label = 443;
         } else {
          __THREW__ = 0;
          invoke_viiiii(272,((1108)|0),127,-1,-44,-1);
          $784 = __THREW__; __THREW__ = 0;
          $785 = $784&1;
          if ($785) {
           $2510 = ___cxa_find_matching_catch()|0;
           $2511 = tempRet0;
           $736 = $2510;
           $737 = $2511;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1096));
           break;
          }
          $735 = (1112);
          $713 = (1112);
          $714 = 7371;
          $786 = $713;
          $712 = $786;
          $787 = $712;
          $711 = $787;
          $788 = $711;
          $710 = $788;
          $789 = $714;
          $790 = $714;
          __THREW__ = 0;
          $791 = (invoke_ii(270,($790|0))|0);
          $792 = __THREW__; __THREW__ = 0;
          $793 = $792&1;
          if ($793) {
           label = 443;
          } else {
           __THREW__ = 0;
           invoke_viii(271,($786|0),($789|0),($791|0));
           $794 = __THREW__; __THREW__ = 0;
           $795 = $794&1;
           if ($795) {
            label = 443;
           } else {
            __THREW__ = 0;
            invoke_viiiii(272,((1124)|0),-16,-1,-1,-1);
            $796 = __THREW__; __THREW__ = 0;
            $797 = $796&1;
            if ($797) {
             $2512 = ___cxa_find_matching_catch()|0;
             $2513 = tempRet0;
             $736 = $2512;
             $737 = $2513;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1112));
             break;
            }
            $735 = (1128);
            $708 = (1128);
            $709 = 7377;
            $798 = $708;
            $707 = $798;
            $799 = $707;
            $706 = $799;
            $800 = $706;
            $705 = $800;
            $801 = $709;
            $802 = $709;
            __THREW__ = 0;
            $803 = (invoke_ii(270,($802|0))|0);
            $804 = __THREW__; __THREW__ = 0;
            $805 = $804&1;
            if ($805) {
             label = 443;
            } else {
             __THREW__ = 0;
             invoke_viii(271,($798|0),($801|0),($803|0));
             $806 = __THREW__; __THREW__ = 0;
             $807 = $806&1;
             if ($807) {
              label = 443;
             } else {
              __THREW__ = 0;
              invoke_viiiii(272,((1140)|0),-11,-11,-36,-1);
              $808 = __THREW__; __THREW__ = 0;
              $809 = $808&1;
              if ($809) {
               $2514 = ___cxa_find_matching_catch()|0;
               $2515 = tempRet0;
               $736 = $2514;
               $737 = $2515;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1128));
               break;
              }
              $735 = (1144);
              $703 = (1144);
              $704 = 7383;
              $810 = $703;
              $702 = $810;
              $811 = $702;
              $701 = $811;
              $812 = $701;
              $700 = $812;
              $813 = $704;
              $814 = $704;
              __THREW__ = 0;
              $815 = (invoke_ii(270,($814|0))|0);
              $816 = __THREW__; __THREW__ = 0;
              $817 = $816&1;
              if ($817) {
               label = 443;
              } else {
               __THREW__ = 0;
               invoke_viii(271,($810|0),($813|0),($815|0));
               $818 = __THREW__; __THREW__ = 0;
               $819 = $818&1;
               if ($819) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1156)|0),-1,-28,-60,-1);
               $820 = __THREW__; __THREW__ = 0;
               $821 = $820&1;
               if ($821) {
                $2516 = ___cxa_find_matching_catch()|0;
                $2517 = tempRet0;
                $736 = $2516;
                $737 = $2517;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1144));
                break;
               }
               $735 = (1160);
               $698 = (1160);
               $699 = 7390;
               $822 = $698;
               $697 = $822;
               $823 = $697;
               $696 = $823;
               $824 = $696;
               $695 = $824;
               $825 = $699;
               $826 = $699;
               __THREW__ = 0;
               $827 = (invoke_ii(270,($826|0))|0);
               $828 = __THREW__; __THREW__ = 0;
               $829 = $828&1;
               if ($829) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($822|0),($825|0),($827|0));
               $830 = __THREW__; __THREW__ = 0;
               $831 = $830&1;
               if ($831) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1172)|0),0,0,0,-1);
               $832 = __THREW__; __THREW__ = 0;
               $833 = $832&1;
               if ($833) {
                $2518 = ___cxa_find_matching_catch()|0;
                $2519 = tempRet0;
                $736 = $2518;
                $737 = $2519;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1160));
                break;
               }
               $735 = (1176);
               $693 = (1176);
               $694 = 7396;
               $834 = $693;
               $692 = $834;
               $835 = $692;
               $691 = $835;
               $836 = $691;
               $690 = $836;
               $837 = $694;
               $838 = $694;
               __THREW__ = 0;
               $839 = (invoke_ii(270,($838|0))|0);
               $840 = __THREW__; __THREW__ = 0;
               $841 = $840&1;
               if ($841) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($834|0),($837|0),($839|0));
               $842 = __THREW__; __THREW__ = 0;
               $843 = $842&1;
               if ($843) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1188)|0),-1,-21,-51,-1);
               $844 = __THREW__; __THREW__ = 0;
               $845 = $844&1;
               if ($845) {
                $2520 = ___cxa_find_matching_catch()|0;
                $2521 = tempRet0;
                $736 = $2520;
                $737 = $2521;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1176));
                break;
               }
               $735 = (1192);
               $688 = (1192);
               $689 = 7411;
               $846 = $688;
               $687 = $846;
               $847 = $687;
               $686 = $847;
               $848 = $686;
               $685 = $848;
               $849 = $689;
               $850 = $689;
               __THREW__ = 0;
               $851 = (invoke_ii(270,($850|0))|0);
               $852 = __THREW__; __THREW__ = 0;
               $853 = $852&1;
               if ($853) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($846|0),($849|0),($851|0));
               $854 = __THREW__; __THREW__ = 0;
               $855 = $854&1;
               if ($855) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1204)|0),0,0,-1,-1);
               $856 = __THREW__; __THREW__ = 0;
               $857 = $856&1;
               if ($857) {
                $2522 = ___cxa_find_matching_catch()|0;
                $2523 = tempRet0;
                $736 = $2522;
                $737 = $2523;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1192));
                break;
               }
               $735 = (1208);
               $683 = (1208);
               $684 = 7416;
               $858 = $683;
               $682 = $858;
               $859 = $682;
               $681 = $859;
               $860 = $681;
               $680 = $860;
               $861 = $684;
               $862 = $684;
               __THREW__ = 0;
               $863 = (invoke_ii(270,($862|0))|0);
               $864 = __THREW__; __THREW__ = 0;
               $865 = $864&1;
               if ($865) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($858|0),($861|0),($863|0));
               $866 = __THREW__; __THREW__ = 0;
               $867 = $866&1;
               if ($867) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1220)|0),-118,43,-30,-1);
               $868 = __THREW__; __THREW__ = 0;
               $869 = $868&1;
               if ($869) {
                $2524 = ___cxa_find_matching_catch()|0;
                $2525 = tempRet0;
                $736 = $2524;
                $737 = $2525;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1208));
                break;
               }
               $735 = (1224);
               $678 = (1224);
               $679 = 7427;
               $870 = $678;
               $677 = $870;
               $871 = $677;
               $676 = $871;
               $872 = $676;
               $675 = $872;
               $873 = $679;
               $874 = $679;
               __THREW__ = 0;
               $875 = (invoke_ii(270,($874|0))|0);
               $876 = __THREW__; __THREW__ = 0;
               $877 = $876&1;
               if ($877) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($870|0),($873|0),($875|0));
               $878 = __THREW__; __THREW__ = 0;
               $879 = $878&1;
               if ($879) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1236)|0),-91,42,42,-1);
               $880 = __THREW__; __THREW__ = 0;
               $881 = $880&1;
               if ($881) {
                $2526 = ___cxa_find_matching_catch()|0;
                $2527 = tempRet0;
                $736 = $2526;
                $737 = $2527;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1224));
                break;
               }
               $735 = (1240);
               $673 = (1240);
               $674 = 7433;
               $882 = $673;
               $672 = $882;
               $883 = $672;
               $671 = $883;
               $884 = $671;
               $670 = $884;
               $885 = $674;
               $886 = $674;
               __THREW__ = 0;
               $887 = (invoke_ii(270,($886|0))|0);
               $888 = __THREW__; __THREW__ = 0;
               $889 = $888&1;
               if ($889) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($882|0),($885|0),($887|0));
               $890 = __THREW__; __THREW__ = 0;
               $891 = $890&1;
               if ($891) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1252)|0),-34,-72,-121,-1);
               $892 = __THREW__; __THREW__ = 0;
               $893 = $892&1;
               if ($893) {
                $2528 = ___cxa_find_matching_catch()|0;
                $2529 = tempRet0;
                $736 = $2528;
                $737 = $2529;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1240));
                break;
               }
               $735 = (1256);
               $668 = (1256);
               $669 = 7443;
               $894 = $668;
               $667 = $894;
               $895 = $667;
               $666 = $895;
               $896 = $666;
               $665 = $896;
               $897 = $669;
               $898 = $669;
               __THREW__ = 0;
               $899 = (invoke_ii(270,($898|0))|0);
               $900 = __THREW__; __THREW__ = 0;
               $901 = $900&1;
               if ($901) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($894|0),($897|0),($899|0));
               $902 = __THREW__; __THREW__ = 0;
               $903 = $902&1;
               if ($903) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1268)|0),95,-98,-96,-1);
               $904 = __THREW__; __THREW__ = 0;
               $905 = $904&1;
               if ($905) {
                $2530 = ___cxa_find_matching_catch()|0;
                $2531 = tempRet0;
                $736 = $2530;
                $737 = $2531;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1256));
                break;
               }
               $735 = (1272);
               $663 = (1272);
               $664 = 7453;
               $906 = $663;
               $662 = $906;
               $907 = $662;
               $661 = $907;
               $908 = $661;
               $660 = $908;
               $909 = $664;
               $910 = $664;
               __THREW__ = 0;
               $911 = (invoke_ii(270,($910|0))|0);
               $912 = __THREW__; __THREW__ = 0;
               $913 = $912&1;
               if ($913) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($906|0),($909|0),($911|0));
               $914 = __THREW__; __THREW__ = 0;
               $915 = $914&1;
               if ($915) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1284)|0),127,-1,0,-1);
               $916 = __THREW__; __THREW__ = 0;
               $917 = $916&1;
               if ($917) {
                $2532 = ___cxa_find_matching_catch()|0;
                $2533 = tempRet0;
                $736 = $2532;
                $737 = $2533;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1272));
                break;
               }
               $735 = (1288);
               $658 = (1288);
               $659 = 7464;
               $918 = $658;
               $657 = $918;
               $919 = $657;
               $656 = $919;
               $920 = $656;
               $655 = $920;
               $921 = $659;
               $922 = $659;
               __THREW__ = 0;
               $923 = (invoke_ii(270,($922|0))|0);
               $924 = __THREW__; __THREW__ = 0;
               $925 = $924&1;
               if ($925) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($918|0),($921|0),($923|0));
               $926 = __THREW__; __THREW__ = 0;
               $927 = $926&1;
               if ($927) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1300)|0),-46,105,30,-1);
               $928 = __THREW__; __THREW__ = 0;
               $929 = $928&1;
               if ($929) {
                $2534 = ___cxa_find_matching_catch()|0;
                $2535 = tempRet0;
                $736 = $2534;
                $737 = $2535;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1288));
                break;
               }
               $735 = (1304);
               $653 = (1304);
               $654 = 7474;
               $930 = $653;
               $652 = $930;
               $931 = $652;
               $651 = $931;
               $932 = $651;
               $650 = $932;
               $933 = $654;
               $934 = $654;
               __THREW__ = 0;
               $935 = (invoke_ii(270,($934|0))|0);
               $936 = __THREW__; __THREW__ = 0;
               $937 = $936&1;
               if ($937) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($930|0),($933|0),($935|0));
               $938 = __THREW__; __THREW__ = 0;
               $939 = $938&1;
               if ($939) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1316)|0),-1,127,80,-1);
               $940 = __THREW__; __THREW__ = 0;
               $941 = $940&1;
               if ($941) {
                $2536 = ___cxa_find_matching_catch()|0;
                $2537 = tempRet0;
                $736 = $2536;
                $737 = $2537;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1304));
                break;
               }
               $735 = (1320);
               $648 = (1320);
               $649 = 7480;
               $942 = $648;
               $647 = $942;
               $943 = $647;
               $646 = $943;
               $944 = $646;
               $645 = $944;
               $945 = $649;
               $946 = $649;
               __THREW__ = 0;
               $947 = (invoke_ii(270,($946|0))|0);
               $948 = __THREW__; __THREW__ = 0;
               $949 = $948&1;
               if ($949) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($942|0),($945|0),($947|0));
               $950 = __THREW__; __THREW__ = 0;
               $951 = $950&1;
               if ($951) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1332)|0),100,-107,-19,-1);
               $952 = __THREW__; __THREW__ = 0;
               $953 = $952&1;
               if ($953) {
                $2538 = ___cxa_find_matching_catch()|0;
                $2539 = tempRet0;
                $736 = $2538;
                $737 = $2539;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1320));
                break;
               }
               $735 = (1336);
               $643 = (1336);
               $644 = 7495;
               $954 = $643;
               $642 = $954;
               $955 = $642;
               $641 = $955;
               $956 = $641;
               $640 = $956;
               $957 = $644;
               $958 = $644;
               __THREW__ = 0;
               $959 = (invoke_ii(270,($958|0))|0);
               $960 = __THREW__; __THREW__ = 0;
               $961 = $960&1;
               if ($961) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($954|0),($957|0),($959|0));
               $962 = __THREW__; __THREW__ = 0;
               $963 = $962&1;
               if ($963) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1348)|0),-1,-8,-36,-1);
               $964 = __THREW__; __THREW__ = 0;
               $965 = $964&1;
               if ($965) {
                $2540 = ___cxa_find_matching_catch()|0;
                $2541 = tempRet0;
                $736 = $2540;
                $737 = $2541;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1336));
                break;
               }
               $735 = (1352);
               $638 = (1352);
               $639 = 7504;
               $966 = $638;
               $637 = $966;
               $967 = $637;
               $636 = $967;
               $968 = $636;
               $635 = $968;
               $969 = $639;
               $970 = $639;
               __THREW__ = 0;
               $971 = (invoke_ii(270,($970|0))|0);
               $972 = __THREW__; __THREW__ = 0;
               $973 = $972&1;
               if ($973) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($966|0),($969|0),($971|0));
               $974 = __THREW__; __THREW__ = 0;
               $975 = $974&1;
               if ($975) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1364)|0),-36,20,60,-1);
               $976 = __THREW__; __THREW__ = 0;
               $977 = $976&1;
               if ($977) {
                $2542 = ___cxa_find_matching_catch()|0;
                $2543 = tempRet0;
                $736 = $2542;
                $737 = $2543;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1352));
                break;
               }
               $735 = (1368);
               $633 = (1368);
               $634 = 7512;
               $978 = $633;
               $632 = $978;
               $979 = $632;
               $631 = $979;
               $980 = $631;
               $630 = $980;
               $981 = $634;
               $982 = $634;
               __THREW__ = 0;
               $983 = (invoke_ii(270,($982|0))|0);
               $984 = __THREW__; __THREW__ = 0;
               $985 = $984&1;
               if ($985) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($978|0),($981|0),($983|0));
               $986 = __THREW__; __THREW__ = 0;
               $987 = $986&1;
               if ($987) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1380)|0),0,-1,-1,-1);
               $988 = __THREW__; __THREW__ = 0;
               $989 = $988&1;
               if ($989) {
                $2544 = ___cxa_find_matching_catch()|0;
                $2545 = tempRet0;
                $736 = $2544;
                $737 = $2545;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1368));
                break;
               }
               $735 = (1384);
               $628 = (1384);
               $629 = 7517;
               $990 = $628;
               $627 = $990;
               $991 = $627;
               $626 = $991;
               $992 = $626;
               $625 = $992;
               $993 = $629;
               $994 = $629;
               __THREW__ = 0;
               $995 = (invoke_ii(270,($994|0))|0);
               $996 = __THREW__; __THREW__ = 0;
               $997 = $996&1;
               if ($997) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($990|0),($993|0),($995|0));
               $998 = __THREW__; __THREW__ = 0;
               $999 = $998&1;
               if ($999) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1396)|0),0,0,-117,-1);
               $1000 = __THREW__; __THREW__ = 0;
               $1001 = $1000&1;
               if ($1001) {
                $2546 = ___cxa_find_matching_catch()|0;
                $2547 = tempRet0;
                $736 = $2546;
                $737 = $2547;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1384));
                break;
               }
               $735 = (1400);
               $623 = (1400);
               $624 = 7526;
               $1002 = $623;
               $622 = $1002;
               $1003 = $622;
               $621 = $1003;
               $1004 = $621;
               $620 = $1004;
               $1005 = $624;
               $1006 = $624;
               __THREW__ = 0;
               $1007 = (invoke_ii(270,($1006|0))|0);
               $1008 = __THREW__; __THREW__ = 0;
               $1009 = $1008&1;
               if ($1009) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1002|0),($1005|0),($1007|0));
               $1010 = __THREW__; __THREW__ = 0;
               $1011 = $1010&1;
               if ($1011) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1412)|0),0,-117,-117,-1);
               $1012 = __THREW__; __THREW__ = 0;
               $1013 = $1012&1;
               if ($1013) {
                $2548 = ___cxa_find_matching_catch()|0;
                $2549 = tempRet0;
                $736 = $2548;
                $737 = $2549;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1400));
                break;
               }
               $735 = (1416);
               $618 = (1416);
               $619 = 7535;
               $1014 = $618;
               $617 = $1014;
               $1015 = $617;
               $616 = $1015;
               $1016 = $616;
               $615 = $1016;
               $1017 = $619;
               $1018 = $619;
               __THREW__ = 0;
               $1019 = (invoke_ii(270,($1018|0))|0);
               $1020 = __THREW__; __THREW__ = 0;
               $1021 = $1020&1;
               if ($1021) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1014|0),($1017|0),($1019|0));
               $1022 = __THREW__; __THREW__ = 0;
               $1023 = $1022&1;
               if ($1023) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1428)|0),-72,-122,11,-1);
               $1024 = __THREW__; __THREW__ = 0;
               $1025 = $1024&1;
               if ($1025) {
                $2550 = ___cxa_find_matching_catch()|0;
                $2551 = tempRet0;
                $736 = $2550;
                $737 = $2551;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1416));
                break;
               }
               $735 = (1432);
               $613 = (1432);
               $614 = 7549;
               $1026 = $613;
               $612 = $1026;
               $1027 = $612;
               $611 = $1027;
               $1028 = $611;
               $610 = $1028;
               $1029 = $614;
               $1030 = $614;
               __THREW__ = 0;
               $1031 = (invoke_ii(270,($1030|0))|0);
               $1032 = __THREW__; __THREW__ = 0;
               $1033 = $1032&1;
               if ($1033) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1026|0),($1029|0),($1031|0));
               $1034 = __THREW__; __THREW__ = 0;
               $1035 = $1034&1;
               if ($1035) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1444)|0),-87,-87,-87,-1);
               $1036 = __THREW__; __THREW__ = 0;
               $1037 = $1036&1;
               if ($1037) {
                $2552 = ___cxa_find_matching_catch()|0;
                $2553 = tempRet0;
                $736 = $2552;
                $737 = $2553;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1432));
                break;
               }
               $735 = (1448);
               $608 = (1448);
               $609 = 7558;
               $1038 = $608;
               $607 = $1038;
               $1039 = $607;
               $606 = $1039;
               $1040 = $606;
               $605 = $1040;
               $1041 = $609;
               $1042 = $609;
               __THREW__ = 0;
               $1043 = (invoke_ii(270,($1042|0))|0);
               $1044 = __THREW__; __THREW__ = 0;
               $1045 = $1044&1;
               if ($1045) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1038|0),($1041|0),($1043|0));
               $1046 = __THREW__; __THREW__ = 0;
               $1047 = $1046&1;
               if ($1047) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1460)|0),0,100,0,-1);
               $1048 = __THREW__; __THREW__ = 0;
               $1049 = $1048&1;
               if ($1049) {
                $2554 = ___cxa_find_matching_catch()|0;
                $2555 = tempRet0;
                $736 = $2554;
                $737 = $2555;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1448));
                break;
               }
               $735 = (1464);
               $603 = (1464);
               $604 = 7568;
               $1050 = $603;
               $602 = $1050;
               $1051 = $602;
               $601 = $1051;
               $1052 = $601;
               $600 = $1052;
               $1053 = $604;
               $1054 = $604;
               __THREW__ = 0;
               $1055 = (invoke_ii(270,($1054|0))|0);
               $1056 = __THREW__; __THREW__ = 0;
               $1057 = $1056&1;
               if ($1057) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1050|0),($1053|0),($1055|0));
               $1058 = __THREW__; __THREW__ = 0;
               $1059 = $1058&1;
               if ($1059) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1476)|0),-87,-87,-87,-1);
               $1060 = __THREW__; __THREW__ = 0;
               $1061 = $1060&1;
               if ($1061) {
                $2556 = ___cxa_find_matching_catch()|0;
                $2557 = tempRet0;
                $736 = $2556;
                $737 = $2557;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1464));
                break;
               }
               $735 = (1480);
               $598 = (1480);
               $599 = 7577;
               $1062 = $598;
               $597 = $1062;
               $1063 = $597;
               $596 = $1063;
               $1064 = $596;
               $595 = $1064;
               $1065 = $599;
               $1066 = $599;
               __THREW__ = 0;
               $1067 = (invoke_ii(270,($1066|0))|0);
               $1068 = __THREW__; __THREW__ = 0;
               $1069 = $1068&1;
               if ($1069) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1062|0),($1065|0),($1067|0));
               $1070 = __THREW__; __THREW__ = 0;
               $1071 = $1070&1;
               if ($1071) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1492)|0),-67,-73,107,-1);
               $1072 = __THREW__; __THREW__ = 0;
               $1073 = $1072&1;
               if ($1073) {
                $2558 = ___cxa_find_matching_catch()|0;
                $2559 = tempRet0;
                $736 = $2558;
                $737 = $2559;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1480));
                break;
               }
               $735 = (1496);
               $593 = (1496);
               $594 = 7587;
               $1074 = $593;
               $592 = $1074;
               $1075 = $592;
               $591 = $1075;
               $1076 = $591;
               $590 = $1076;
               $1077 = $594;
               $1078 = $594;
               __THREW__ = 0;
               $1079 = (invoke_ii(270,($1078|0))|0);
               $1080 = __THREW__; __THREW__ = 0;
               $1081 = $1080&1;
               if ($1081) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1074|0),($1077|0),($1079|0));
               $1082 = __THREW__; __THREW__ = 0;
               $1083 = $1082&1;
               if ($1083) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1508)|0),-117,0,-117,-1);
               $1084 = __THREW__; __THREW__ = 0;
               $1085 = $1084&1;
               if ($1085) {
                $2560 = ___cxa_find_matching_catch()|0;
                $2561 = tempRet0;
                $736 = $2560;
                $737 = $2561;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1496));
                break;
               }
               $735 = (1512);
               $588 = (1512);
               $589 = 7599;
               $1086 = $588;
               $587 = $1086;
               $1087 = $587;
               $586 = $1087;
               $1088 = $586;
               $585 = $1088;
               $1089 = $589;
               $1090 = $589;
               __THREW__ = 0;
               $1091 = (invoke_ii(270,($1090|0))|0);
               $1092 = __THREW__; __THREW__ = 0;
               $1093 = $1092&1;
               if ($1093) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1086|0),($1089|0),($1091|0));
               $1094 = __THREW__; __THREW__ = 0;
               $1095 = $1094&1;
               if ($1095) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1524)|0),85,107,47,-1);
               $1096 = __THREW__; __THREW__ = 0;
               $1097 = $1096&1;
               if ($1097) {
                $2562 = ___cxa_find_matching_catch()|0;
                $2563 = tempRet0;
                $736 = $2562;
                $737 = $2563;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1512));
                break;
               }
               $735 = (1528);
               $583 = (1528);
               $584 = 7614;
               $1098 = $583;
               $582 = $1098;
               $1099 = $582;
               $581 = $1099;
               $1100 = $581;
               $580 = $1100;
               $1101 = $584;
               $1102 = $584;
               __THREW__ = 0;
               $1103 = (invoke_ii(270,($1102|0))|0);
               $1104 = __THREW__; __THREW__ = 0;
               $1105 = $1104&1;
               if ($1105) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1098|0),($1101|0),($1103|0));
               $1106 = __THREW__; __THREW__ = 0;
               $1107 = $1106&1;
               if ($1107) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1540)|0),-1,-116,0,-1);
               $1108 = __THREW__; __THREW__ = 0;
               $1109 = $1108&1;
               if ($1109) {
                $2564 = ___cxa_find_matching_catch()|0;
                $2565 = tempRet0;
                $736 = $2564;
                $737 = $2565;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1528));
                break;
               }
               $735 = (1544);
               $578 = (1544);
               $579 = 7625;
               $1110 = $578;
               $577 = $1110;
               $1111 = $577;
               $576 = $1111;
               $1112 = $576;
               $575 = $1112;
               $1113 = $579;
               $1114 = $579;
               __THREW__ = 0;
               $1115 = (invoke_ii(270,($1114|0))|0);
               $1116 = __THREW__; __THREW__ = 0;
               $1117 = $1116&1;
               if ($1117) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1110|0),($1113|0),($1115|0));
               $1118 = __THREW__; __THREW__ = 0;
               $1119 = $1118&1;
               if ($1119) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1556)|0),-103,50,-52,-1);
               $1120 = __THREW__; __THREW__ = 0;
               $1121 = $1120&1;
               if ($1121) {
                $2566 = ___cxa_find_matching_catch()|0;
                $2567 = tempRet0;
                $736 = $2566;
                $737 = $2567;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1544));
                break;
               }
               $735 = (1560);
               $573 = (1560);
               $574 = 7636;
               $1122 = $573;
               $572 = $1122;
               $1123 = $572;
               $571 = $1123;
               $1124 = $571;
               $570 = $1124;
               $1125 = $574;
               $1126 = $574;
               __THREW__ = 0;
               $1127 = (invoke_ii(270,($1126|0))|0);
               $1128 = __THREW__; __THREW__ = 0;
               $1129 = $1128&1;
               if ($1129) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1122|0),($1125|0),($1127|0));
               $1130 = __THREW__; __THREW__ = 0;
               $1131 = $1130&1;
               if ($1131) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1572)|0),-117,0,0,-1);
               $1132 = __THREW__; __THREW__ = 0;
               $1133 = $1132&1;
               if ($1133) {
                $2568 = ___cxa_find_matching_catch()|0;
                $2569 = tempRet0;
                $736 = $2568;
                $737 = $2569;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1560));
                break;
               }
               $735 = (1576);
               $568 = (1576);
               $569 = 7644;
               $1134 = $568;
               $567 = $1134;
               $1135 = $567;
               $566 = $1135;
               $1136 = $566;
               $565 = $1136;
               $1137 = $569;
               $1138 = $569;
               __THREW__ = 0;
               $1139 = (invoke_ii(270,($1138|0))|0);
               $1140 = __THREW__; __THREW__ = 0;
               $1141 = $1140&1;
               if ($1141) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1134|0),($1137|0),($1139|0));
               $1142 = __THREW__; __THREW__ = 0;
               $1143 = $1142&1;
               if ($1143) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1588)|0),-23,-106,122,-1);
               $1144 = __THREW__; __THREW__ = 0;
               $1145 = $1144&1;
               if ($1145) {
                $2570 = ___cxa_find_matching_catch()|0;
                $2571 = tempRet0;
                $736 = $2570;
                $737 = $2571;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1576));
                break;
               }
               $735 = (1592);
               $563 = (1592);
               $564 = 7655;
               $1146 = $563;
               $562 = $1146;
               $1147 = $562;
               $561 = $1147;
               $1148 = $561;
               $560 = $1148;
               $1149 = $564;
               $1150 = $564;
               __THREW__ = 0;
               $1151 = (invoke_ii(270,($1150|0))|0);
               $1152 = __THREW__; __THREW__ = 0;
               $1153 = $1152&1;
               if ($1153) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1146|0),($1149|0),($1151|0));
               $1154 = __THREW__; __THREW__ = 0;
               $1155 = $1154&1;
               if ($1155) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1604)|0),-113,-68,-113,-1);
               $1156 = __THREW__; __THREW__ = 0;
               $1157 = $1156&1;
               if ($1157) {
                $2572 = ___cxa_find_matching_catch()|0;
                $2573 = tempRet0;
                $736 = $2572;
                $737 = $2573;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1592));
                break;
               }
               $735 = (1608);
               $558 = (1608);
               $559 = 7668;
               $1158 = $558;
               $557 = $1158;
               $1159 = $557;
               $556 = $1159;
               $1160 = $556;
               $555 = $1160;
               $1161 = $559;
               $1162 = $559;
               __THREW__ = 0;
               $1163 = (invoke_ii(270,($1162|0))|0);
               $1164 = __THREW__; __THREW__ = 0;
               $1165 = $1164&1;
               if ($1165) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1158|0),($1161|0),($1163|0));
               $1166 = __THREW__; __THREW__ = 0;
               $1167 = $1166&1;
               if ($1167) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1620)|0),72,61,-117,-1);
               $1168 = __THREW__; __THREW__ = 0;
               $1169 = $1168&1;
               if ($1169) {
                $2574 = ___cxa_find_matching_catch()|0;
                $2575 = tempRet0;
                $736 = $2574;
                $737 = $2575;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1608));
                break;
               }
               $735 = (1624);
               $553 = (1624);
               $554 = 7682;
               $1170 = $553;
               $552 = $1170;
               $1171 = $552;
               $551 = $1171;
               $1172 = $551;
               $550 = $1172;
               $1173 = $554;
               $1174 = $554;
               __THREW__ = 0;
               $1175 = (invoke_ii(270,($1174|0))|0);
               $1176 = __THREW__; __THREW__ = 0;
               $1177 = $1176&1;
               if ($1177) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1170|0),($1173|0),($1175|0));
               $1178 = __THREW__; __THREW__ = 0;
               $1179 = $1178&1;
               if ($1179) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1636)|0),47,79,79,-1);
               $1180 = __THREW__; __THREW__ = 0;
               $1181 = $1180&1;
               if ($1181) {
                $2576 = ___cxa_find_matching_catch()|0;
                $2577 = tempRet0;
                $736 = $2576;
                $737 = $2577;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1624));
                break;
               }
               $735 = (1640);
               $548 = (1640);
               $549 = 7696;
               $1182 = $548;
               $547 = $1182;
               $1183 = $547;
               $546 = $1183;
               $1184 = $546;
               $545 = $1184;
               $1185 = $549;
               $1186 = $549;
               __THREW__ = 0;
               $1187 = (invoke_ii(270,($1186|0))|0);
               $1188 = __THREW__; __THREW__ = 0;
               $1189 = $1188&1;
               if ($1189) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1182|0),($1185|0),($1187|0));
               $1190 = __THREW__; __THREW__ = 0;
               $1191 = $1190&1;
               if ($1191) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1652)|0),0,-50,-47,-1);
               $1192 = __THREW__; __THREW__ = 0;
               $1193 = $1192&1;
               if ($1193) {
                $2578 = ___cxa_find_matching_catch()|0;
                $2579 = tempRet0;
                $736 = $2578;
                $737 = $2579;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1640));
                break;
               }
               $735 = (1656);
               $543 = (1656);
               $544 = 7710;
               $1194 = $543;
               $542 = $1194;
               $1195 = $542;
               $541 = $1195;
               $1196 = $541;
               $540 = $1196;
               $1197 = $544;
               $1198 = $544;
               __THREW__ = 0;
               $1199 = (invoke_ii(270,($1198|0))|0);
               $1200 = __THREW__; __THREW__ = 0;
               $1201 = $1200&1;
               if ($1201) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1194|0),($1197|0),($1199|0));
               $1202 = __THREW__; __THREW__ = 0;
               $1203 = $1202&1;
               if ($1203) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1668)|0),-108,0,-45,-1);
               $1204 = __THREW__; __THREW__ = 0;
               $1205 = $1204&1;
               if ($1205) {
                $2580 = ___cxa_find_matching_catch()|0;
                $2581 = tempRet0;
                $736 = $2580;
                $737 = $2581;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1656));
                break;
               }
               $735 = (1672);
               $538 = (1672);
               $539 = 7721;
               $1206 = $538;
               $537 = $1206;
               $1207 = $537;
               $536 = $1207;
               $1208 = $536;
               $535 = $1208;
               $1209 = $539;
               $1210 = $539;
               __THREW__ = 0;
               $1211 = (invoke_ii(270,($1210|0))|0);
               $1212 = __THREW__; __THREW__ = 0;
               $1213 = $1212&1;
               if ($1213) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1206|0),($1209|0),($1211|0));
               $1214 = __THREW__; __THREW__ = 0;
               $1215 = $1214&1;
               if ($1215) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1684)|0),-1,20,-109,-1);
               $1216 = __THREW__; __THREW__ = 0;
               $1217 = $1216&1;
               if ($1217) {
                $2582 = ___cxa_find_matching_catch()|0;
                $2583 = tempRet0;
                $736 = $2582;
                $737 = $2583;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1672));
                break;
               }
               $735 = (1688);
               $533 = (1688);
               $534 = 7730;
               $1218 = $533;
               $532 = $1218;
               $1219 = $532;
               $531 = $1219;
               $1220 = $531;
               $530 = $1220;
               $1221 = $534;
               $1222 = $534;
               __THREW__ = 0;
               $1223 = (invoke_ii(270,($1222|0))|0);
               $1224 = __THREW__; __THREW__ = 0;
               $1225 = $1224&1;
               if ($1225) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1218|0),($1221|0),($1223|0));
               $1226 = __THREW__; __THREW__ = 0;
               $1227 = $1226&1;
               if ($1227) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1700)|0),0,-65,-1,-1);
               $1228 = __THREW__; __THREW__ = 0;
               $1229 = $1228&1;
               if ($1229) {
                $2584 = ___cxa_find_matching_catch()|0;
                $2585 = tempRet0;
                $736 = $2584;
                $737 = $2585;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1688));
                break;
               }
               $735 = (1704);
               $528 = (1704);
               $529 = 7742;
               $1230 = $528;
               $527 = $1230;
               $1231 = $527;
               $526 = $1231;
               $1232 = $526;
               $525 = $1232;
               $1233 = $529;
               $1234 = $529;
               __THREW__ = 0;
               $1235 = (invoke_ii(270,($1234|0))|0);
               $1236 = __THREW__; __THREW__ = 0;
               $1237 = $1236&1;
               if ($1237) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1230|0),($1233|0),($1235|0));
               $1238 = __THREW__; __THREW__ = 0;
               $1239 = $1238&1;
               if ($1239) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1716)|0),105,105,105,-1);
               $1240 = __THREW__; __THREW__ = 0;
               $1241 = $1240&1;
               if ($1241) {
                $2586 = ___cxa_find_matching_catch()|0;
                $2587 = tempRet0;
                $736 = $2586;
                $737 = $2587;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1704));
                break;
               }
               $735 = (1720);
               $523 = (1720);
               $524 = 7750;
               $1242 = $523;
               $522 = $1242;
               $1243 = $522;
               $521 = $1243;
               $1244 = $521;
               $520 = $1244;
               $1245 = $524;
               $1246 = $524;
               __THREW__ = 0;
               $1247 = (invoke_ii(270,($1246|0))|0);
               $1248 = __THREW__; __THREW__ = 0;
               $1249 = $1248&1;
               if ($1249) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1242|0),($1245|0),($1247|0));
               $1250 = __THREW__; __THREW__ = 0;
               $1251 = $1250&1;
               if ($1251) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1732)|0),105,105,105,-1);
               $1252 = __THREW__; __THREW__ = 0;
               $1253 = $1252&1;
               if ($1253) {
                $2588 = ___cxa_find_matching_catch()|0;
                $2589 = tempRet0;
                $736 = $2588;
                $737 = $2589;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1720));
                break;
               }
               $735 = (1736);
               $518 = (1736);
               $519 = 7758;
               $1254 = $518;
               $517 = $1254;
               $1255 = $517;
               $516 = $1255;
               $1256 = $516;
               $515 = $1256;
               $1257 = $519;
               $1258 = $519;
               __THREW__ = 0;
               $1259 = (invoke_ii(270,($1258|0))|0);
               $1260 = __THREW__; __THREW__ = 0;
               $1261 = $1260&1;
               if ($1261) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1254|0),($1257|0),($1259|0));
               $1262 = __THREW__; __THREW__ = 0;
               $1263 = $1262&1;
               if ($1263) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1748)|0),30,-112,-1,-1);
               $1264 = __THREW__; __THREW__ = 0;
               $1265 = $1264&1;
               if ($1265) {
                $2590 = ___cxa_find_matching_catch()|0;
                $2591 = tempRet0;
                $736 = $2590;
                $737 = $2591;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1736));
                break;
               }
               $735 = (1752);
               $513 = (1752);
               $514 = 7769;
               $1266 = $513;
               $512 = $1266;
               $1267 = $512;
               $511 = $1267;
               $1268 = $511;
               $510 = $1268;
               $1269 = $514;
               $1270 = $514;
               __THREW__ = 0;
               $1271 = (invoke_ii(270,($1270|0))|0);
               $1272 = __THREW__; __THREW__ = 0;
               $1273 = $1272&1;
               if ($1273) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1266|0),($1269|0),($1271|0));
               $1274 = __THREW__; __THREW__ = 0;
               $1275 = $1274&1;
               if ($1275) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1764)|0),-78,34,34,-1);
               $1276 = __THREW__; __THREW__ = 0;
               $1277 = $1276&1;
               if ($1277) {
                $2592 = ___cxa_find_matching_catch()|0;
                $2593 = tempRet0;
                $736 = $2592;
                $737 = $2593;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1752));
                break;
               }
               $735 = (1768);
               $508 = (1768);
               $509 = 7779;
               $1278 = $508;
               $507 = $1278;
               $1279 = $507;
               $506 = $1279;
               $1280 = $506;
               $505 = $1280;
               $1281 = $509;
               $1282 = $509;
               __THREW__ = 0;
               $1283 = (invoke_ii(270,($1282|0))|0);
               $1284 = __THREW__; __THREW__ = 0;
               $1285 = $1284&1;
               if ($1285) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1278|0),($1281|0),($1283|0));
               $1286 = __THREW__; __THREW__ = 0;
               $1287 = $1286&1;
               if ($1287) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1780)|0),-1,-6,-16,-1);
               $1288 = __THREW__; __THREW__ = 0;
               $1289 = $1288&1;
               if ($1289) {
                $2594 = ___cxa_find_matching_catch()|0;
                $2595 = tempRet0;
                $736 = $2594;
                $737 = $2595;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1768));
                break;
               }
               $735 = (1784);
               $503 = (1784);
               $504 = 7791;
               $1290 = $503;
               $502 = $1290;
               $1291 = $502;
               $501 = $1291;
               $1292 = $501;
               $500 = $1292;
               $1293 = $504;
               $1294 = $504;
               __THREW__ = 0;
               $1295 = (invoke_ii(270,($1294|0))|0);
               $1296 = __THREW__; __THREW__ = 0;
               $1297 = $1296&1;
               if ($1297) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1290|0),($1293|0),($1295|0));
               $1298 = __THREW__; __THREW__ = 0;
               $1299 = $1298&1;
               if ($1299) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1796)|0),34,-117,34,-1);
               $1300 = __THREW__; __THREW__ = 0;
               $1301 = $1300&1;
               if ($1301) {
                $2596 = ___cxa_find_matching_catch()|0;
                $2597 = tempRet0;
                $736 = $2596;
                $737 = $2597;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1784));
                break;
               }
               $735 = (1800);
               $498 = (1800);
               $499 = 7803;
               $1302 = $498;
               $497 = $1302;
               $1303 = $497;
               $496 = $1303;
               $1304 = $496;
               $495 = $1304;
               $1305 = $499;
               $1306 = $499;
               __THREW__ = 0;
               $1307 = (invoke_ii(270,($1306|0))|0);
               $1308 = __THREW__; __THREW__ = 0;
               $1309 = $1308&1;
               if ($1309) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1302|0),($1305|0),($1307|0));
               $1310 = __THREW__; __THREW__ = 0;
               $1311 = $1310&1;
               if ($1311) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1812)|0),-1,0,-1,-1);
               $1312 = __THREW__; __THREW__ = 0;
               $1313 = $1312&1;
               if ($1313) {
                $2598 = ___cxa_find_matching_catch()|0;
                $2599 = tempRet0;
                $736 = $2598;
                $737 = $2599;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1800));
                break;
               }
               $735 = (1816);
               $493 = (1816);
               $494 = 7811;
               $1314 = $493;
               $492 = $1314;
               $1315 = $492;
               $491 = $1315;
               $1316 = $491;
               $490 = $1316;
               $1317 = $494;
               $1318 = $494;
               __THREW__ = 0;
               $1319 = (invoke_ii(270,($1318|0))|0);
               $1320 = __THREW__; __THREW__ = 0;
               $1321 = $1320&1;
               if ($1321) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1314|0),($1317|0),($1319|0));
               $1322 = __THREW__; __THREW__ = 0;
               $1323 = $1322&1;
               if ($1323) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1828)|0),-36,-36,-36,-1);
               $1324 = __THREW__; __THREW__ = 0;
               $1325 = $1324&1;
               if ($1325) {
                $2600 = ___cxa_find_matching_catch()|0;
                $2601 = tempRet0;
                $736 = $2600;
                $737 = $2601;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1816));
                break;
               }
               $735 = (1832);
               $488 = (1832);
               $489 = 7821;
               $1326 = $488;
               $487 = $1326;
               $1327 = $487;
               $486 = $1327;
               $1328 = $486;
               $485 = $1328;
               $1329 = $489;
               $1330 = $489;
               __THREW__ = 0;
               $1331 = (invoke_ii(270,($1330|0))|0);
               $1332 = __THREW__; __THREW__ = 0;
               $1333 = $1332&1;
               if ($1333) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1326|0),($1329|0),($1331|0));
               $1334 = __THREW__; __THREW__ = 0;
               $1335 = $1334&1;
               if ($1335) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1844)|0),-8,-8,-1,-1);
               $1336 = __THREW__; __THREW__ = 0;
               $1337 = $1336&1;
               if ($1337) {
                $2602 = ___cxa_find_matching_catch()|0;
                $2603 = tempRet0;
                $736 = $2602;
                $737 = $2603;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1832));
                break;
               }
               $735 = (1848);
               $483 = (1848);
               $484 = 7832;
               $1338 = $483;
               $482 = $1338;
               $1339 = $482;
               $481 = $1339;
               $1340 = $481;
               $480 = $1340;
               $1341 = $484;
               $1342 = $484;
               __THREW__ = 0;
               $1343 = (invoke_ii(270,($1342|0))|0);
               $1344 = __THREW__; __THREW__ = 0;
               $1345 = $1344&1;
               if ($1345) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1338|0),($1341|0),($1343|0));
               $1346 = __THREW__; __THREW__ = 0;
               $1347 = $1346&1;
               if ($1347) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1860)|0),-1,-41,0,-1);
               $1348 = __THREW__; __THREW__ = 0;
               $1349 = $1348&1;
               if ($1349) {
                $2604 = ___cxa_find_matching_catch()|0;
                $2605 = tempRet0;
                $736 = $2604;
                $737 = $2605;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1848));
                break;
               }
               $735 = (1864);
               $478 = (1864);
               $479 = 7837;
               $1350 = $478;
               $477 = $1350;
               $1351 = $477;
               $476 = $1351;
               $1352 = $476;
               $475 = $1352;
               $1353 = $479;
               $1354 = $479;
               __THREW__ = 0;
               $1355 = (invoke_ii(270,($1354|0))|0);
               $1356 = __THREW__; __THREW__ = 0;
               $1357 = $1356&1;
               if ($1357) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1350|0),($1353|0),($1355|0));
               $1358 = __THREW__; __THREW__ = 0;
               $1359 = $1358&1;
               if ($1359) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1876)|0),-38,-91,32,-1);
               $1360 = __THREW__; __THREW__ = 0;
               $1361 = $1360&1;
               if ($1361) {
                $2606 = ___cxa_find_matching_catch()|0;
                $2607 = tempRet0;
                $736 = $2606;
                $737 = $2607;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1864));
                break;
               }
               $735 = (1880);
               $473 = (1880);
               $474 = 7847;
               $1362 = $473;
               $472 = $1362;
               $1363 = $472;
               $471 = $1363;
               $1364 = $471;
               $470 = $1364;
               $1365 = $474;
               $1366 = $474;
               __THREW__ = 0;
               $1367 = (invoke_ii(270,($1366|0))|0);
               $1368 = __THREW__; __THREW__ = 0;
               $1369 = $1368&1;
               if ($1369) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1362|0),($1365|0),($1367|0));
               $1370 = __THREW__; __THREW__ = 0;
               $1371 = $1370&1;
               if ($1371) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1892)|0),-128,-128,-128,-1);
               $1372 = __THREW__; __THREW__ = 0;
               $1373 = $1372&1;
               if ($1373) {
                $2608 = ___cxa_find_matching_catch()|0;
                $2609 = tempRet0;
                $736 = $2608;
                $737 = $2609;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1880));
                break;
               }
               $735 = (1896);
               $468 = (1896);
               $469 = 7852;
               $1374 = $468;
               $467 = $1374;
               $1375 = $467;
               $466 = $1375;
               $1376 = $466;
               $465 = $1376;
               $1377 = $469;
               $1378 = $469;
               __THREW__ = 0;
               $1379 = (invoke_ii(270,($1378|0))|0);
               $1380 = __THREW__; __THREW__ = 0;
               $1381 = $1380&1;
               if ($1381) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1374|0),($1377|0),($1379|0));
               $1382 = __THREW__; __THREW__ = 0;
               $1383 = $1382&1;
               if ($1383) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1908)|0),-128,-128,-128,-1);
               $1384 = __THREW__; __THREW__ = 0;
               $1385 = $1384&1;
               if ($1385) {
                $2610 = ___cxa_find_matching_catch()|0;
                $2611 = tempRet0;
                $736 = $2610;
                $737 = $2611;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1896));
                break;
               }
               $735 = (1912);
               $463 = (1912);
               $464 = 7857;
               $1386 = $463;
               $462 = $1386;
               $1387 = $462;
               $461 = $1387;
               $1388 = $461;
               $460 = $1388;
               $1389 = $464;
               $1390 = $464;
               __THREW__ = 0;
               $1391 = (invoke_ii(270,($1390|0))|0);
               $1392 = __THREW__; __THREW__ = 0;
               $1393 = $1392&1;
               if ($1393) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1386|0),($1389|0),($1391|0));
               $1394 = __THREW__; __THREW__ = 0;
               $1395 = $1394&1;
               if ($1395) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1924)|0),0,-128,0,-1);
               $1396 = __THREW__; __THREW__ = 0;
               $1397 = $1396&1;
               if ($1397) {
                $2612 = ___cxa_find_matching_catch()|0;
                $2613 = tempRet0;
                $736 = $2612;
                $737 = $2613;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1912));
                break;
               }
               $735 = (1928);
               $458 = (1928);
               $459 = 7863;
               $1398 = $458;
               $457 = $1398;
               $1399 = $457;
               $456 = $1399;
               $1400 = $456;
               $455 = $1400;
               $1401 = $459;
               $1402 = $459;
               __THREW__ = 0;
               $1403 = (invoke_ii(270,($1402|0))|0);
               $1404 = __THREW__; __THREW__ = 0;
               $1405 = $1404&1;
               if ($1405) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1398|0),($1401|0),($1403|0));
               $1406 = __THREW__; __THREW__ = 0;
               $1407 = $1406&1;
               if ($1407) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1940)|0),-83,-1,47,-1);
               $1408 = __THREW__; __THREW__ = 0;
               $1409 = $1408&1;
               if ($1409) {
                $2614 = ___cxa_find_matching_catch()|0;
                $2615 = tempRet0;
                $736 = $2614;
                $737 = $2615;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1928));
                break;
               }
               $735 = (1944);
               $453 = (1944);
               $454 = 7875;
               $1410 = $453;
               $452 = $1410;
               $1411 = $452;
               $451 = $1411;
               $1412 = $451;
               $450 = $1412;
               $1413 = $454;
               $1414 = $454;
               __THREW__ = 0;
               $1415 = (invoke_ii(270,($1414|0))|0);
               $1416 = __THREW__; __THREW__ = 0;
               $1417 = $1416&1;
               if ($1417) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1410|0),($1413|0),($1415|0));
               $1418 = __THREW__; __THREW__ = 0;
               $1419 = $1418&1;
               if ($1419) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1956)|0),-16,-1,-16,-1);
               $1420 = __THREW__; __THREW__ = 0;
               $1421 = $1420&1;
               if ($1421) {
                $2616 = ___cxa_find_matching_catch()|0;
                $2617 = tempRet0;
                $736 = $2616;
                $737 = $2617;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1944));
                break;
               }
               $735 = (1960);
               $448 = (1960);
               $449 = 7884;
               $1422 = $448;
               $447 = $1422;
               $1423 = $447;
               $446 = $1423;
               $1424 = $446;
               $445 = $1424;
               $1425 = $449;
               $1426 = $449;
               __THREW__ = 0;
               $1427 = (invoke_ii(270,($1426|0))|0);
               $1428 = __THREW__; __THREW__ = 0;
               $1429 = $1428&1;
               if ($1429) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1422|0),($1425|0),($1427|0));
               $1430 = __THREW__; __THREW__ = 0;
               $1431 = $1430&1;
               if ($1431) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1972)|0),-1,105,-76,-1);
               $1432 = __THREW__; __THREW__ = 0;
               $1433 = $1432&1;
               if ($1433) {
                $2618 = ___cxa_find_matching_catch()|0;
                $2619 = tempRet0;
                $736 = $2618;
                $737 = $2619;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1960));
                break;
               }
               $735 = (1976);
               $443 = (1976);
               $444 = 7892;
               $1434 = $443;
               $442 = $1434;
               $1435 = $442;
               $441 = $1435;
               $1436 = $441;
               $440 = $1436;
               $1437 = $444;
               $1438 = $444;
               __THREW__ = 0;
               $1439 = (invoke_ii(270,($1438|0))|0);
               $1440 = __THREW__; __THREW__ = 0;
               $1441 = $1440&1;
               if ($1441) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1434|0),($1437|0),($1439|0));
               $1442 = __THREW__; __THREW__ = 0;
               $1443 = $1442&1;
               if ($1443) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((1988)|0),-51,92,92,-1);
               $1444 = __THREW__; __THREW__ = 0;
               $1445 = $1444&1;
               if ($1445) {
                $2620 = ___cxa_find_matching_catch()|0;
                $2621 = tempRet0;
                $736 = $2620;
                $737 = $2621;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1976));
                break;
               }
               $735 = (1992);
               $438 = (1992);
               $439 = 7902;
               $1446 = $438;
               $437 = $1446;
               $1447 = $437;
               $436 = $1447;
               $1448 = $436;
               $435 = $1448;
               $1449 = $439;
               $1450 = $439;
               __THREW__ = 0;
               $1451 = (invoke_ii(270,($1450|0))|0);
               $1452 = __THREW__; __THREW__ = 0;
               $1453 = $1452&1;
               if ($1453) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1446|0),($1449|0),($1451|0));
               $1454 = __THREW__; __THREW__ = 0;
               $1455 = $1454&1;
               if ($1455) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2004)|0),75,0,-126,-1);
               $1456 = __THREW__; __THREW__ = 0;
               $1457 = $1456&1;
               if ($1457) {
                $2622 = ___cxa_find_matching_catch()|0;
                $2623 = tempRet0;
                $736 = $2622;
                $737 = $2623;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((1992));
                break;
               }
               $735 = (2008);
               $433 = (2008);
               $434 = 7909;
               $1458 = $433;
               $432 = $1458;
               $1459 = $432;
               $431 = $1459;
               $1460 = $431;
               $430 = $1460;
               $1461 = $434;
               $1462 = $434;
               __THREW__ = 0;
               $1463 = (invoke_ii(270,($1462|0))|0);
               $1464 = __THREW__; __THREW__ = 0;
               $1465 = $1464&1;
               if ($1465) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1458|0),($1461|0),($1463|0));
               $1466 = __THREW__; __THREW__ = 0;
               $1467 = $1466&1;
               if ($1467) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2020)|0),-1,-1,-16,-1);
               $1468 = __THREW__; __THREW__ = 0;
               $1469 = $1468&1;
               if ($1469) {
                $2624 = ___cxa_find_matching_catch()|0;
                $2625 = tempRet0;
                $736 = $2624;
                $737 = $2625;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2008));
                break;
               }
               $735 = (2024);
               $428 = (2024);
               $429 = 7915;
               $1470 = $428;
               $427 = $1470;
               $1471 = $427;
               $426 = $1471;
               $1472 = $426;
               $425 = $1472;
               $1473 = $429;
               $1474 = $429;
               __THREW__ = 0;
               $1475 = (invoke_ii(270,($1474|0))|0);
               $1476 = __THREW__; __THREW__ = 0;
               $1477 = $1476&1;
               if ($1477) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1470|0),($1473|0),($1475|0));
               $1478 = __THREW__; __THREW__ = 0;
               $1479 = $1478&1;
               if ($1479) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2036)|0),-16,-26,-116,-1);
               $1480 = __THREW__; __THREW__ = 0;
               $1481 = $1480&1;
               if ($1481) {
                $2626 = ___cxa_find_matching_catch()|0;
                $2627 = tempRet0;
                $736 = $2626;
                $737 = $2627;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2024));
                break;
               }
               $735 = (2040);
               $423 = (2040);
               $424 = 7921;
               $1482 = $423;
               $422 = $1482;
               $1483 = $422;
               $421 = $1483;
               $1484 = $421;
               $420 = $1484;
               $1485 = $424;
               $1486 = $424;
               __THREW__ = 0;
               $1487 = (invoke_ii(270,($1486|0))|0);
               $1488 = __THREW__; __THREW__ = 0;
               $1489 = $1488&1;
               if ($1489) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1482|0),($1485|0),($1487|0));
               $1490 = __THREW__; __THREW__ = 0;
               $1491 = $1490&1;
               if ($1491) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2052)|0),-26,-26,-6,-1);
               $1492 = __THREW__; __THREW__ = 0;
               $1493 = $1492&1;
               if ($1493) {
                $2628 = ___cxa_find_matching_catch()|0;
                $2629 = tempRet0;
                $736 = $2628;
                $737 = $2629;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2040));
                break;
               }
               $735 = (2056);
               $418 = (2056);
               $419 = 7930;
               $1494 = $418;
               $417 = $1494;
               $1495 = $417;
               $416 = $1495;
               $1496 = $416;
               $415 = $1496;
               $1497 = $419;
               $1498 = $419;
               __THREW__ = 0;
               $1499 = (invoke_ii(270,($1498|0))|0);
               $1500 = __THREW__; __THREW__ = 0;
               $1501 = $1500&1;
               if ($1501) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1494|0),($1497|0),($1499|0));
               $1502 = __THREW__; __THREW__ = 0;
               $1503 = $1502&1;
               if ($1503) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2068)|0),-1,-16,-11,-1);
               $1504 = __THREW__; __THREW__ = 0;
               $1505 = $1504&1;
               if ($1505) {
                $2630 = ___cxa_find_matching_catch()|0;
                $2631 = tempRet0;
                $736 = $2630;
                $737 = $2631;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2056));
                break;
               }
               $735 = (2072);
               $413 = (2072);
               $414 = 7944;
               $1506 = $413;
               $412 = $1506;
               $1507 = $412;
               $411 = $1507;
               $1508 = $411;
               $410 = $1508;
               $1509 = $414;
               $1510 = $414;
               __THREW__ = 0;
               $1511 = (invoke_ii(270,($1510|0))|0);
               $1512 = __THREW__; __THREW__ = 0;
               $1513 = $1512&1;
               if ($1513) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1506|0),($1509|0),($1511|0));
               $1514 = __THREW__; __THREW__ = 0;
               $1515 = $1514&1;
               if ($1515) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2084)|0),124,-4,0,-1);
               $1516 = __THREW__; __THREW__ = 0;
               $1517 = $1516&1;
               if ($1517) {
                $2632 = ___cxa_find_matching_catch()|0;
                $2633 = tempRet0;
                $736 = $2632;
                $737 = $2633;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2072));
                break;
               }
               $735 = (2088);
               $408 = (2088);
               $409 = 7954;
               $1518 = $408;
               $407 = $1518;
               $1519 = $407;
               $406 = $1519;
               $1520 = $406;
               $405 = $1520;
               $1521 = $409;
               $1522 = $409;
               __THREW__ = 0;
               $1523 = (invoke_ii(270,($1522|0))|0);
               $1524 = __THREW__; __THREW__ = 0;
               $1525 = $1524&1;
               if ($1525) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1518|0),($1521|0),($1523|0));
               $1526 = __THREW__; __THREW__ = 0;
               $1527 = $1526&1;
               if ($1527) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2100)|0),-1,-6,-51,-1);
               $1528 = __THREW__; __THREW__ = 0;
               $1529 = $1528&1;
               if ($1529) {
                $2634 = ___cxa_find_matching_catch()|0;
                $2635 = tempRet0;
                $736 = $2634;
                $737 = $2635;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2088));
                break;
               }
               $735 = (2104);
               $403 = (2104);
               $404 = 7967;
               $1530 = $403;
               $402 = $1530;
               $1531 = $402;
               $401 = $1531;
               $1532 = $401;
               $400 = $1532;
               $1533 = $404;
               $1534 = $404;
               __THREW__ = 0;
               $1535 = (invoke_ii(270,($1534|0))|0);
               $1536 = __THREW__; __THREW__ = 0;
               $1537 = $1536&1;
               if ($1537) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1530|0),($1533|0),($1535|0));
               $1538 = __THREW__; __THREW__ = 0;
               $1539 = $1538&1;
               if ($1539) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2116)|0),-83,-40,-26,-1);
               $1540 = __THREW__; __THREW__ = 0;
               $1541 = $1540&1;
               if ($1541) {
                $2636 = ___cxa_find_matching_catch()|0;
                $2637 = tempRet0;
                $736 = $2636;
                $737 = $2637;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2104));
                break;
               }
               $735 = (2120);
               $398 = (2120);
               $399 = 7977;
               $1542 = $398;
               $397 = $1542;
               $1543 = $397;
               $396 = $1543;
               $1544 = $396;
               $395 = $1544;
               $1545 = $399;
               $1546 = $399;
               __THREW__ = 0;
               $1547 = (invoke_ii(270,($1546|0))|0);
               $1548 = __THREW__; __THREW__ = 0;
               $1549 = $1548&1;
               if ($1549) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1542|0),($1545|0),($1547|0));
               $1550 = __THREW__; __THREW__ = 0;
               $1551 = $1550&1;
               if ($1551) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2132)|0),-16,-128,-128,-1);
               $1552 = __THREW__; __THREW__ = 0;
               $1553 = $1552&1;
               if ($1553) {
                $2638 = ___cxa_find_matching_catch()|0;
                $2639 = tempRet0;
                $736 = $2638;
                $737 = $2639;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2120));
                break;
               }
               $735 = (2136);
               $393 = (2136);
               $394 = 7988;
               $1554 = $393;
               $392 = $1554;
               $1555 = $392;
               $391 = $1555;
               $1556 = $391;
               $390 = $1556;
               $1557 = $394;
               $1558 = $394;
               __THREW__ = 0;
               $1559 = (invoke_ii(270,($1558|0))|0);
               $1560 = __THREW__; __THREW__ = 0;
               $1561 = $1560&1;
               if ($1561) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1554|0),($1557|0),($1559|0));
               $1562 = __THREW__; __THREW__ = 0;
               $1563 = $1562&1;
               if ($1563) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2148)|0),-32,-1,-1,-1);
               $1564 = __THREW__; __THREW__ = 0;
               $1565 = $1564&1;
               if ($1565) {
                $2640 = ___cxa_find_matching_catch()|0;
                $2641 = tempRet0;
                $736 = $2640;
                $737 = $2641;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2136));
                break;
               }
               $735 = (2152);
               $388 = (2152);
               $389 = 7998;
               $1566 = $388;
               $387 = $1566;
               $1567 = $387;
               $386 = $1567;
               $1568 = $386;
               $385 = $1568;
               $1569 = $389;
               $1570 = $389;
               __THREW__ = 0;
               $1571 = (invoke_ii(270,($1570|0))|0);
               $1572 = __THREW__; __THREW__ = 0;
               $1573 = $1572&1;
               if ($1573) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1566|0),($1569|0),($1571|0));
               $1574 = __THREW__; __THREW__ = 0;
               $1575 = $1574&1;
               if ($1575) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2164)|0),-6,-6,-46,-1);
               $1576 = __THREW__; __THREW__ = 0;
               $1577 = $1576&1;
               if ($1577) {
                $2642 = ___cxa_find_matching_catch()|0;
                $2643 = tempRet0;
                $736 = $2642;
                $737 = $2643;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2152));
                break;
               }
               $735 = (2168);
               $383 = (2168);
               $384 = 8019;
               $1578 = $383;
               $382 = $1578;
               $1579 = $382;
               $381 = $1579;
               $1580 = $381;
               $380 = $1580;
               $1581 = $384;
               $1582 = $384;
               __THREW__ = 0;
               $1583 = (invoke_ii(270,($1582|0))|0);
               $1584 = __THREW__; __THREW__ = 0;
               $1585 = $1584&1;
               if ($1585) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1578|0),($1581|0),($1583|0));
               $1586 = __THREW__; __THREW__ = 0;
               $1587 = $1586&1;
               if ($1587) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2180)|0),-45,-45,-45,-1);
               $1588 = __THREW__; __THREW__ = 0;
               $1589 = $1588&1;
               if ($1589) {
                $2644 = ___cxa_find_matching_catch()|0;
                $2645 = tempRet0;
                $736 = $2644;
                $737 = $2645;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2168));
                break;
               }
               $735 = (2184);
               $378 = (2184);
               $379 = 8029;
               $1590 = $378;
               $377 = $1590;
               $1591 = $377;
               $376 = $1591;
               $1592 = $376;
               $375 = $1592;
               $1593 = $379;
               $1594 = $379;
               __THREW__ = 0;
               $1595 = (invoke_ii(270,($1594|0))|0);
               $1596 = __THREW__; __THREW__ = 0;
               $1597 = $1596&1;
               if ($1597) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1590|0),($1593|0),($1595|0));
               $1598 = __THREW__; __THREW__ = 0;
               $1599 = $1598&1;
               if ($1599) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2196)|0),-112,-18,-112,-1);
               $1600 = __THREW__; __THREW__ = 0;
               $1601 = $1600&1;
               if ($1601) {
                $2646 = ___cxa_find_matching_catch()|0;
                $2647 = tempRet0;
                $736 = $2646;
                $737 = $2647;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2184));
                break;
               }
               $735 = (2200);
               $373 = (2200);
               $374 = 8040;
               $1602 = $373;
               $372 = $1602;
               $1603 = $372;
               $371 = $1603;
               $1604 = $371;
               $370 = $1604;
               $1605 = $374;
               $1606 = $374;
               __THREW__ = 0;
               $1607 = (invoke_ii(270,($1606|0))|0);
               $1608 = __THREW__; __THREW__ = 0;
               $1609 = $1608&1;
               if ($1609) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1602|0),($1605|0),($1607|0));
               $1610 = __THREW__; __THREW__ = 0;
               $1611 = $1610&1;
               if ($1611) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2212)|0),-45,-45,-45,-1);
               $1612 = __THREW__; __THREW__ = 0;
               $1613 = $1612&1;
               if ($1613) {
                $2648 = ___cxa_find_matching_catch()|0;
                $2649 = tempRet0;
                $736 = $2648;
                $737 = $2649;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2200));
                break;
               }
               $735 = (2216);
               $368 = (2216);
               $369 = 8050;
               $1614 = $368;
               $367 = $1614;
               $1615 = $367;
               $366 = $1615;
               $1616 = $366;
               $365 = $1616;
               $1617 = $369;
               $1618 = $369;
               __THREW__ = 0;
               $1619 = (invoke_ii(270,($1618|0))|0);
               $1620 = __THREW__; __THREW__ = 0;
               $1621 = $1620&1;
               if ($1621) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1614|0),($1617|0),($1619|0));
               $1622 = __THREW__; __THREW__ = 0;
               $1623 = $1622&1;
               if ($1623) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2228)|0),-1,-74,-63,-1);
               $1624 = __THREW__; __THREW__ = 0;
               $1625 = $1624&1;
               if ($1625) {
                $2650 = ___cxa_find_matching_catch()|0;
                $2651 = tempRet0;
                $736 = $2650;
                $737 = $2651;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2216));
                break;
               }
               $735 = (2232);
               $363 = (2232);
               $364 = 8060;
               $1626 = $363;
               $362 = $1626;
               $1627 = $362;
               $361 = $1627;
               $1628 = $361;
               $360 = $1628;
               $1629 = $364;
               $1630 = $364;
               __THREW__ = 0;
               $1631 = (invoke_ii(270,($1630|0))|0);
               $1632 = __THREW__; __THREW__ = 0;
               $1633 = $1632&1;
               if ($1633) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1626|0),($1629|0),($1631|0));
               $1634 = __THREW__; __THREW__ = 0;
               $1635 = $1634&1;
               if ($1635) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2244)|0),-1,-96,122,-1);
               $1636 = __THREW__; __THREW__ = 0;
               $1637 = $1636&1;
               if ($1637) {
                $2652 = ___cxa_find_matching_catch()|0;
                $2653 = tempRet0;
                $736 = $2652;
                $737 = $2653;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2232));
                break;
               }
               $735 = (2248);
               $358 = (2248);
               $359 = 8072;
               $1638 = $358;
               $357 = $1638;
               $1639 = $357;
               $356 = $1639;
               $1640 = $356;
               $355 = $1640;
               $1641 = $359;
               $1642 = $359;
               __THREW__ = 0;
               $1643 = (invoke_ii(270,($1642|0))|0);
               $1644 = __THREW__; __THREW__ = 0;
               $1645 = $1644&1;
               if ($1645) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1638|0),($1641|0),($1643|0));
               $1646 = __THREW__; __THREW__ = 0;
               $1647 = $1646&1;
               if ($1647) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2260)|0),32,-78,-86,-1);
               $1648 = __THREW__; __THREW__ = 0;
               $1649 = $1648&1;
               if ($1649) {
                $2654 = ___cxa_find_matching_catch()|0;
                $2655 = tempRet0;
                $736 = $2654;
                $737 = $2655;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2248));
                break;
               }
               $735 = (2264);
               $353 = (2264);
               $354 = 8086;
               $1650 = $353;
               $352 = $1650;
               $1651 = $352;
               $351 = $1651;
               $1652 = $351;
               $350 = $1652;
               $1653 = $354;
               $1654 = $354;
               __THREW__ = 0;
               $1655 = (invoke_ii(270,($1654|0))|0);
               $1656 = __THREW__; __THREW__ = 0;
               $1657 = $1656&1;
               if ($1657) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1650|0),($1653|0),($1655|0));
               $1658 = __THREW__; __THREW__ = 0;
               $1659 = $1658&1;
               if ($1659) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2276)|0),-121,-50,-6,-1);
               $1660 = __THREW__; __THREW__ = 0;
               $1661 = $1660&1;
               if ($1661) {
                $2656 = ___cxa_find_matching_catch()|0;
                $2657 = tempRet0;
                $736 = $2656;
                $737 = $2657;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2264));
                break;
               }
               $735 = (2280);
               $348 = (2280);
               $349 = 8099;
               $1662 = $348;
               $347 = $1662;
               $1663 = $347;
               $346 = $1663;
               $1664 = $346;
               $345 = $1664;
               $1665 = $349;
               $1666 = $349;
               __THREW__ = 0;
               $1667 = (invoke_ii(270,($1666|0))|0);
               $1668 = __THREW__; __THREW__ = 0;
               $1669 = $1668&1;
               if ($1669) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1662|0),($1665|0),($1667|0));
               $1670 = __THREW__; __THREW__ = 0;
               $1671 = $1670&1;
               if ($1671) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2292)|0),119,-120,-103,-1);
               $1672 = __THREW__; __THREW__ = 0;
               $1673 = $1672&1;
               if ($1673) {
                $2658 = ___cxa_find_matching_catch()|0;
                $2659 = tempRet0;
                $736 = $2658;
                $737 = $2659;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2280));
                break;
               }
               $735 = (2296);
               $343 = (2296);
               $344 = 8114;
               $1674 = $343;
               $342 = $1674;
               $1675 = $342;
               $341 = $1675;
               $1676 = $341;
               $340 = $1676;
               $1677 = $344;
               $1678 = $344;
               __THREW__ = 0;
               $1679 = (invoke_ii(270,($1678|0))|0);
               $1680 = __THREW__; __THREW__ = 0;
               $1681 = $1680&1;
               if ($1681) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1674|0),($1677|0),($1679|0));
               $1682 = __THREW__; __THREW__ = 0;
               $1683 = $1682&1;
               if ($1683) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2308)|0),119,-120,-103,-1);
               $1684 = __THREW__; __THREW__ = 0;
               $1685 = $1684&1;
               if ($1685) {
                $2660 = ___cxa_find_matching_catch()|0;
                $2661 = tempRet0;
                $736 = $2660;
                $737 = $2661;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2296));
                break;
               }
               $735 = (2312);
               $338 = (2312);
               $339 = 8129;
               $1686 = $338;
               $337 = $1686;
               $1687 = $337;
               $336 = $1687;
               $1688 = $336;
               $335 = $1688;
               $1689 = $339;
               $1690 = $339;
               __THREW__ = 0;
               $1691 = (invoke_ii(270,($1690|0))|0);
               $1692 = __THREW__; __THREW__ = 0;
               $1693 = $1692&1;
               if ($1693) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1686|0),($1689|0),($1691|0));
               $1694 = __THREW__; __THREW__ = 0;
               $1695 = $1694&1;
               if ($1695) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2324)|0),-80,-60,-34,-1);
               $1696 = __THREW__; __THREW__ = 0;
               $1697 = $1696&1;
               if ($1697) {
                $2662 = ___cxa_find_matching_catch()|0;
                $2663 = tempRet0;
                $736 = $2662;
                $737 = $2663;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2312));
                break;
               }
               $735 = (2328);
               $333 = (2328);
               $334 = 8144;
               $1698 = $333;
               $332 = $1698;
               $1699 = $332;
               $331 = $1699;
               $1700 = $331;
               $330 = $1700;
               $1701 = $334;
               $1702 = $334;
               __THREW__ = 0;
               $1703 = (invoke_ii(270,($1702|0))|0);
               $1704 = __THREW__; __THREW__ = 0;
               $1705 = $1704&1;
               if ($1705) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1698|0),($1701|0),($1703|0));
               $1706 = __THREW__; __THREW__ = 0;
               $1707 = $1706&1;
               if ($1707) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2340)|0),-1,-1,-32,-1);
               $1708 = __THREW__; __THREW__ = 0;
               $1709 = $1708&1;
               if ($1709) {
                $2664 = ___cxa_find_matching_catch()|0;
                $2665 = tempRet0;
                $736 = $2664;
                $737 = $2665;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2328));
                break;
               }
               $735 = (2344);
               $328 = (2344);
               $329 = 8156;
               $1710 = $328;
               $327 = $1710;
               $1711 = $327;
               $326 = $1711;
               $1712 = $326;
               $325 = $1712;
               $1713 = $329;
               $1714 = $329;
               __THREW__ = 0;
               $1715 = (invoke_ii(270,($1714|0))|0);
               $1716 = __THREW__; __THREW__ = 0;
               $1717 = $1716&1;
               if ($1717) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1710|0),($1713|0),($1715|0));
               $1718 = __THREW__; __THREW__ = 0;
               $1719 = $1718&1;
               if ($1719) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2356)|0),0,-1,0,-1);
               $1720 = __THREW__; __THREW__ = 0;
               $1721 = $1720&1;
               if ($1721) {
                $2666 = ___cxa_find_matching_catch()|0;
                $2667 = tempRet0;
                $736 = $2666;
                $737 = $2667;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2344));
                break;
               }
               $735 = (2360);
               $323 = (2360);
               $324 = 8161;
               $1722 = $323;
               $322 = $1722;
               $1723 = $322;
               $321 = $1723;
               $1724 = $321;
               $320 = $1724;
               $1725 = $324;
               $1726 = $324;
               __THREW__ = 0;
               $1727 = (invoke_ii(270,($1726|0))|0);
               $1728 = __THREW__; __THREW__ = 0;
               $1729 = $1728&1;
               if ($1729) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1722|0),($1725|0),($1727|0));
               $1730 = __THREW__; __THREW__ = 0;
               $1731 = $1730&1;
               if ($1731) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2372)|0),50,-51,50,-1);
               $1732 = __THREW__; __THREW__ = 0;
               $1733 = $1732&1;
               if ($1733) {
                $2668 = ___cxa_find_matching_catch()|0;
                $2669 = tempRet0;
                $736 = $2668;
                $737 = $2669;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2360));
                break;
               }
               $735 = (2376);
               $318 = (2376);
               $319 = 8171;
               $1734 = $318;
               $317 = $1734;
               $1735 = $317;
               $316 = $1735;
               $1736 = $316;
               $315 = $1736;
               $1737 = $319;
               $1738 = $319;
               __THREW__ = 0;
               $1739 = (invoke_ii(270,($1738|0))|0);
               $1740 = __THREW__; __THREW__ = 0;
               $1741 = $1740&1;
               if ($1741) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1734|0),($1737|0),($1739|0));
               $1742 = __THREW__; __THREW__ = 0;
               $1743 = $1742&1;
               if ($1743) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2388)|0),-6,-16,-26,-1);
               $1744 = __THREW__; __THREW__ = 0;
               $1745 = $1744&1;
               if ($1745) {
                $2670 = ___cxa_find_matching_catch()|0;
                $2671 = tempRet0;
                $736 = $2670;
                $737 = $2671;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2376));
                break;
               }
               $735 = (2392);
               $313 = (2392);
               $314 = 8177;
               $1746 = $313;
               $312 = $1746;
               $1747 = $312;
               $311 = $1747;
               $1748 = $311;
               $310 = $1748;
               $1749 = $314;
               $1750 = $314;
               __THREW__ = 0;
               $1751 = (invoke_ii(270,($1750|0))|0);
               $1752 = __THREW__; __THREW__ = 0;
               $1753 = $1752&1;
               if ($1753) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1746|0),($1749|0),($1751|0));
               $1754 = __THREW__; __THREW__ = 0;
               $1755 = $1754&1;
               if ($1755) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2404)|0),-1,0,-1,-1);
               $1756 = __THREW__; __THREW__ = 0;
               $1757 = $1756&1;
               if ($1757) {
                $2672 = ___cxa_find_matching_catch()|0;
                $2673 = tempRet0;
                $736 = $2672;
                $737 = $2673;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2392));
                break;
               }
               $735 = (2408);
               $308 = (2408);
               $309 = 8185;
               $1758 = $308;
               $307 = $1758;
               $1759 = $307;
               $306 = $1759;
               $1760 = $306;
               $305 = $1760;
               $1761 = $309;
               $1762 = $309;
               __THREW__ = 0;
               $1763 = (invoke_ii(270,($1762|0))|0);
               $1764 = __THREW__; __THREW__ = 0;
               $1765 = $1764&1;
               if ($1765) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1758|0),($1761|0),($1763|0));
               $1766 = __THREW__; __THREW__ = 0;
               $1767 = $1766&1;
               if ($1767) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2420)|0),-128,0,0,-1);
               $1768 = __THREW__; __THREW__ = 0;
               $1769 = $1768&1;
               if ($1769) {
                $2674 = ___cxa_find_matching_catch()|0;
                $2675 = tempRet0;
                $736 = $2674;
                $737 = $2675;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2408));
                break;
               }
               $735 = (2424);
               $303 = (2424);
               $304 = 8192;
               $1770 = $303;
               $302 = $1770;
               $1771 = $302;
               $301 = $1771;
               $1772 = $301;
               $300 = $1772;
               $1773 = $304;
               $1774 = $304;
               __THREW__ = 0;
               $1775 = (invoke_ii(270,($1774|0))|0);
               $1776 = __THREW__; __THREW__ = 0;
               $1777 = $1776&1;
               if ($1777) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1770|0),($1773|0),($1775|0));
               $1778 = __THREW__; __THREW__ = 0;
               $1779 = $1778&1;
               if ($1779) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2436)|0),102,-51,-86,-1);
               $1780 = __THREW__; __THREW__ = 0;
               $1781 = $1780&1;
               if ($1781) {
                $2676 = ___cxa_find_matching_catch()|0;
                $2677 = tempRet0;
                $736 = $2676;
                $737 = $2677;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2424));
                break;
               }
               $735 = (2440);
               $298 = (2440);
               $299 = 8209;
               $1782 = $298;
               $297 = $1782;
               $1783 = $297;
               $296 = $1783;
               $1784 = $296;
               $295 = $1784;
               $1785 = $299;
               $1786 = $299;
               __THREW__ = 0;
               $1787 = (invoke_ii(270,($1786|0))|0);
               $1788 = __THREW__; __THREW__ = 0;
               $1789 = $1788&1;
               if ($1789) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1782|0),($1785|0),($1787|0));
               $1790 = __THREW__; __THREW__ = 0;
               $1791 = $1790&1;
               if ($1791) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2452)|0),0,0,-51,-1);
               $1792 = __THREW__; __THREW__ = 0;
               $1793 = $1792&1;
               if ($1793) {
                $2678 = ___cxa_find_matching_catch()|0;
                $2679 = tempRet0;
                $736 = $2678;
                $737 = $2679;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2440));
                break;
               }
               $735 = (2456);
               $293 = (2456);
               $294 = 8220;
               $1794 = $293;
               $292 = $1794;
               $1795 = $292;
               $291 = $1795;
               $1796 = $291;
               $290 = $1796;
               $1797 = $294;
               $1798 = $294;
               __THREW__ = 0;
               $1799 = (invoke_ii(270,($1798|0))|0);
               $1800 = __THREW__; __THREW__ = 0;
               $1801 = $1800&1;
               if ($1801) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1794|0),($1797|0),($1799|0));
               $1802 = __THREW__; __THREW__ = 0;
               $1803 = $1802&1;
               if ($1803) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2468)|0),-70,85,-45,-1);
               $1804 = __THREW__; __THREW__ = 0;
               $1805 = $1804&1;
               if ($1805) {
                $2680 = ___cxa_find_matching_catch()|0;
                $2681 = tempRet0;
                $736 = $2680;
                $737 = $2681;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2456));
                break;
               }
               $735 = (2472);
               $288 = (2472);
               $289 = 8233;
               $1806 = $288;
               $287 = $1806;
               $1807 = $287;
               $286 = $1807;
               $1808 = $286;
               $285 = $1808;
               $1809 = $289;
               $1810 = $289;
               __THREW__ = 0;
               $1811 = (invoke_ii(270,($1810|0))|0);
               $1812 = __THREW__; __THREW__ = 0;
               $1813 = $1812&1;
               if ($1813) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1806|0),($1809|0),($1811|0));
               $1814 = __THREW__; __THREW__ = 0;
               $1815 = $1814&1;
               if ($1815) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2484)|0),-109,112,-37,-1);
               $1816 = __THREW__; __THREW__ = 0;
               $1817 = $1816&1;
               if ($1817) {
                $2682 = ___cxa_find_matching_catch()|0;
                $2683 = tempRet0;
                $736 = $2682;
                $737 = $2683;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2472));
                break;
               }
               $735 = (2488);
               $283 = (2488);
               $284 = 8246;
               $1818 = $283;
               $282 = $1818;
               $1819 = $282;
               $281 = $1819;
               $1820 = $281;
               $280 = $1820;
               $1821 = $284;
               $1822 = $284;
               __THREW__ = 0;
               $1823 = (invoke_ii(270,($1822|0))|0);
               $1824 = __THREW__; __THREW__ = 0;
               $1825 = $1824&1;
               if ($1825) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1818|0),($1821|0),($1823|0));
               $1826 = __THREW__; __THREW__ = 0;
               $1827 = $1826&1;
               if ($1827) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2500)|0),60,-77,113,-1);
               $1828 = __THREW__; __THREW__ = 0;
               $1829 = $1828&1;
               if ($1829) {
                $2684 = ___cxa_find_matching_catch()|0;
                $2685 = tempRet0;
                $736 = $2684;
                $737 = $2685;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2488));
                break;
               }
               $735 = (2504);
               $278 = (2504);
               $279 = 8261;
               $1830 = $278;
               $277 = $1830;
               $1831 = $277;
               $276 = $1831;
               $1832 = $276;
               $275 = $1832;
               $1833 = $279;
               $1834 = $279;
               __THREW__ = 0;
               $1835 = (invoke_ii(270,($1834|0))|0);
               $1836 = __THREW__; __THREW__ = 0;
               $1837 = $1836&1;
               if ($1837) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1830|0),($1833|0),($1835|0));
               $1838 = __THREW__; __THREW__ = 0;
               $1839 = $1838&1;
               if ($1839) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2516)|0),123,104,-18,-1);
               $1840 = __THREW__; __THREW__ = 0;
               $1841 = $1840&1;
               if ($1841) {
                $2686 = ___cxa_find_matching_catch()|0;
                $2687 = tempRet0;
                $736 = $2686;
                $737 = $2687;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2504));
                break;
               }
               $735 = (2520);
               $273 = (2520);
               $274 = 8277;
               $1842 = $273;
               $272 = $1842;
               $1843 = $272;
               $271 = $1843;
               $1844 = $271;
               $270 = $1844;
               $1845 = $274;
               $1846 = $274;
               __THREW__ = 0;
               $1847 = (invoke_ii(270,($1846|0))|0);
               $1848 = __THREW__; __THREW__ = 0;
               $1849 = $1848&1;
               if ($1849) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1842|0),($1845|0),($1847|0));
               $1850 = __THREW__; __THREW__ = 0;
               $1851 = $1850&1;
               if ($1851) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2532)|0),0,-6,-102,-1);
               $1852 = __THREW__; __THREW__ = 0;
               $1853 = $1852&1;
               if ($1853) {
                $2688 = ___cxa_find_matching_catch()|0;
                $2689 = tempRet0;
                $736 = $2688;
                $737 = $2689;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2520));
                break;
               }
               $735 = (2536);
               $268 = (2536);
               $269 = 8295;
               $1854 = $268;
               $267 = $1854;
               $1855 = $267;
               $266 = $1855;
               $1856 = $266;
               $265 = $1856;
               $1857 = $269;
               $1858 = $269;
               __THREW__ = 0;
               $1859 = (invoke_ii(270,($1858|0))|0);
               $1860 = __THREW__; __THREW__ = 0;
               $1861 = $1860&1;
               if ($1861) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1854|0),($1857|0),($1859|0));
               $1862 = __THREW__; __THREW__ = 0;
               $1863 = $1862&1;
               if ($1863) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2548)|0),72,-47,-52,-1);
               $1864 = __THREW__; __THREW__ = 0;
               $1865 = $1864&1;
               if ($1865) {
                $2690 = ___cxa_find_matching_catch()|0;
                $2691 = tempRet0;
                $736 = $2690;
                $737 = $2691;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2536));
                break;
               }
               $735 = (2552);
               $263 = (2552);
               $264 = 8311;
               $1866 = $263;
               $262 = $1866;
               $1867 = $262;
               $261 = $1867;
               $1868 = $261;
               $260 = $1868;
               $1869 = $264;
               $1870 = $264;
               __THREW__ = 0;
               $1871 = (invoke_ii(270,($1870|0))|0);
               $1872 = __THREW__; __THREW__ = 0;
               $1873 = $1872&1;
               if ($1873) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1866|0),($1869|0),($1871|0));
               $1874 = __THREW__; __THREW__ = 0;
               $1875 = $1874&1;
               if ($1875) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2564)|0),-57,21,-123,-1);
               $1876 = __THREW__; __THREW__ = 0;
               $1877 = $1876&1;
               if ($1877) {
                $2692 = ___cxa_find_matching_catch()|0;
                $2693 = tempRet0;
                $736 = $2692;
                $737 = $2693;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2552));
                break;
               }
               $735 = (2568);
               $258 = (2568);
               $259 = 8327;
               $1878 = $258;
               $257 = $1878;
               $1879 = $257;
               $256 = $1879;
               $1880 = $256;
               $255 = $1880;
               $1881 = $259;
               $1882 = $259;
               __THREW__ = 0;
               $1883 = (invoke_ii(270,($1882|0))|0);
               $1884 = __THREW__; __THREW__ = 0;
               $1885 = $1884&1;
               if ($1885) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1878|0),($1881|0),($1883|0));
               $1886 = __THREW__; __THREW__ = 0;
               $1887 = $1886&1;
               if ($1887) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2580)|0),25,25,112,-1);
               $1888 = __THREW__; __THREW__ = 0;
               $1889 = $1888&1;
               if ($1889) {
                $2694 = ___cxa_find_matching_catch()|0;
                $2695 = tempRet0;
                $736 = $2694;
                $737 = $2695;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2568));
                break;
               }
               $735 = (2584);
               $253 = (2584);
               $254 = 8340;
               $1890 = $253;
               $252 = $1890;
               $1891 = $252;
               $251 = $1891;
               $1892 = $251;
               $250 = $1892;
               $1893 = $254;
               $1894 = $254;
               __THREW__ = 0;
               $1895 = (invoke_ii(270,($1894|0))|0);
               $1896 = __THREW__; __THREW__ = 0;
               $1897 = $1896&1;
               if ($1897) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1890|0),($1893|0),($1895|0));
               $1898 = __THREW__; __THREW__ = 0;
               $1899 = $1898&1;
               if ($1899) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2596)|0),-11,-1,-6,-1);
               $1900 = __THREW__; __THREW__ = 0;
               $1901 = $1900&1;
               if ($1901) {
                $2696 = ___cxa_find_matching_catch()|0;
                $2697 = tempRet0;
                $736 = $2696;
                $737 = $2697;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2584));
                break;
               }
               $735 = (2600);
               $248 = (2600);
               $249 = 8350;
               $1902 = $248;
               $247 = $1902;
               $1903 = $247;
               $246 = $1903;
               $1904 = $246;
               $245 = $1904;
               $1905 = $249;
               $1906 = $249;
               __THREW__ = 0;
               $1907 = (invoke_ii(270,($1906|0))|0);
               $1908 = __THREW__; __THREW__ = 0;
               $1909 = $1908&1;
               if ($1909) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1902|0),($1905|0),($1907|0));
               $1910 = __THREW__; __THREW__ = 0;
               $1911 = $1910&1;
               if ($1911) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2612)|0),-1,-28,-31,-1);
               $1912 = __THREW__; __THREW__ = 0;
               $1913 = $1912&1;
               if ($1913) {
                $2698 = ___cxa_find_matching_catch()|0;
                $2699 = tempRet0;
                $736 = $2698;
                $737 = $2699;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2600));
                break;
               }
               $735 = (2616);
               $243 = (2616);
               $244 = 8360;
               $1914 = $243;
               $242 = $1914;
               $1915 = $242;
               $241 = $1915;
               $1916 = $241;
               $240 = $1916;
               $1917 = $244;
               $1918 = $244;
               __THREW__ = 0;
               $1919 = (invoke_ii(270,($1918|0))|0);
               $1920 = __THREW__; __THREW__ = 0;
               $1921 = $1920&1;
               if ($1921) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1914|0),($1917|0),($1919|0));
               $1922 = __THREW__; __THREW__ = 0;
               $1923 = $1922&1;
               if ($1923) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2628)|0),-1,-28,-75,-1);
               $1924 = __THREW__; __THREW__ = 0;
               $1925 = $1924&1;
               if ($1925) {
                $2700 = ___cxa_find_matching_catch()|0;
                $2701 = tempRet0;
                $736 = $2700;
                $737 = $2701;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2616));
                break;
               }
               $735 = (2632);
               $238 = (2632);
               $239 = 8369;
               $1926 = $238;
               $237 = $1926;
               $1927 = $237;
               $236 = $1927;
               $1928 = $236;
               $235 = $1928;
               $1929 = $239;
               $1930 = $239;
               __THREW__ = 0;
               $1931 = (invoke_ii(270,($1930|0))|0);
               $1932 = __THREW__; __THREW__ = 0;
               $1933 = $1932&1;
               if ($1933) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1926|0),($1929|0),($1931|0));
               $1934 = __THREW__; __THREW__ = 0;
               $1935 = $1934&1;
               if ($1935) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2644)|0),-1,-34,-83,-1);
               $1936 = __THREW__; __THREW__ = 0;
               $1937 = $1936&1;
               if ($1937) {
                $2702 = ___cxa_find_matching_catch()|0;
                $2703 = tempRet0;
                $736 = $2702;
                $737 = $2703;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2632));
                break;
               }
               $735 = (2648);
               $233 = (2648);
               $234 = 8381;
               $1938 = $233;
               $232 = $1938;
               $1939 = $232;
               $231 = $1939;
               $1940 = $231;
               $230 = $1940;
               $1941 = $234;
               $1942 = $234;
               __THREW__ = 0;
               $1943 = (invoke_ii(270,($1942|0))|0);
               $1944 = __THREW__; __THREW__ = 0;
               $1945 = $1944&1;
               if ($1945) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1938|0),($1941|0),($1943|0));
               $1946 = __THREW__; __THREW__ = 0;
               $1947 = $1946&1;
               if ($1947) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2660)|0),0,0,-128,-1);
               $1948 = __THREW__; __THREW__ = 0;
               $1949 = $1948&1;
               if ($1949) {
                $2704 = ___cxa_find_matching_catch()|0;
                $2705 = tempRet0;
                $736 = $2704;
                $737 = $2705;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2648));
                break;
               }
               $735 = (2664);
               $228 = (2664);
               $229 = 8386;
               $1950 = $228;
               $227 = $1950;
               $1951 = $227;
               $226 = $1951;
               $1952 = $226;
               $225 = $1952;
               $1953 = $229;
               $1954 = $229;
               __THREW__ = 0;
               $1955 = (invoke_ii(270,($1954|0))|0);
               $1956 = __THREW__; __THREW__ = 0;
               $1957 = $1956&1;
               if ($1957) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1950|0),($1953|0),($1955|0));
               $1958 = __THREW__; __THREW__ = 0;
               $1959 = $1958&1;
               if ($1959) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2676)|0),-3,-11,-26,-1);
               $1960 = __THREW__; __THREW__ = 0;
               $1961 = $1960&1;
               if ($1961) {
                $2706 = ___cxa_find_matching_catch()|0;
                $2707 = tempRet0;
                $736 = $2706;
                $737 = $2707;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2664));
                break;
               }
               $735 = (2680);
               $223 = (2680);
               $224 = 8394;
               $1962 = $223;
               $222 = $1962;
               $1963 = $222;
               $221 = $1963;
               $1964 = $221;
               $220 = $1964;
               $1965 = $224;
               $1966 = $224;
               __THREW__ = 0;
               $1967 = (invoke_ii(270,($1966|0))|0);
               $1968 = __THREW__; __THREW__ = 0;
               $1969 = $1968&1;
               if ($1969) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1962|0),($1965|0),($1967|0));
               $1970 = __THREW__; __THREW__ = 0;
               $1971 = $1970&1;
               if ($1971) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2692)|0),-128,-128,0,-1);
               $1972 = __THREW__; __THREW__ = 0;
               $1973 = $1972&1;
               if ($1973) {
                $2708 = ___cxa_find_matching_catch()|0;
                $2709 = tempRet0;
                $736 = $2708;
                $737 = $2709;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2680));
                break;
               }
               $735 = (2696);
               $218 = (2696);
               $219 = 8400;
               $1974 = $218;
               $217 = $1974;
               $1975 = $217;
               $216 = $1975;
               $1976 = $216;
               $215 = $1976;
               $1977 = $219;
               $1978 = $219;
               __THREW__ = 0;
               $1979 = (invoke_ii(270,($1978|0))|0);
               $1980 = __THREW__; __THREW__ = 0;
               $1981 = $1980&1;
               if ($1981) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1974|0),($1977|0),($1979|0));
               $1982 = __THREW__; __THREW__ = 0;
               $1983 = $1982&1;
               if ($1983) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2708)|0),107,-114,35,-1);
               $1984 = __THREW__; __THREW__ = 0;
               $1985 = $1984&1;
               if ($1985) {
                $2710 = ___cxa_find_matching_catch()|0;
                $2711 = tempRet0;
                $736 = $2710;
                $737 = $2711;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2696));
                break;
               }
               $735 = (2712);
               $213 = (2712);
               $214 = 8410;
               $1986 = $213;
               $212 = $1986;
               $1987 = $212;
               $211 = $1987;
               $1988 = $211;
               $210 = $1988;
               $1989 = $214;
               $1990 = $214;
               __THREW__ = 0;
               $1991 = (invoke_ii(270,($1990|0))|0);
               $1992 = __THREW__; __THREW__ = 0;
               $1993 = $1992&1;
               if ($1993) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1986|0),($1989|0),($1991|0));
               $1994 = __THREW__; __THREW__ = 0;
               $1995 = $1994&1;
               if ($1995) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2724)|0),-1,-91,0,-1);
               $1996 = __THREW__; __THREW__ = 0;
               $1997 = $1996&1;
               if ($1997) {
                $2712 = ___cxa_find_matching_catch()|0;
                $2713 = tempRet0;
                $736 = $2712;
                $737 = $2713;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2712));
                break;
               }
               $735 = (2728);
               $208 = (2728);
               $209 = 8417;
               $1998 = $208;
               $207 = $1998;
               $1999 = $207;
               $206 = $1999;
               $2000 = $206;
               $205 = $2000;
               $2001 = $209;
               $2002 = $209;
               __THREW__ = 0;
               $2003 = (invoke_ii(270,($2002|0))|0);
               $2004 = __THREW__; __THREW__ = 0;
               $2005 = $2004&1;
               if ($2005) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($1998|0),($2001|0),($2003|0));
               $2006 = __THREW__; __THREW__ = 0;
               $2007 = $2006&1;
               if ($2007) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2740)|0),-1,69,0,-1);
               $2008 = __THREW__; __THREW__ = 0;
               $2009 = $2008&1;
               if ($2009) {
                $2714 = ___cxa_find_matching_catch()|0;
                $2715 = tempRet0;
                $736 = $2714;
                $737 = $2715;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2728));
                break;
               }
               $735 = (2744);
               $203 = (2744);
               $204 = 8427;
               $2010 = $203;
               $202 = $2010;
               $2011 = $202;
               $201 = $2011;
               $2012 = $201;
               $200 = $2012;
               $2013 = $204;
               $2014 = $204;
               __THREW__ = 0;
               $2015 = (invoke_ii(270,($2014|0))|0);
               $2016 = __THREW__; __THREW__ = 0;
               $2017 = $2016&1;
               if ($2017) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2010|0),($2013|0),($2015|0));
               $2018 = __THREW__; __THREW__ = 0;
               $2019 = $2018&1;
               if ($2019) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2756)|0),-38,112,-42,-1);
               $2020 = __THREW__; __THREW__ = 0;
               $2021 = $2020&1;
               if ($2021) {
                $2716 = ___cxa_find_matching_catch()|0;
                $2717 = tempRet0;
                $736 = $2716;
                $737 = $2717;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2744));
                break;
               }
               $735 = (2760);
               $198 = (2760);
               $199 = 8434;
               $2022 = $198;
               $197 = $2022;
               $2023 = $197;
               $196 = $2023;
               $2024 = $196;
               $195 = $2024;
               $2025 = $199;
               $2026 = $199;
               __THREW__ = 0;
               $2027 = (invoke_ii(270,($2026|0))|0);
               $2028 = __THREW__; __THREW__ = 0;
               $2029 = $2028&1;
               if ($2029) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2022|0),($2025|0),($2027|0));
               $2030 = __THREW__; __THREW__ = 0;
               $2031 = $2030&1;
               if ($2031) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2772)|0),-18,-24,-86,-1);
               $2032 = __THREW__; __THREW__ = 0;
               $2033 = $2032&1;
               if ($2033) {
                $2718 = ___cxa_find_matching_catch()|0;
                $2719 = tempRet0;
                $736 = $2718;
                $737 = $2719;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2760));
                break;
               }
               $735 = (2776);
               $193 = (2776);
               $194 = 8448;
               $2034 = $193;
               $192 = $2034;
               $2035 = $192;
               $191 = $2035;
               $2036 = $191;
               $190 = $2036;
               $2037 = $194;
               $2038 = $194;
               __THREW__ = 0;
               $2039 = (invoke_ii(270,($2038|0))|0);
               $2040 = __THREW__; __THREW__ = 0;
               $2041 = $2040&1;
               if ($2041) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2034|0),($2037|0),($2039|0));
               $2042 = __THREW__; __THREW__ = 0;
               $2043 = $2042&1;
               if ($2043) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2788)|0),-104,-5,-104,-1);
               $2044 = __THREW__; __THREW__ = 0;
               $2045 = $2044&1;
               if ($2045) {
                $2720 = ___cxa_find_matching_catch()|0;
                $2721 = tempRet0;
                $736 = $2720;
                $737 = $2721;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2776));
                break;
               }
               $735 = (2792);
               $188 = (2792);
               $189 = 8458;
               $2046 = $188;
               $187 = $2046;
               $2047 = $187;
               $186 = $2047;
               $2048 = $186;
               $185 = $2048;
               $2049 = $189;
               $2050 = $189;
               __THREW__ = 0;
               $2051 = (invoke_ii(270,($2050|0))|0);
               $2052 = __THREW__; __THREW__ = 0;
               $2053 = $2052&1;
               if ($2053) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2046|0),($2049|0),($2051|0));
               $2054 = __THREW__; __THREW__ = 0;
               $2055 = $2054&1;
               if ($2055) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2804)|0),-81,-18,-18,-1);
               $2056 = __THREW__; __THREW__ = 0;
               $2057 = $2056&1;
               if ($2057) {
                $2722 = ___cxa_find_matching_catch()|0;
                $2723 = tempRet0;
                $736 = $2722;
                $737 = $2723;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2792));
                break;
               }
               $735 = (2808);
               $183 = (2808);
               $184 = 8472;
               $2058 = $183;
               $182 = $2058;
               $2059 = $182;
               $181 = $2059;
               $2060 = $181;
               $180 = $2060;
               $2061 = $184;
               $2062 = $184;
               __THREW__ = 0;
               $2063 = (invoke_ii(270,($2062|0))|0);
               $2064 = __THREW__; __THREW__ = 0;
               $2065 = $2064&1;
               if ($2065) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2058|0),($2061|0),($2063|0));
               $2066 = __THREW__; __THREW__ = 0;
               $2067 = $2066&1;
               if ($2067) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2820)|0),-37,112,-109,-1);
               $2068 = __THREW__; __THREW__ = 0;
               $2069 = $2068&1;
               if ($2069) {
                $2724 = ___cxa_find_matching_catch()|0;
                $2725 = tempRet0;
                $736 = $2724;
                $737 = $2725;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2808));
                break;
               }
               $735 = (2824);
               $178 = (2824);
               $179 = 8486;
               $2070 = $178;
               $177 = $2070;
               $2071 = $177;
               $176 = $2071;
               $2072 = $176;
               $175 = $2072;
               $2073 = $179;
               $2074 = $179;
               __THREW__ = 0;
               $2075 = (invoke_ii(270,($2074|0))|0);
               $2076 = __THREW__; __THREW__ = 0;
               $2077 = $2076&1;
               if ($2077) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2070|0),($2073|0),($2075|0));
               $2078 = __THREW__; __THREW__ = 0;
               $2079 = $2078&1;
               if ($2079) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2836)|0),-1,-17,-43,-1);
               $2080 = __THREW__; __THREW__ = 0;
               $2081 = $2080&1;
               if ($2081) {
                $2726 = ___cxa_find_matching_catch()|0;
                $2727 = tempRet0;
                $736 = $2726;
                $737 = $2727;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2824));
                break;
               }
               $735 = (2840);
               $173 = (2840);
               $174 = 8497;
               $2082 = $173;
               $172 = $2082;
               $2083 = $172;
               $171 = $2083;
               $2084 = $171;
               $170 = $2084;
               $2085 = $174;
               $2086 = $174;
               __THREW__ = 0;
               $2087 = (invoke_ii(270,($2086|0))|0);
               $2088 = __THREW__; __THREW__ = 0;
               $2089 = $2088&1;
               if ($2089) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2082|0),($2085|0),($2087|0));
               $2090 = __THREW__; __THREW__ = 0;
               $2091 = $2090&1;
               if ($2091) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2852)|0),-1,-38,-71,-1);
               $2092 = __THREW__; __THREW__ = 0;
               $2093 = $2092&1;
               if ($2093) {
                $2728 = ___cxa_find_matching_catch()|0;
                $2729 = tempRet0;
                $736 = $2728;
                $737 = $2729;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2840));
                break;
               }
               $735 = (2856);
               $168 = (2856);
               $169 = 8507;
               $2094 = $168;
               $167 = $2094;
               $2095 = $167;
               $166 = $2095;
               $2096 = $166;
               $165 = $2096;
               $2097 = $169;
               $2098 = $169;
               __THREW__ = 0;
               $2099 = (invoke_ii(270,($2098|0))|0);
               $2100 = __THREW__; __THREW__ = 0;
               $2101 = $2100&1;
               if ($2101) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2094|0),($2097|0),($2099|0));
               $2102 = __THREW__; __THREW__ = 0;
               $2103 = $2102&1;
               if ($2103) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2868)|0),-51,-123,63,-1);
               $2104 = __THREW__; __THREW__ = 0;
               $2105 = $2104&1;
               if ($2105) {
                $2730 = ___cxa_find_matching_catch()|0;
                $2731 = tempRet0;
                $736 = $2730;
                $737 = $2731;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2856));
                break;
               }
               $735 = (2872);
               $163 = (2872);
               $164 = 8512;
               $2106 = $163;
               $162 = $2106;
               $2107 = $162;
               $161 = $2107;
               $2108 = $161;
               $160 = $2108;
               $2109 = $164;
               $2110 = $164;
               __THREW__ = 0;
               $2111 = (invoke_ii(270,($2110|0))|0);
               $2112 = __THREW__; __THREW__ = 0;
               $2113 = $2112&1;
               if ($2113) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2106|0),($2109|0),($2111|0));
               $2114 = __THREW__; __THREW__ = 0;
               $2115 = $2114&1;
               if ($2115) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2884)|0),-1,-64,-53,-1);
               $2116 = __THREW__; __THREW__ = 0;
               $2117 = $2116&1;
               if ($2117) {
                $2732 = ___cxa_find_matching_catch()|0;
                $2733 = tempRet0;
                $736 = $2732;
                $737 = $2733;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2872));
                break;
               }
               $735 = (2888);
               $158 = (2888);
               $159 = 8517;
               $2118 = $158;
               $157 = $2118;
               $2119 = $157;
               $156 = $2119;
               $2120 = $156;
               $155 = $2120;
               $2121 = $159;
               $2122 = $159;
               __THREW__ = 0;
               $2123 = (invoke_ii(270,($2122|0))|0);
               $2124 = __THREW__; __THREW__ = 0;
               $2125 = $2124&1;
               if ($2125) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2118|0),($2121|0),($2123|0));
               $2126 = __THREW__; __THREW__ = 0;
               $2127 = $2126&1;
               if ($2127) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2900)|0),-35,-96,-35,-1);
               $2128 = __THREW__; __THREW__ = 0;
               $2129 = $2128&1;
               if ($2129) {
                $2734 = ___cxa_find_matching_catch()|0;
                $2735 = tempRet0;
                $736 = $2734;
                $737 = $2735;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2888));
                break;
               }
               $735 = (2904);
               $153 = (2904);
               $154 = 8522;
               $2130 = $153;
               $152 = $2130;
               $2131 = $152;
               $151 = $2131;
               $2132 = $151;
               $150 = $2132;
               $2133 = $154;
               $2134 = $154;
               __THREW__ = 0;
               $2135 = (invoke_ii(270,($2134|0))|0);
               $2136 = __THREW__; __THREW__ = 0;
               $2137 = $2136&1;
               if ($2137) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2130|0),($2133|0),($2135|0));
               $2138 = __THREW__; __THREW__ = 0;
               $2139 = $2138&1;
               if ($2139) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2916)|0),-80,-32,-26,-1);
               $2140 = __THREW__; __THREW__ = 0;
               $2141 = $2140&1;
               if ($2141) {
                $2736 = ___cxa_find_matching_catch()|0;
                $2737 = tempRet0;
                $736 = $2736;
                $737 = $2737;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2904));
                break;
               }
               $735 = (2920);
               $148 = (2920);
               $149 = 8533;
               $2142 = $148;
               $147 = $2142;
               $2143 = $147;
               $146 = $2143;
               $2144 = $146;
               $145 = $2144;
               $2145 = $149;
               $2146 = $149;
               __THREW__ = 0;
               $2147 = (invoke_ii(270,($2146|0))|0);
               $2148 = __THREW__; __THREW__ = 0;
               $2149 = $2148&1;
               if ($2149) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2142|0),($2145|0),($2147|0));
               $2150 = __THREW__; __THREW__ = 0;
               $2151 = $2150&1;
               if ($2151) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2932)|0),-128,0,-128,-1);
               $2152 = __THREW__; __THREW__ = 0;
               $2153 = $2152&1;
               if ($2153) {
                $2738 = ___cxa_find_matching_catch()|0;
                $2739 = tempRet0;
                $736 = $2738;
                $737 = $2739;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2920));
                break;
               }
               $735 = (2936);
               $143 = (2936);
               $144 = 8540;
               $2154 = $143;
               $142 = $2154;
               $2155 = $142;
               $141 = $2155;
               $2156 = $141;
               $140 = $2156;
               $2157 = $144;
               $2158 = $144;
               __THREW__ = 0;
               $2159 = (invoke_ii(270,($2158|0))|0);
               $2160 = __THREW__; __THREW__ = 0;
               $2161 = $2160&1;
               if ($2161) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2154|0),($2157|0),($2159|0));
               $2162 = __THREW__; __THREW__ = 0;
               $2163 = $2162&1;
               if ($2163) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2948)|0),-1,0,0,-1);
               $2164 = __THREW__; __THREW__ = 0;
               $2165 = $2164&1;
               if ($2165) {
                $2740 = ___cxa_find_matching_catch()|0;
                $2741 = tempRet0;
                $736 = $2740;
                $737 = $2741;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2936));
                break;
               }
               $735 = (2952);
               $138 = (2952);
               $139 = 8544;
               $2166 = $138;
               $137 = $2166;
               $2167 = $137;
               $136 = $2167;
               $2168 = $136;
               $135 = $2168;
               $2169 = $139;
               $2170 = $139;
               __THREW__ = 0;
               $2171 = (invoke_ii(270,($2170|0))|0);
               $2172 = __THREW__; __THREW__ = 0;
               $2173 = $2172&1;
               if ($2173) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2166|0),($2169|0),($2171|0));
               $2174 = __THREW__; __THREW__ = 0;
               $2175 = $2174&1;
               if ($2175) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2964)|0),-68,-113,-113,-1);
               $2176 = __THREW__; __THREW__ = 0;
               $2177 = $2176&1;
               if ($2177) {
                $2742 = ___cxa_find_matching_catch()|0;
                $2743 = tempRet0;
                $736 = $2742;
                $737 = $2743;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2952));
                break;
               }
               $735 = (2968);
               $133 = (2968);
               $134 = 8554;
               $2178 = $133;
               $132 = $2178;
               $2179 = $132;
               $131 = $2179;
               $2180 = $131;
               $130 = $2180;
               $2181 = $134;
               $2182 = $134;
               __THREW__ = 0;
               $2183 = (invoke_ii(270,($2182|0))|0);
               $2184 = __THREW__; __THREW__ = 0;
               $2185 = $2184&1;
               if ($2185) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2178|0),($2181|0),($2183|0));
               $2186 = __THREW__; __THREW__ = 0;
               $2187 = $2186&1;
               if ($2187) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2980)|0),65,105,-31,-1);
               $2188 = __THREW__; __THREW__ = 0;
               $2189 = $2188&1;
               if ($2189) {
                $2744 = ___cxa_find_matching_catch()|0;
                $2745 = tempRet0;
                $736 = $2744;
                $737 = $2745;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2968));
                break;
               }
               $735 = (2984);
               $128 = (2984);
               $129 = 8564;
               $2190 = $128;
               $127 = $2190;
               $2191 = $127;
               $126 = $2191;
               $2192 = $126;
               $125 = $2192;
               $2193 = $129;
               $2194 = $129;
               __THREW__ = 0;
               $2195 = (invoke_ii(270,($2194|0))|0);
               $2196 = __THREW__; __THREW__ = 0;
               $2197 = $2196&1;
               if ($2197) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2190|0),($2193|0),($2195|0));
               $2198 = __THREW__; __THREW__ = 0;
               $2199 = $2198&1;
               if ($2199) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((2996)|0),-117,69,19,-1);
               $2200 = __THREW__; __THREW__ = 0;
               $2201 = $2200&1;
               if ($2201) {
                $2746 = ___cxa_find_matching_catch()|0;
                $2747 = tempRet0;
                $736 = $2746;
                $737 = $2747;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((2984));
                break;
               }
               $735 = (3000);
               $123 = (3000);
               $124 = 8576;
               $2202 = $123;
               $122 = $2202;
               $2203 = $122;
               $121 = $2203;
               $2204 = $121;
               $120 = $2204;
               $2205 = $124;
               $2206 = $124;
               __THREW__ = 0;
               $2207 = (invoke_ii(270,($2206|0))|0);
               $2208 = __THREW__; __THREW__ = 0;
               $2209 = $2208&1;
               if ($2209) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2202|0),($2205|0),($2207|0));
               $2210 = __THREW__; __THREW__ = 0;
               $2211 = $2210&1;
               if ($2211) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3012)|0),-6,-128,114,-1);
               $2212 = __THREW__; __THREW__ = 0;
               $2213 = $2212&1;
               if ($2213) {
                $2748 = ___cxa_find_matching_catch()|0;
                $2749 = tempRet0;
                $736 = $2748;
                $737 = $2749;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3000));
                break;
               }
               $735 = (3016);
               $118 = (3016);
               $119 = 8583;
               $2214 = $118;
               $117 = $2214;
               $2215 = $117;
               $116 = $2215;
               $2216 = $116;
               $115 = $2216;
               $2217 = $119;
               $2218 = $119;
               __THREW__ = 0;
               $2219 = (invoke_ii(270,($2218|0))|0);
               $2220 = __THREW__; __THREW__ = 0;
               $2221 = $2220&1;
               if ($2221) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2214|0),($2217|0),($2219|0));
               $2222 = __THREW__; __THREW__ = 0;
               $2223 = $2222&1;
               if ($2223) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3028)|0),-12,-92,96,-1);
               $2224 = __THREW__; __THREW__ = 0;
               $2225 = $2224&1;
               if ($2225) {
                $2750 = ___cxa_find_matching_catch()|0;
                $2751 = tempRet0;
                $736 = $2750;
                $737 = $2751;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3016));
                break;
               }
               $735 = (3032);
               $113 = (3032);
               $114 = 8594;
               $2226 = $113;
               $112 = $2226;
               $2227 = $112;
               $111 = $2227;
               $2228 = $111;
               $110 = $2228;
               $2229 = $114;
               $2230 = $114;
               __THREW__ = 0;
               $2231 = (invoke_ii(270,($2230|0))|0);
               $2232 = __THREW__; __THREW__ = 0;
               $2233 = $2232&1;
               if ($2233) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2226|0),($2229|0),($2231|0));
               $2234 = __THREW__; __THREW__ = 0;
               $2235 = $2234&1;
               if ($2235) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3044)|0),46,-117,87,-1);
               $2236 = __THREW__; __THREW__ = 0;
               $2237 = $2236&1;
               if ($2237) {
                $2752 = ___cxa_find_matching_catch()|0;
                $2753 = tempRet0;
                $736 = $2752;
                $737 = $2753;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3032));
                break;
               }
               $735 = (3048);
               $108 = (3048);
               $109 = 8603;
               $2238 = $108;
               $107 = $2238;
               $2239 = $107;
               $106 = $2239;
               $2240 = $106;
               $105 = $2240;
               $2241 = $109;
               $2242 = $109;
               __THREW__ = 0;
               $2243 = (invoke_ii(270,($2242|0))|0);
               $2244 = __THREW__; __THREW__ = 0;
               $2245 = $2244&1;
               if ($2245) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2238|0),($2241|0),($2243|0));
               $2246 = __THREW__; __THREW__ = 0;
               $2247 = $2246&1;
               if ($2247) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3060)|0),-1,-11,-18,-1);
               $2248 = __THREW__; __THREW__ = 0;
               $2249 = $2248&1;
               if ($2249) {
                $2754 = ___cxa_find_matching_catch()|0;
                $2755 = tempRet0;
                $736 = $2754;
                $737 = $2755;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3048));
                break;
               }
               $735 = (3064);
               $103 = (3064);
               $104 = 8612;
               $2250 = $103;
               $102 = $2250;
               $2251 = $102;
               $101 = $2251;
               $2252 = $101;
               $100 = $2252;
               $2253 = $104;
               $2254 = $104;
               __THREW__ = 0;
               $2255 = (invoke_ii(270,($2254|0))|0);
               $2256 = __THREW__; __THREW__ = 0;
               $2257 = $2256&1;
               if ($2257) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2250|0),($2253|0),($2255|0));
               $2258 = __THREW__; __THREW__ = 0;
               $2259 = $2258&1;
               if ($2259) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3076)|0),-96,82,45,-1);
               $2260 = __THREW__; __THREW__ = 0;
               $2261 = $2260&1;
               if ($2261) {
                $2756 = ___cxa_find_matching_catch()|0;
                $2757 = tempRet0;
                $736 = $2756;
                $737 = $2757;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3064));
                break;
               }
               $735 = (3080);
               $98 = (3080);
               $99 = 8619;
               $2262 = $98;
               $97 = $2262;
               $2263 = $97;
               $96 = $2263;
               $2264 = $96;
               $95 = $2264;
               $2265 = $99;
               $2266 = $99;
               __THREW__ = 0;
               $2267 = (invoke_ii(270,($2266|0))|0);
               $2268 = __THREW__; __THREW__ = 0;
               $2269 = $2268&1;
               if ($2269) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2262|0),($2265|0),($2267|0));
               $2270 = __THREW__; __THREW__ = 0;
               $2271 = $2270&1;
               if ($2271) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3092)|0),-64,-64,-64,-1);
               $2272 = __THREW__; __THREW__ = 0;
               $2273 = $2272&1;
               if ($2273) {
                $2758 = ___cxa_find_matching_catch()|0;
                $2759 = tempRet0;
                $736 = $2758;
                $737 = $2759;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3080));
                break;
               }
               $735 = (3096);
               $93 = (3096);
               $94 = 8626;
               $2274 = $93;
               $92 = $2274;
               $2275 = $92;
               $91 = $2275;
               $2276 = $91;
               $90 = $2276;
               $2277 = $94;
               $2278 = $94;
               __THREW__ = 0;
               $2279 = (invoke_ii(270,($2278|0))|0);
               $2280 = __THREW__; __THREW__ = 0;
               $2281 = $2280&1;
               if ($2281) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2274|0),($2277|0),($2279|0));
               $2282 = __THREW__; __THREW__ = 0;
               $2283 = $2282&1;
               if ($2283) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3108)|0),-121,-50,-21,-1);
               $2284 = __THREW__; __THREW__ = 0;
               $2285 = $2284&1;
               if ($2285) {
                $2760 = ___cxa_find_matching_catch()|0;
                $2761 = tempRet0;
                $736 = $2760;
                $737 = $2761;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3096));
                break;
               }
               $735 = (3112);
               $88 = (3112);
               $89 = 8634;
               $2286 = $88;
               $87 = $2286;
               $2287 = $87;
               $86 = $2287;
               $2288 = $86;
               $85 = $2288;
               $2289 = $89;
               $2290 = $89;
               __THREW__ = 0;
               $2291 = (invoke_ii(270,($2290|0))|0);
               $2292 = __THREW__; __THREW__ = 0;
               $2293 = $2292&1;
               if ($2293) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2286|0),($2289|0),($2291|0));
               $2294 = __THREW__; __THREW__ = 0;
               $2295 = $2294&1;
               if ($2295) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3124)|0),106,90,-51,-1);
               $2296 = __THREW__; __THREW__ = 0;
               $2297 = $2296&1;
               if ($2297) {
                $2762 = ___cxa_find_matching_catch()|0;
                $2763 = tempRet0;
                $736 = $2762;
                $737 = $2763;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3112));
                break;
               }
               $735 = (3128);
               $83 = (3128);
               $84 = 8644;
               $2298 = $83;
               $82 = $2298;
               $2299 = $82;
               $81 = $2299;
               $2300 = $81;
               $80 = $2300;
               $2301 = $84;
               $2302 = $84;
               __THREW__ = 0;
               $2303 = (invoke_ii(270,($2302|0))|0);
               $2304 = __THREW__; __THREW__ = 0;
               $2305 = $2304&1;
               if ($2305) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2298|0),($2301|0),($2303|0));
               $2306 = __THREW__; __THREW__ = 0;
               $2307 = $2306&1;
               if ($2307) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3140)|0),112,-128,-112,-1);
               $2308 = __THREW__; __THREW__ = 0;
               $2309 = $2308&1;
               if ($2309) {
                $2764 = ___cxa_find_matching_catch()|0;
                $2765 = tempRet0;
                $736 = $2764;
                $737 = $2765;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3128));
                break;
               }
               $735 = (3144);
               $78 = (3144);
               $79 = 8654;
               $2310 = $78;
               $77 = $2310;
               $2311 = $77;
               $76 = $2311;
               $2312 = $76;
               $75 = $2312;
               $2313 = $79;
               $2314 = $79;
               __THREW__ = 0;
               $2315 = (invoke_ii(270,($2314|0))|0);
               $2316 = __THREW__; __THREW__ = 0;
               $2317 = $2316&1;
               if ($2317) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2310|0),($2313|0),($2315|0));
               $2318 = __THREW__; __THREW__ = 0;
               $2319 = $2318&1;
               if ($2319) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3156)|0),112,-128,-112,-1);
               $2320 = __THREW__; __THREW__ = 0;
               $2321 = $2320&1;
               if ($2321) {
                $2766 = ___cxa_find_matching_catch()|0;
                $2767 = tempRet0;
                $736 = $2766;
                $737 = $2767;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3144));
                break;
               }
               $735 = (3160);
               $73 = (3160);
               $74 = 8664;
               $2322 = $73;
               $72 = $2322;
               $2323 = $72;
               $71 = $2323;
               $2324 = $71;
               $70 = $2324;
               $2325 = $74;
               $2326 = $74;
               __THREW__ = 0;
               $2327 = (invoke_ii(270,($2326|0))|0);
               $2328 = __THREW__; __THREW__ = 0;
               $2329 = $2328&1;
               if ($2329) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2322|0),($2325|0),($2327|0));
               $2330 = __THREW__; __THREW__ = 0;
               $2331 = $2330&1;
               if ($2331) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3172)|0),-1,-6,-6,-1);
               $2332 = __THREW__; __THREW__ = 0;
               $2333 = $2332&1;
               if ($2333) {
                $2768 = ___cxa_find_matching_catch()|0;
                $2769 = tempRet0;
                $736 = $2768;
                $737 = $2769;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3160));
                break;
               }
               $735 = (3176);
               $68 = (3176);
               $69 = 8669;
               $2334 = $68;
               $67 = $2334;
               $2335 = $67;
               $66 = $2335;
               $2336 = $66;
               $65 = $2336;
               $2337 = $69;
               $2338 = $69;
               __THREW__ = 0;
               $2339 = (invoke_ii(270,($2338|0))|0);
               $2340 = __THREW__; __THREW__ = 0;
               $2341 = $2340&1;
               if ($2341) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2334|0),($2337|0),($2339|0));
               $2342 = __THREW__; __THREW__ = 0;
               $2343 = $2342&1;
               if ($2343) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3188)|0),0,-1,127,-1);
               $2344 = __THREW__; __THREW__ = 0;
               $2345 = $2344&1;
               if ($2345) {
                $2770 = ___cxa_find_matching_catch()|0;
                $2771 = tempRet0;
                $736 = $2770;
                $737 = $2771;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3176));
                break;
               }
               $735 = (3192);
               $63 = (3192);
               $64 = 8681;
               $2346 = $63;
               $62 = $2346;
               $2347 = $62;
               $61 = $2347;
               $2348 = $61;
               $60 = $2348;
               $2349 = $64;
               $2350 = $64;
               __THREW__ = 0;
               $2351 = (invoke_ii(270,($2350|0))|0);
               $2352 = __THREW__; __THREW__ = 0;
               $2353 = $2352&1;
               if ($2353) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2346|0),($2349|0),($2351|0));
               $2354 = __THREW__; __THREW__ = 0;
               $2355 = $2354&1;
               if ($2355) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3204)|0),70,-126,-76,-1);
               $2356 = __THREW__; __THREW__ = 0;
               $2357 = $2356&1;
               if ($2357) {
                $2772 = ___cxa_find_matching_catch()|0;
                $2773 = tempRet0;
                $736 = $2772;
                $737 = $2773;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3192));
                break;
               }
               $735 = (3208);
               $58 = (3208);
               $59 = 8691;
               $2358 = $58;
               $57 = $2358;
               $2359 = $57;
               $56 = $2359;
               $2360 = $56;
               $55 = $2360;
               $2361 = $59;
               $2362 = $59;
               __THREW__ = 0;
               $2363 = (invoke_ii(270,($2362|0))|0);
               $2364 = __THREW__; __THREW__ = 0;
               $2365 = $2364&1;
               if ($2365) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2358|0),($2361|0),($2363|0));
               $2366 = __THREW__; __THREW__ = 0;
               $2367 = $2366&1;
               if ($2367) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3220)|0),-46,-76,-116,-1);
               $2368 = __THREW__; __THREW__ = 0;
               $2369 = $2368&1;
               if ($2369) {
                $2774 = ___cxa_find_matching_catch()|0;
                $2775 = tempRet0;
                $736 = $2774;
                $737 = $2775;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3208));
                break;
               }
               $735 = (3224);
               $53 = (3224);
               $54 = 8695;
               $2370 = $53;
               $52 = $2370;
               $2371 = $52;
               $51 = $2371;
               $2372 = $51;
               $50 = $2372;
               $2373 = $54;
               $2374 = $54;
               __THREW__ = 0;
               $2375 = (invoke_ii(270,($2374|0))|0);
               $2376 = __THREW__; __THREW__ = 0;
               $2377 = $2376&1;
               if ($2377) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2370|0),($2373|0),($2375|0));
               $2378 = __THREW__; __THREW__ = 0;
               $2379 = $2378&1;
               if ($2379) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3236)|0),0,-128,-128,-1);
               $2380 = __THREW__; __THREW__ = 0;
               $2381 = $2380&1;
               if ($2381) {
                $2776 = ___cxa_find_matching_catch()|0;
                $2777 = tempRet0;
                $736 = $2776;
                $737 = $2777;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3224));
                break;
               }
               $735 = (3240);
               $48 = (3240);
               $49 = 8700;
               $2382 = $48;
               $47 = $2382;
               $2383 = $47;
               $46 = $2383;
               $2384 = $46;
               $45 = $2384;
               $2385 = $49;
               $2386 = $49;
               __THREW__ = 0;
               $2387 = (invoke_ii(270,($2386|0))|0);
               $2388 = __THREW__; __THREW__ = 0;
               $2389 = $2388&1;
               if ($2389) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2382|0),($2385|0),($2387|0));
               $2390 = __THREW__; __THREW__ = 0;
               $2391 = $2390&1;
               if ($2391) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3252)|0),-40,-65,-40,-1);
               $2392 = __THREW__; __THREW__ = 0;
               $2393 = $2392&1;
               if ($2393) {
                $2778 = ___cxa_find_matching_catch()|0;
                $2779 = tempRet0;
                $736 = $2778;
                $737 = $2779;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3240));
                break;
               }
               $735 = (3256);
               $43 = (3256);
               $44 = 8708;
               $2394 = $43;
               $42 = $2394;
               $2395 = $42;
               $41 = $2395;
               $2396 = $41;
               $40 = $2396;
               $2397 = $44;
               $2398 = $44;
               __THREW__ = 0;
               $2399 = (invoke_ii(270,($2398|0))|0);
               $2400 = __THREW__; __THREW__ = 0;
               $2401 = $2400&1;
               if ($2401) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2394|0),($2397|0),($2399|0));
               $2402 = __THREW__; __THREW__ = 0;
               $2403 = $2402&1;
               if ($2403) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3268)|0),-1,99,71,-1);
               $2404 = __THREW__; __THREW__ = 0;
               $2405 = $2404&1;
               if ($2405) {
                $2780 = ___cxa_find_matching_catch()|0;
                $2781 = tempRet0;
                $736 = $2780;
                $737 = $2781;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3256));
                break;
               }
               $735 = (3272);
               $38 = (3272);
               $39 = 8715;
               $2406 = $38;
               $37 = $2406;
               $2407 = $37;
               $36 = $2407;
               $2408 = $36;
               $35 = $2408;
               $2409 = $39;
               $2410 = $39;
               __THREW__ = 0;
               $2411 = (invoke_ii(270,($2410|0))|0);
               $2412 = __THREW__; __THREW__ = 0;
               $2413 = $2412&1;
               if ($2413) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2406|0),($2409|0),($2411|0));
               $2414 = __THREW__; __THREW__ = 0;
               $2415 = $2414&1;
               if ($2415) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3284)|0),64,-32,-48,-1);
               $2416 = __THREW__; __THREW__ = 0;
               $2417 = $2416&1;
               if ($2417) {
                $2782 = ___cxa_find_matching_catch()|0;
                $2783 = tempRet0;
                $736 = $2782;
                $737 = $2783;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3272));
                break;
               }
               $735 = (3288);
               $33 = (3288);
               $34 = 8725;
               $2418 = $33;
               $32 = $2418;
               $2419 = $32;
               $31 = $2419;
               $2420 = $31;
               $30 = $2420;
               $2421 = $34;
               $2422 = $34;
               __THREW__ = 0;
               $2423 = (invoke_ii(270,($2422|0))|0);
               $2424 = __THREW__; __THREW__ = 0;
               $2425 = $2424&1;
               if ($2425) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2418|0),($2421|0),($2423|0));
               $2426 = __THREW__; __THREW__ = 0;
               $2427 = $2426&1;
               if ($2427) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3300)|0),-18,-126,-18,-1);
               $2428 = __THREW__; __THREW__ = 0;
               $2429 = $2428&1;
               if ($2429) {
                $2784 = ___cxa_find_matching_catch()|0;
                $2785 = tempRet0;
                $736 = $2784;
                $737 = $2785;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3288));
                break;
               }
               $735 = (3304);
               $28 = (3304);
               $29 = 8732;
               $2430 = $28;
               $27 = $2430;
               $2431 = $27;
               $26 = $2431;
               $2432 = $26;
               $25 = $2432;
               $2433 = $29;
               $2434 = $29;
               __THREW__ = 0;
               $2435 = (invoke_ii(270,($2434|0))|0);
               $2436 = __THREW__; __THREW__ = 0;
               $2437 = $2436&1;
               if ($2437) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2430|0),($2433|0),($2435|0));
               $2438 = __THREW__; __THREW__ = 0;
               $2439 = $2438&1;
               if ($2439) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3316)|0),-11,-34,-77,-1);
               $2440 = __THREW__; __THREW__ = 0;
               $2441 = $2440&1;
               if ($2441) {
                $2786 = ___cxa_find_matching_catch()|0;
                $2787 = tempRet0;
                $736 = $2786;
                $737 = $2787;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3304));
                break;
               }
               $735 = (3320);
               $23 = (3320);
               $24 = 8738;
               $2442 = $23;
               $22 = $2442;
               $2443 = $22;
               $21 = $2443;
               $2444 = $21;
               $20 = $2444;
               $2445 = $24;
               $2446 = $24;
               __THREW__ = 0;
               $2447 = (invoke_ii(270,($2446|0))|0);
               $2448 = __THREW__; __THREW__ = 0;
               $2449 = $2448&1;
               if ($2449) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2442|0),($2445|0),($2447|0));
               $2450 = __THREW__; __THREW__ = 0;
               $2451 = $2450&1;
               if ($2451) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3332)|0),-1,-1,-1,-1);
               $2452 = __THREW__; __THREW__ = 0;
               $2453 = $2452&1;
               if ($2453) {
                $2788 = ___cxa_find_matching_catch()|0;
                $2789 = tempRet0;
                $736 = $2788;
                $737 = $2789;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3320));
                break;
               }
               $735 = (3336);
               $18 = (3336);
               $19 = 8744;
               $2454 = $18;
               $17 = $2454;
               $2455 = $17;
               $16 = $2455;
               $2456 = $16;
               $15 = $2456;
               $2457 = $19;
               $2458 = $19;
               __THREW__ = 0;
               $2459 = (invoke_ii(270,($2458|0))|0);
               $2460 = __THREW__; __THREW__ = 0;
               $2461 = $2460&1;
               if ($2461) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2454|0),($2457|0),($2459|0));
               $2462 = __THREW__; __THREW__ = 0;
               $2463 = $2462&1;
               if ($2463) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3348)|0),-11,-11,-11,-1);
               $2464 = __THREW__; __THREW__ = 0;
               $2465 = $2464&1;
               if ($2465) {
                $2790 = ___cxa_find_matching_catch()|0;
                $2791 = tempRet0;
                $736 = $2790;
                $737 = $2791;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3336));
                break;
               }
               $735 = (3352);
               $13 = (3352);
               $14 = 8755;
               $2466 = $13;
               $12 = $2466;
               $2467 = $12;
               $11 = $2467;
               $2468 = $11;
               $10 = $2468;
               $2469 = $14;
               $2470 = $14;
               __THREW__ = 0;
               $2471 = (invoke_ii(270,($2470|0))|0);
               $2472 = __THREW__; __THREW__ = 0;
               $2473 = $2472&1;
               if ($2473) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2466|0),($2469|0),($2471|0));
               $2474 = __THREW__; __THREW__ = 0;
               $2475 = $2474&1;
               if ($2475) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3364)|0),-1,-1,0,-1);
               $2476 = __THREW__; __THREW__ = 0;
               $2477 = $2476&1;
               if ($2477) {
                $2792 = ___cxa_find_matching_catch()|0;
                $2793 = tempRet0;
                $736 = $2792;
                $737 = $2793;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3352));
                break;
               }
               $735 = (3368);
               $8 = (3368);
               $9 = 8762;
               $2478 = $8;
               $7 = $2478;
               $2479 = $7;
               $6 = $2479;
               $2480 = $6;
               $5 = $2480;
               $2481 = $9;
               $2482 = $9;
               __THREW__ = 0;
               $2483 = (invoke_ii(270,($2482|0))|0);
               $2484 = __THREW__; __THREW__ = 0;
               $2485 = $2484&1;
               if ($2485) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2478|0),($2481|0),($2483|0));
               $2486 = __THREW__; __THREW__ = 0;
               $2487 = $2486&1;
               if ($2487) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3380)|0),-102,-51,50,-1);
               $2488 = __THREW__; __THREW__ = 0;
               $2489 = $2488&1;
               if ($2489) {
                $2794 = ___cxa_find_matching_catch()|0;
                $2795 = tempRet0;
                $736 = $2794;
                $737 = $2795;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3368));
                break;
               }
               $735 = (3384);
               $3 = (3384);
               $4 = 8774;
               $2490 = $3;
               $2 = $2490;
               $2491 = $2;
               $1 = $2491;
               $2492 = $1;
               $0 = $2492;
               $2493 = $4;
               $2494 = $4;
               __THREW__ = 0;
               $2495 = (invoke_ii(270,($2494|0))|0);
               $2496 = __THREW__; __THREW__ = 0;
               $2497 = $2496&1;
               if ($2497) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viii(271,($2490|0),($2493|0),($2495|0));
               $2498 = __THREW__; __THREW__ = 0;
               $2499 = $2498&1;
               if ($2499) {
                label = 443;
                break;
               }
               __THREW__ = 0;
               invoke_viiiii(272,((3396)|0),0,0,0,0);
               $2500 = __THREW__; __THREW__ = 0;
               $2501 = $2500&1;
               if ($2501) {
                $2796 = ___cxa_find_matching_catch()|0;
                $2797 = tempRet0;
                $736 = $2796;
                $737 = $2797;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev((3384));
                break;
               } else {
                (___cxa_atexit((273|0),(0|0),(___dso_handle|0))|0);
                STACKTOP = sp;return;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 443) {
  $2502 = ___cxa_find_matching_catch()|0;
  $2503 = tempRet0;
  $736 = $2502;
  $737 = $2503;
 }
 $2798 = $735;
 $2799 = (1048|0)==($2798|0);
 if ($2799) {
  $2803 = $736;
  $2804 = $737;
  ___resumeException($2803|0);
  // unreachable;
 } else {
  $2801 = $2798;
 }
 while(1) {
  $2800 = ((($2801)) + -16|0);
  __ZN2mp3xml11named_colorD2Ev($2800);
  $2802 = ($2800|0)==(1048|0);
  if ($2802) {
   break;
  } else {
   $2801 = $2800;
  }
 }
 $2803 = $736;
 $2804 = $737;
 ___resumeException($2803|0);
 // unreachable;
}
function __ZN2mp3xml9xml_colorC2Ehhhh($this,$r,$g,$b,$a) {
 $this = $this|0;
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $r;
 $2 = $g;
 $3 = $b;
 $4 = $a;
 $5 = $0;
 $6 = $4;
 $7 = $6&255;
 $8 = $7 & 255;
 $9 = $8 << 24;
 $10 = $1;
 $11 = $10&255;
 $12 = $11 & 255;
 $13 = $12 << 16;
 $14 = $9 | $13;
 $15 = $2;
 $16 = $15&255;
 $17 = $16 & 255;
 $18 = $17 << 8;
 $19 = $14 | $18;
 $20 = $3;
 $21 = $20&255;
 $22 = $21 & 255;
 $23 = $19 | $22;
 HEAP32[$5>>2] = $23;
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $3 = (3400);
 while(1) {
  $2 = ((($3)) + -16|0);
  __ZN2mp3xml11named_colorD2Ev($2);
  $4 = ($2|0)==(1048|0);
  if ($4) {
   break;
  } else {
   $3 = $2;
  }
 }
 STACKTOP = sp;return;
}
function __ZN2mp3xml11named_colorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_xml_tree_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init237();
 return;
}
function ___cxx_global_var_init237() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = 3400;
 $4 = 8786;
 $5 = $3;
 $2 = $5;
 $6 = $2;
 $1 = $6;
 $7 = $1;
 $0 = $7;
 $8 = $4;
 $9 = $4;
 $10 = (__ZNSt3__111char_traitsIcE6lengthEPKc($9)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($5,$8,$10);
 (___cxa_atexit((274|0),(3400|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPairD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vi(275,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml27StrPair5ResetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 512;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   __ZdaPv($6);
  }
 }
 HEAP32[$1>>2] = 0;
 $8 = ((($1)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 8|0);
 HEAP32[$9>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPair10TransferToEPS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $other;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 __ZN8tinyxml27StrPair5ResetEv($5);
 $6 = HEAP32[$2>>2]|0;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = ((($2)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 HEAP32[$2>>2] = 0;
 $16 = ((($2)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($2)) + 8|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPair6SetStrEPKci($this,$str,$flags) {
 $this = $this|0;
 $str = $str|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $flags;
 $3 = $0;
 __ZN8tinyxml27StrPair5ResetEv($3);
 $4 = $1;
 $5 = (_strlen($4)|0);
 $len = $5;
 $6 = $len;
 $7 = (($6) + 1)|0;
 $8 = (__Znaj($7)|0);
 $9 = ((($3)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = $len;
 $14 = (($13) + 1)|0;
 _memcpy(($11|0),($12|0),($14|0))|0;
 $15 = ((($3)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $len;
 $18 = (($16) + ($17)|0);
 $19 = ((($3)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = $2;
 $21 = $20 | 512;
 HEAP32[$3>>2] = $21;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPair9ParseTextEPcPKci($this,$p,$endTag,$strFlags) {
 $this = $this|0;
 $p = $p|0;
 $endTag = $endTag|0;
 $strFlags = $strFlags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endChar = 0, $length = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $endTag;
 $4 = $strFlags;
 $5 = $1;
 $6 = $2;
 $start = $6;
 $7 = $3;
 $8 = HEAP8[$7>>0]|0;
 $endChar = $8;
 $9 = $3;
 $10 = (_strlen($9)|0);
 $length = $10;
 while(1) {
  $11 = $2;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  if (!($13)) {
   label = 7;
   break;
  }
  $14 = $2;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = $endChar;
  $18 = $17 << 24 >> 24;
  $19 = ($16|0)==($18|0);
  if ($19) {
   $20 = $2;
   $21 = $3;
   $22 = $length;
   $23 = (_strncmp($20,$21,$22)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    label = 5;
    break;
   }
  }
  $31 = $2;
  $32 = ((($31)) + 1|0);
  $2 = $32;
 }
 if ((label|0) == 5) {
  $25 = $start;
  $26 = $2;
  $27 = $4;
  __ZN8tinyxml27StrPair3SetEPcS1_i($5,$25,$26,$27);
  $28 = $2;
  $29 = $length;
  $30 = (($28) + ($29)|0);
  $0 = $30;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZN8tinyxml27StrPair9ParseNameEPc($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $2;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if ($8) {
   $9 = $2;
   $10 = HEAP8[$9>>0]|0;
   $11 = (__ZN8tinyxml27XMLUtil15IsNameStartCharEh($10)|0);
   if (!($11)) {
    $0 = 0;
    $26 = $0;
    STACKTOP = sp;return ($26|0);
   }
   $12 = $2;
   $start = $12;
   $13 = $2;
   $14 = ((($13)) + 1|0);
   $2 = $14;
   while(1) {
    $15 = $2;
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)!=(0);
    if (!($17)) {
     break;
    }
    $18 = $2;
    $19 = HEAP8[$18>>0]|0;
    $20 = (__ZN8tinyxml27XMLUtil10IsNameCharEh($19)|0);
    if (!($20)) {
     break;
    }
    $21 = $2;
    $22 = ((($21)) + 1|0);
    $2 = $22;
   }
   $23 = $start;
   $24 = $2;
   __ZN8tinyxml27StrPair3SetEPcS1_i($3,$23,$24,0);
   $25 = $2;
   $0 = $25;
   $26 = $0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function __ZN8tinyxml27StrPair18CollapseWhitespaceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $q = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($3)|0);
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $p = $11;
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $q = $13;
 while(1) {
  $14 = $p;
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $p;
  $18 = HEAP8[$17>>0]|0;
  $19 = (__ZN8tinyxml27XMLUtil12IsWhiteSpaceEc($18)|0);
  if ($19) {
   $20 = $p;
   $21 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($20)|0);
   $p = $21;
   $22 = $p;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)==(0);
   if ($25) {
    break;
   }
   $26 = $q;
   HEAP8[$26>>0] = 32;
   $27 = $q;
   $28 = ((($27)) + 1|0);
   $q = $28;
  }
  $29 = $p;
  $30 = HEAP8[$29>>0]|0;
  $31 = $q;
  HEAP8[$31>>0] = $30;
  $32 = $q;
  $33 = ((($32)) + 1|0);
  $q = $33;
  $34 = $p;
  $35 = ((($34)) + 1|0);
  $p = $35;
 }
 $36 = $q;
 HEAP8[$36>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPair6GetStrEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $adjusted = 0;
 var $buf = 0, $buflen = 0, $entity = 0, $entityFound = 0, $i = 0, $len = 0, $p = 0, $q = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 34|0;
 $len = sp + 12|0;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 256;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $137 = ((($1)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  STACKTOP = sp;return ($138|0);
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP8[$6>>0] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = $7 ^ 256;
 HEAP32[$1>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = ((($1)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $p = $12;
  $13 = ((($1)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $q = $14;
  while(1) {
   $15 = $p;
   $16 = ((($1)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if (!($18)) {
    break;
   }
   $19 = HEAP32[$1>>2]|0;
   $20 = $19 & 2;
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = $p;
    $23 = HEAP8[$22>>0]|0;
    $24 = $23 << 24 >> 24;
    $25 = ($24|0)==(13);
    if ($25) {
     $26 = $p;
     $27 = ((($26)) + 1|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28 << 24 >> 24;
     $30 = ($29|0)==(10);
     $31 = $p;
     if ($30) {
      $32 = ((($31)) + 2|0);
      $p = $32;
     } else {
      $33 = ((($31)) + 1|0);
      $p = $33;
     }
     $34 = $q;
     $35 = ((($34)) + 1|0);
     $q = $35;
     HEAP8[$34>>0] = 10;
     continue;
    }
   }
   $36 = HEAP32[$1>>2]|0;
   $37 = $36 & 2;
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $p;
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = ($41|0)==(10);
    if ($42) {
     $43 = $p;
     $44 = ((($43)) + 1|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45 << 24 >> 24;
     $47 = ($46|0)==(13);
     $48 = $p;
     if ($47) {
      $49 = ((($48)) + 2|0);
      $p = $49;
     } else {
      $50 = ((($48)) + 1|0);
      $p = $50;
     }
     $51 = $q;
     $52 = ((($51)) + 1|0);
     $q = $52;
     HEAP8[$51>>0] = 10;
     continue;
    }
   }
   $53 = HEAP32[$1>>2]|0;
   $54 = $53 & 1;
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = $p;
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $59 = ($58|0)==(38);
    if ($59) {
     $60 = $p;
     $61 = ((($60)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = ($63|0)==(35);
     if ($64) {
      $buflen = 10;
      dest=$buf; stop=dest+10|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      HEAP32[$len>>2] = 0;
      $65 = $p;
      $66 = (__ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi($65,$buf,$len)|0);
      $adjusted = $66;
      $67 = $adjusted;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $69 = $p;
       $70 = HEAP8[$69>>0]|0;
       $71 = $q;
       HEAP8[$71>>0] = $70;
       $72 = $p;
       $73 = ((($72)) + 1|0);
       $p = $73;
       $74 = $q;
       $75 = ((($74)) + 1|0);
       $q = $75;
       continue;
      } else {
       $76 = $adjusted;
       $p = $76;
       $77 = $q;
       $78 = HEAP32[$len>>2]|0;
       _memcpy(($77|0),($buf|0),($78|0))|0;
       $79 = HEAP32[$len>>2]|0;
       $80 = $q;
       $81 = (($80) + ($79)|0);
       $q = $81;
       continue;
      }
     }
     $entityFound = 0;
     $i = 0;
     while(1) {
      $82 = $i;
      $83 = ($82|0)<(5);
      if (!($83)) {
       break;
      }
      $84 = $i;
      $85 = (4032 + (($84*12)|0)|0);
      $entity = $85;
      $86 = $p;
      $87 = ((($86)) + 1|0);
      $88 = $entity;
      $89 = HEAP32[$88>>2]|0;
      $90 = $entity;
      $91 = ((($90)) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (_strncmp($87,$89,$92)|0);
      $94 = ($93|0)==(0);
      if ($94) {
       $95 = $p;
       $96 = $entity;
       $97 = ((($96)) + 4|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($95) + ($98)|0);
       $100 = ((($99)) + 1|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101 << 24 >> 24;
       $103 = ($102|0)==(59);
       if ($103) {
        label = 27;
        break;
       }
      }
      $116 = $i;
      $117 = (($116) + 1)|0;
      $i = $117;
     }
     if ((label|0) == 27) {
      label = 0;
      $104 = $entity;
      $105 = ((($104)) + 8|0);
      $106 = HEAP8[$105>>0]|0;
      $107 = $q;
      HEAP8[$107>>0] = $106;
      $108 = $q;
      $109 = ((($108)) + 1|0);
      $q = $109;
      $110 = $entity;
      $111 = ((($110)) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = (($112) + 2)|0;
      $114 = $p;
      $115 = (($114) + ($113)|0);
      $p = $115;
      $entityFound = 1;
     }
     $118 = $entityFound;
     $119 = $118&1;
     if ($119) {
      continue;
     }
     $120 = $p;
     $121 = ((($120)) + 1|0);
     $p = $121;
     $122 = $q;
     $123 = ((($122)) + 1|0);
     $q = $123;
     continue;
    }
   }
   $124 = $p;
   $125 = HEAP8[$124>>0]|0;
   $126 = $q;
   HEAP8[$126>>0] = $125;
   $127 = $p;
   $128 = ((($127)) + 1|0);
   $p = $128;
   $129 = $q;
   $130 = ((($129)) + 1|0);
   $q = $130;
  }
  $131 = $q;
  HEAP8[$131>>0] = 0;
 }
 $132 = HEAP32[$1>>2]|0;
 $133 = $132 & 4;
 $134 = ($133|0)!=(0);
 if ($134) {
  __ZN8tinyxml27StrPair18CollapseWhitespaceEv($1);
 }
 $135 = HEAP32[$1>>2]|0;
 $136 = $135 & 512;
 HEAP32[$1>>2] = $136;
 $137 = ((($1)) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 STACKTOP = sp;return ($138|0);
}
function __ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi($p,$value,$length) {
 $p = $p|0;
 $value = $value|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta = 0, $digit = 0;
 var $digit2 = 0, $digitScaled = 0, $digitScaled3 = 0, $mult = 0, $q = 0, $q1 = 0, $ucs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $value;
 $3 = $length;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)==(35);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 2|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  if ($13) {
   $ucs = 0;
   $delta = 0;
   $mult = 1;
   $14 = $1;
   $15 = ((($14)) + 2|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)==(120);
   $19 = $1;
   L4: do {
    if ($18) {
     $20 = ((($19)) + 3|0);
     $q = $20;
     $21 = $q;
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)!=(0);
     if (!($23)) {
      $0 = 0;
      $137 = $0;
      STACKTOP = sp;return ($137|0);
     }
     $24 = $q;
     $25 = (_strchr($24,59)|0);
     $q = $25;
     $26 = $q;
     $27 = ($26|0)!=(0|0);
     if (!($27)) {
      $0 = 0;
      $137 = $0;
      STACKTOP = sp;return ($137|0);
     }
     $28 = $q;
     $29 = $1;
     $30 = $28;
     $31 = $29;
     $32 = (($30) - ($31))|0;
     $delta = $32;
     $33 = $q;
     $34 = ((($33)) + -1|0);
     $q = $34;
     L14: while(1) {
      $35 = $q;
      $36 = HEAP8[$35>>0]|0;
      $37 = $36 << 24 >> 24;
      $38 = ($37|0)!=(120);
      if (!($38)) {
       break L4;
      }
      $digit = 0;
      $39 = $q;
      $40 = HEAP8[$39>>0]|0;
      $41 = $40 << 24 >> 24;
      $42 = ($41|0)>=(48);
      if ($42) {
       $43 = $q;
       $44 = HEAP8[$43>>0]|0;
       $45 = $44 << 24 >> 24;
       $46 = ($45|0)<=(57);
       if ($46) {
        $47 = $q;
        $48 = HEAP8[$47>>0]|0;
        $49 = $48 << 24 >> 24;
        $50 = (($49) - 48)|0;
        $digit = $50;
       } else {
        label = 13;
       }
      } else {
       label = 13;
      }
      do {
       if ((label|0) == 13) {
        label = 0;
        $51 = $q;
        $52 = HEAP8[$51>>0]|0;
        $53 = $52 << 24 >> 24;
        $54 = ($53|0)>=(97);
        if ($54) {
         $55 = $q;
         $56 = HEAP8[$55>>0]|0;
         $57 = $56 << 24 >> 24;
         $58 = ($57|0)<=(102);
         if ($58) {
          $59 = $q;
          $60 = HEAP8[$59>>0]|0;
          $61 = $60 << 24 >> 24;
          $62 = (($61) - 97)|0;
          $63 = (($62) + 10)|0;
          $digit = $63;
          break;
         }
        }
        $64 = $q;
        $65 = HEAP8[$64>>0]|0;
        $66 = $65 << 24 >> 24;
        $67 = ($66|0)>=(65);
        if (!($67)) {
         break L14;
        }
        $68 = $q;
        $69 = HEAP8[$68>>0]|0;
        $70 = $69 << 24 >> 24;
        $71 = ($70|0)<=(70);
        if (!($71)) {
         break L14;
        }
        $72 = $q;
        $73 = HEAP8[$72>>0]|0;
        $74 = $73 << 24 >> 24;
        $75 = (($74) - 65)|0;
        $76 = (($75) + 10)|0;
        $digit = $76;
       }
      } while(0);
      $77 = $mult;
      $78 = $digit;
      $79 = Math_imul($77, $78)|0;
      $digitScaled = $79;
      $80 = $digitScaled;
      $81 = $ucs;
      $82 = (($81) + ($80))|0;
      $ucs = $82;
      $83 = $mult;
      $84 = $83<<4;
      $mult = $84;
      $85 = $q;
      $86 = ((($85)) + -1|0);
      $q = $86;
     }
     $0 = 0;
     $137 = $0;
     STACKTOP = sp;return ($137|0);
    } else {
     $87 = ((($19)) + 2|0);
     $q1 = $87;
     $88 = $q1;
     $89 = HEAP8[$88>>0]|0;
     $90 = ($89<<24>>24)!=(0);
     if (!($90)) {
      $0 = 0;
      $137 = $0;
      STACKTOP = sp;return ($137|0);
     }
     $91 = $q1;
     $92 = (_strchr($91,59)|0);
     $q1 = $92;
     $93 = $q1;
     $94 = ($93|0)!=(0|0);
     if (!($94)) {
      $0 = 0;
      $137 = $0;
      STACKTOP = sp;return ($137|0);
     }
     $95 = $q1;
     $96 = $1;
     $97 = $95;
     $98 = $96;
     $99 = (($97) - ($98))|0;
     $delta = $99;
     $100 = $q1;
     $101 = ((($100)) + -1|0);
     $q1 = $101;
     while(1) {
      $102 = $q1;
      $103 = HEAP8[$102>>0]|0;
      $104 = $103 << 24 >> 24;
      $105 = ($104|0)!=(35);
      if (!($105)) {
       break L4;
      }
      $106 = $q1;
      $107 = HEAP8[$106>>0]|0;
      $108 = $107 << 24 >> 24;
      $109 = ($108|0)>=(48);
      if (!($109)) {
       break;
      }
      $110 = $q1;
      $111 = HEAP8[$110>>0]|0;
      $112 = $111 << 24 >> 24;
      $113 = ($112|0)<=(57);
      if (!($113)) {
       break;
      }
      $114 = $q1;
      $115 = HEAP8[$114>>0]|0;
      $116 = $115 << 24 >> 24;
      $117 = (($116) - 48)|0;
      $digit2 = $117;
      $118 = $mult;
      $119 = $digit2;
      $120 = Math_imul($118, $119)|0;
      $digitScaled3 = $120;
      $121 = $digitScaled3;
      $122 = $ucs;
      $123 = (($122) + ($121))|0;
      $ucs = $123;
      $124 = $mult;
      $125 = ($124*10)|0;
      $mult = $125;
      $126 = $q1;
      $127 = ((($126)) + -1|0);
      $q1 = $127;
     }
     $0 = 0;
     $137 = $0;
     STACKTOP = sp;return ($137|0);
    }
   } while(0);
   $128 = $ucs;
   $129 = $2;
   $130 = $3;
   __ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi($128,$129,$130);
   $131 = $1;
   $132 = $delta;
   $133 = (($131) + ($132)|0);
   $134 = ((($133)) + 1|0);
   $0 = $134;
   $137 = $0;
   STACKTOP = sp;return ($137|0);
  }
 }
 $135 = $1;
 $136 = ((($135)) + 1|0);
 $0 = $136;
 $137 = $0;
 STACKTOP = sp;return ($137|0);
}
function __ZN8tinyxml27XMLUtil7ReadBOMEPKcPb($p,$bom) {
 $p = $p|0;
 $bom = $bom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $bom;
 $2 = $1;
 HEAP8[$2>>0] = 0;
 $3 = $0;
 $pu = $3;
 $4 = $pu;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(239);
 if ($7) {
  $8 = $pu;
  $9 = ((($8)) + 1|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(187);
  if ($12) {
   $13 = $pu;
   $14 = ((($13)) + 2|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)==(191);
   if ($17) {
    $18 = $1;
    HEAP8[$18>>0] = 1;
    $19 = $0;
    $20 = ((($19)) + 3|0);
    $0 = $20;
   }
  }
 }
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function __ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi($input,$output,$length) {
 $input = $input|0;
 $output = $output|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BYTE_MARK = 0, $BYTE_MASK = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $input;
 $1 = $output;
 $2 = $length;
 $BYTE_MASK = 191;
 $BYTE_MARK = 128;
 $3 = $0;
 $4 = ($3>>>0)<(128);
 do {
  if ($4) {
   $5 = $2;
   HEAP32[$5>>2] = 1;
  } else {
   $6 = $0;
   $7 = ($6>>>0)<(2048);
   if ($7) {
    $8 = $2;
    HEAP32[$8>>2] = 2;
    break;
   }
   $9 = $0;
   $10 = ($9>>>0)<(65536);
   if ($10) {
    $11 = $2;
    HEAP32[$11>>2] = 3;
    break;
   }
   $12 = $0;
   $13 = ($12>>>0)<(2097152);
   $14 = $2;
   if ($13) {
    HEAP32[$14>>2] = 4;
    break;
   }
   HEAP32[$14>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 $18 = (($17) + ($16)|0);
 $1 = $18;
 $19 = $2;
 $20 = HEAP32[$19>>2]|0;
 switch ($20|0) {
 case 4:  {
  $21 = $1;
  $22 = ((($21)) + -1|0);
  $1 = $22;
  $23 = $0;
  $24 = $23 | 128;
  $25 = $24 & 191;
  $26 = $25&255;
  $27 = $1;
  HEAP8[$27>>0] = $26;
  $28 = $0;
  $29 = $28 >>> 6;
  $0 = $29;
  label = 12;
  break;
 }
 case 3:  {
  label = 12;
  break;
 }
 case 2:  {
  label = 13;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 if ((label|0) == 12) {
  $30 = $1;
  $31 = ((($30)) + -1|0);
  $1 = $31;
  $32 = $0;
  $33 = $32 | 128;
  $34 = $33 & 191;
  $35 = $34&255;
  $36 = $1;
  HEAP8[$36>>0] = $35;
  $37 = $0;
  $38 = $37 >>> 6;
  $0 = $38;
  label = 13;
 }
 if ((label|0) == 13) {
  $39 = $1;
  $40 = ((($39)) + -1|0);
  $1 = $40;
  $41 = $0;
  $42 = $41 | 128;
  $43 = $42 & 191;
  $44 = $43&255;
  $45 = $1;
  HEAP8[$45>>0] = $44;
  $46 = $0;
  $47 = $46 >>> 6;
  $0 = $47;
 }
 $48 = $1;
 $49 = ((($48)) + -1|0);
 $1 = $49;
 $50 = $0;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 $53 = (4092 + ($52<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $50 | $54;
 $56 = $55&255;
 $57 = $1;
 HEAP8[$57>>0] = $56;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLUtil5ToStrEiPci($v,$buffer,$bufferSize) {
 $v = $v|0;
 $buffer = $buffer|0;
 $bufferSize = $bufferSize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $v;
 $1 = $buffer;
 $2 = $bufferSize;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 HEAP32[$vararg_buffer>>2] = $5;
 (_snprintf($3,$4,9561,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLUtil5ToStrEdPci($v,$buffer,$bufferSize) {
 $v = +$v;
 $buffer = $buffer|0;
 $bufferSize = $bufferSize|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $0 = $v;
 $1 = $buffer;
 $2 = $bufferSize;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 HEAPF64[$vararg_buffer>>3] = $5;
 (_snprintf($3,$4,8985,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLUtil5ToIntEPKcPi($str,$value) {
 $str = $str|0;
 $value = $value|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = $str;
 $2 = $value;
 $3 = $1;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $5 = (_sscanf($3,9561,$vararg_buffer)|0);
 $6 = ($5|0)==(1);
 if ($6) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml27XMLUtil8ToDoubleEPKcPd($str,$value) {
 $str = $str|0;
 $value = $value|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = $str;
 $2 = $value;
 $3 = $1;
 $4 = $2;
 HEAP32[$vararg_buffer>>2] = $4;
 $5 = (_sscanf($3,9570,$vararg_buffer)|0);
 $6 = ($5|0)==(1);
 if ($6) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE($this,$p,$node) {
 $this = $this|0;
 $p = $p|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $returnNode = 0, $start = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $node;
 $4 = $1;
 $5 = $2;
 $start = $5;
 $6 = $2;
 $7 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($6)|0);
 $2 = $7;
 $8 = $2;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 if (!($10)) {
  $11 = $3;
  HEAP32[$11>>2] = 0;
  $12 = $2;
  $0 = $12;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $returnNode = 0;
 $13 = $2;
 $14 = HEAP32[4120>>2]|0;
 $15 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($13,$14,2)|0);
 do {
  if ($15) {
   $16 = ((($4)) + 300|0);
   $17 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($16)|0);
   __ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE($17,$4);
   $returnNode = $17;
   $18 = ((($4)) + 300|0);
   $19 = $returnNode;
   $20 = ((($19)) + 44|0);
   HEAP32[$20>>2] = $18;
   $21 = $2;
   $22 = ((($21)) + 2|0);
   $2 = $22;
  } else {
   $23 = $2;
   $24 = HEAP32[4124>>2]|0;
   $25 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($23,$24,4)|0);
   if ($25) {
    $26 = ((($4)) + 300|0);
    $27 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($26)|0);
    __ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE($27,$4);
    $returnNode = $27;
    $28 = ((($4)) + 300|0);
    $29 = $returnNode;
    $30 = ((($29)) + 44|0);
    HEAP32[$30>>2] = $28;
    $31 = $2;
    $32 = ((($31)) + 4|0);
    $2 = $32;
    break;
   }
   $33 = $2;
   $34 = HEAP32[4128>>2]|0;
   $35 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($33,$34,9)|0);
   if ($35) {
    $36 = ((($4)) + 224|0);
    $37 = (__ZN8tinyxml28MemPoolTILi52EE5AllocEv($36)|0);
    __ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE($37,$4);
    $text = $37;
    $38 = $text;
    $returnNode = $38;
    $39 = ((($4)) + 224|0);
    $40 = $returnNode;
    $41 = ((($40)) + 44|0);
    HEAP32[$41>>2] = $39;
    $42 = $2;
    $43 = ((($42)) + 9|0);
    $2 = $43;
    $44 = $text;
    __ZN8tinyxml27XMLText8SetCDataEb($44,1);
    break;
   }
   $45 = $2;
   $46 = HEAP32[4132>>2]|0;
   $47 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($45,$46,2)|0);
   if ($47) {
    $48 = ((($4)) + 300|0);
    $49 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($48)|0);
    __ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE($49,$4);
    $returnNode = $49;
    $50 = ((($4)) + 300|0);
    $51 = $returnNode;
    $52 = ((($51)) + 44|0);
    HEAP32[$52>>2] = $50;
    $53 = $2;
    $54 = ((($53)) + 2|0);
    $2 = $54;
    break;
   }
   $55 = $2;
   $56 = HEAP32[4136>>2]|0;
   $57 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($55,$56,1)|0);
   if ($57) {
    $58 = ((($4)) + 72|0);
    $59 = (__ZN8tinyxml28MemPoolTILi56EE5AllocEv($58)|0);
    __ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE($59,$4);
    $returnNode = $59;
    $60 = ((($4)) + 72|0);
    $61 = $returnNode;
    $62 = ((($61)) + 44|0);
    HEAP32[$62>>2] = $60;
    $63 = $2;
    $64 = ((($63)) + 1|0);
    $2 = $64;
    break;
   } else {
    $65 = ((($4)) + 224|0);
    $66 = (__ZN8tinyxml28MemPoolTILi52EE5AllocEv($65)|0);
    __ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE($66,$4);
    $returnNode = $66;
    $67 = ((($4)) + 224|0);
    $68 = $returnNode;
    $69 = ((($68)) + 44|0);
    HEAP32[$69>>2] = $67;
    $70 = $start;
    $2 = $70;
    break;
   }
  }
 } while(0);
 $71 = $returnNode;
 $72 = $3;
 HEAP32[$72>>2] = $71;
 $73 = $2;
 $0 = $73;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function __ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 511]($3,$2)|0);
 L1: do {
  if ($7) {
   $8 = (__ZNK8tinyxml27XMLNode10FirstChildEv($2)|0);
   $node = $8;
   while(1) {
    $9 = $node;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     break L1;
    }
    $11 = $node;
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + 56|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $1;
    $16 = (FUNCTION_TABLE_iii[$14 & 511]($11,$15)|0);
    if (!($16)) {
     break L1;
    }
    $17 = $node;
    $18 = (__ZNK8tinyxml27XMLNode11NextSiblingEv($17)|0);
    $node = $18;
   }
  }
 } while(0);
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_iii[$22 & 511]($19,$2)|0);
 STACKTOP = sp;return ($23|0);
}
function __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = 3420;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($2)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($2)) + 12|0);
 __ZN8tinyxml27StrPairC2Ev($7);
 $8 = ((($2)) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($2)) + 28|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($2)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($2)) + 36|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($2)) + 40|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($2)) + 44|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNodeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3420;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 invoke_vi(276,($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($3)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   $18 = ((($3)) + 12|0);
   __ZN8tinyxml27StrPairD2Ev($18);
   STACKTOP = sp;return;
  }
  $10 = ((($3)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  __THREW__ = 0;
  invoke_vii(277,($11|0),($3|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   $18 = ((($3)) + 12|0);
   __ZN8tinyxml27StrPairD2Ev($18);
   STACKTOP = sp;return;
  }
 }
 $14 = ___cxa_find_matching_catch(0|0)|0;
 $15 = tempRet0;
 $1 = $14;
 $2 = $15;
 $16 = ((($3)) + 12|0);
 __ZN8tinyxml27StrPairD2Ev($16);
 $17 = $1;
 ___clang_call_terminate($17);
 // unreachable;
}
function __ZN8tinyxml27XMLNode14DeleteChildrenEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 24|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $node = $6;
  $7 = $node;
  __ZN8tinyxml27XMLNode6UnlinkEPS0_($1,$7);
  $8 = $node;
  __ZN8tinyxml27XMLNode10DeleteNodeEPS0_($8);
 }
 $9 = ((($1)) + 28|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 24|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNode6UnlinkEPS0_($this,$child) {
 $this = $this|0;
 $child = $child|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $child;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $7 = ((($2)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($2)) + 24|0);
  HEAP32[$11>>2] = $10;
 }
 $12 = $1;
 $13 = ((($2)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)==($14|0);
 if ($15) {
  $16 = ((($2)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 28|0);
  HEAP32[$20>>2] = $19;
 }
 $21 = $1;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $1;
  $26 = ((($25)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  $29 = ((($28)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 36|0);
  HEAP32[$31>>2] = $27;
 }
 $32 = $1;
 $33 = ((($32)) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  $43 = $1;
  $44 = ((($43)) + 8|0);
  HEAP32[$44>>2] = 0;
  STACKTOP = sp;return;
 }
 $36 = $1;
 $37 = ((($36)) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $1;
 $40 = ((($39)) + 36|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 32|0);
 HEAP32[$42>>2] = $38;
 $43 = $1;
 $44 = ((($43)) + 8|0);
 HEAP32[$44>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNodeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml27XMLNode5ValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 511]($2)|0);
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $8 = ((($2)) + 12|0);
  $9 = (__ZN8tinyxml27StrPair6GetStrEv($8)|0);
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __ZN8tinyxml27XMLNode8SetValueEPKcb($this,$str,$staticMem) {
 $this = $this|0;
 $str = $str|0;
 $staticMem = $staticMem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $3 = $staticMem&1;
 $2 = $3;
 $4 = $0;
 $5 = $2;
 $6 = $5&1;
 $7 = ((($4)) + 12|0);
 $8 = $1;
 if ($6) {
  __ZN8tinyxml27StrPair14SetInternedStrEPKc($7,$8);
  STACKTOP = sp;return;
 } else {
  __ZN8tinyxml27StrPair6SetStrEPKci($7,$8,0);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml27XMLNode10DeleteNodeEPS0_($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $pool = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_vi[$9 & 511]($6);
 $10 = $pool;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 FUNCTION_TABLE_vii[$13 & 511]($10,$14);
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLNode14InsertEndChildEPS0_($this,$addThis) {
 $this = $this|0;
 $addThis = $addThis|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $addThis;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)!=($8|0);
 if ($9) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $10 = $2;
 __ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_($3,$10);
 $11 = ((($3)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 $14 = $2;
 $15 = ((($3)) + 28|0);
 if ($13) {
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 36|0);
  HEAP32[$17>>2] = $14;
  $18 = ((($3)) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = ((($20)) + 32|0);
  HEAP32[$21>>2] = $19;
  $22 = $2;
  $23 = ((($3)) + 28|0);
  HEAP32[$23>>2] = $22;
  $24 = $2;
  $25 = ((($24)) + 36|0);
  HEAP32[$25>>2] = 0;
 } else {
  HEAP32[$15>>2] = $14;
  $26 = ((($3)) + 24|0);
  HEAP32[$26>>2] = $14;
  $27 = $2;
  $28 = ((($27)) + 32|0);
  HEAP32[$28>>2] = 0;
  $29 = $2;
  $30 = ((($29)) + 36|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = $2;
 $32 = ((($31)) + 8|0);
 HEAP32[$32>>2] = $3;
 $33 = $2;
 $0 = $33;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_($this,$insertThis) {
 $this = $this|0;
 $insertThis = $insertThis|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $insertThis;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = $1;
 if ($5) {
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  __ZN8tinyxml27XMLNode6UnlinkEPS0_($8,$9);
  STACKTOP = sp;return;
 } else {
  $10 = ((($6)) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 511]($11);
  STACKTOP = sp;return;
 }
}
function __ZNK8tinyxml27XMLNode17FirstChildElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $element = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $node = $5;
 while(1) {
  $6 = $node;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $node;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 511]($8)|0);
  $element = $12;
  $13 = $element;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $2;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    label = 6;
    break;
   }
   $17 = $element;
   $18 = (__ZNK8tinyxml210XMLElement4NameEv($17)|0);
   $19 = $2;
   $20 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($18,$19,2147483647)|0);
   if ($20) {
    label = 6;
    break;
   }
  }
  $22 = $node;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $node = $24;
 }
 if ((label|0) == 6) {
  $21 = $element;
  $0 = $21;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml27XMLNode18NextSiblingElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $element = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $node = $5;
 while(1) {
  $6 = $node;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 8;
   break;
  }
  $8 = $node;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 511]($8)|0);
  $element = $12;
  $13 = $element;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $2;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    label = 6;
    break;
   }
   $17 = $2;
   $18 = $element;
   $19 = (__ZNK8tinyxml210XMLElement4NameEv($18)|0);
   $20 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($17,$19,2147483647)|0);
   if ($20) {
    label = 6;
    break;
   }
  }
  $22 = $node;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $node = $24;
 }
 if ((label|0) == 6) {
  $21 = $element;
  $0 = $21;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairE($this,$p,$parentEnd) {
 $this = $this|0;
 $p = $p|0;
 $parentEnd = $parentEnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cleanup$dest = 0, $decl = 0, $ele = 0;
 var $endTag = 0, $mismatch = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $node = sp + 32|0;
 $endTag = sp + 20|0;
 $1 = $this;
 $2 = $p;
 $3 = $parentEnd;
 $7 = $1;
 L1: while(1) {
  $8 = $2;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 51;
   break;
  }
  $10 = $2;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  if (!($12)) {
   label = 51;
   break;
  }
  HEAP32[$node>>2] = 0;
  $13 = ((($7)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = (__ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE($14,$15,$node)|0);
  $2 = $16;
  $17 = HEAP32[$node>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   label = 51;
   break;
  }
  __ZN8tinyxml27StrPairC2Ev($endTag);
  $19 = HEAP32[$node>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 68|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  __THREW__ = 0;
  $24 = (invoke_iiii($22|0,($19|0),($23|0),($endTag|0))|0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   label = 11;
   break;
  }
  $2 = $24;
  $27 = $2;
  $28 = ($27|0)!=(0|0);
  $29 = HEAP32[$node>>2]|0;
  do {
   if ($28) {
    $45 = HEAP32[$29>>2]|0;
    $46 = ((($45)) + 16|0);
    $47 = HEAP32[$46>>2]|0;
    __THREW__ = 0;
    $48 = (invoke_ii($47|0,($29|0))|0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     label = 11;
     break L1;
    }
    $decl = $48;
    $51 = $decl;
    $52 = ($51|0)!=(0|0);
    if ($52) {
     $53 = ((($7)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     __THREW__ = 0;
     $55 = (invoke_ii(281,($54|0))|0);
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      label = 11;
      break L1;
     }
     if (!($55)) {
      $58 = ((($7)) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $decl;
      __THREW__ = 0;
      $61 = (invoke_ii(282,($60|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 11;
       break L1;
      }
      __THREW__ = 0;
      invoke_viiii(280,($59|0),13,($61|0),(0|0));
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       label = 11;
       break L1;
      }
      $66 = $decl;
      __THREW__ = 0;
      invoke_vi(278,($66|0));
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       label = 11;
       break L1;
      }
      $6 = 3;
      break;
     }
    }
    $69 = HEAP32[$node>>2]|0;
    $70 = HEAP32[$69>>2]|0;
    $71 = HEAP32[$70>>2]|0;
    __THREW__ = 0;
    $72 = (invoke_ii($71|0,($69|0))|0);
    $73 = __THREW__; __THREW__ = 0;
    $74 = $73&1;
    if ($74) {
     label = 11;
     break L1;
    }
    $ele = $72;
    $75 = $ele;
    $76 = ($75|0)!=(0|0);
    if ($76) {
     $77 = $ele;
     __THREW__ = 0;
     $78 = (invoke_ii(283,($77|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 11;
      break L1;
     }
     $81 = ($78|0)==(2);
     if ($81) {
      $82 = $3;
      $83 = ($82|0)!=(0|0);
      if ($83) {
       $84 = $ele;
       $85 = ((($84)) + 12|0);
       $86 = $3;
       __THREW__ = 0;
       invoke_vii(284,($85|0),($86|0));
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        label = 11;
        break L1;
       }
      }
      $89 = HEAP32[$node>>2]|0;
      $90 = ((($89)) + 44|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = HEAP32[$91>>2]|0;
      $93 = ((($92)) + 20|0);
      $94 = HEAP32[$93>>2]|0;
      __THREW__ = 0;
      invoke_vi($94|0,($91|0));
      $95 = __THREW__; __THREW__ = 0;
      $96 = $95&1;
      if ($96) {
       label = 11;
       break L1;
      }
      $97 = HEAP32[$node>>2]|0;
      __THREW__ = 0;
      invoke_vi(278,($97|0));
      $98 = __THREW__; __THREW__ = 0;
      $99 = $98&1;
      if ($99) {
       label = 11;
       break L1;
      }
      $100 = $2;
      $0 = $100;
      $6 = 1;
      break;
     }
     $mismatch = 0;
     __THREW__ = 0;
     $101 = (invoke_ii(285,($endTag|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 11;
      break L1;
     }
     $104 = $ele;
     __THREW__ = 0;
     $105 = (invoke_ii(283,($104|0))|0);
     $106 = __THREW__; __THREW__ = 0;
     $107 = $106&1;
     do {
      if ($101) {
       if ($107) {
        label = 11;
        break L1;
       }
       $108 = ($105|0)==(0);
       if ($108) {
        $mismatch = 1;
       }
      } else {
       if ($107) {
        label = 11;
        break L1;
       }
       $109 = ($105|0)!=(0);
       if ($109) {
        $mismatch = 1;
        break;
       }
       __THREW__ = 0;
       $110 = (invoke_ii(286,($endTag|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        label = 11;
        break L1;
       }
       $113 = $ele;
       __THREW__ = 0;
       $114 = (invoke_ii(287,($113|0))|0);
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       if ($116) {
        label = 11;
        break L1;
       }
       __THREW__ = 0;
       $117 = (invoke_iiii(288,($110|0),($114|0),2147483647)|0);
       $118 = __THREW__; __THREW__ = 0;
       $119 = $118&1;
       if ($119) {
        label = 11;
        break L1;
       }
       if ($117) {
        break;
       }
       $mismatch = 1;
      }
     } while(0);
     $120 = $mismatch;
     $121 = $120&1;
     if ($121) {
      $122 = ((($7)) + 4|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = $ele;
      __THREW__ = 0;
      $125 = (invoke_ii(287,($124|0))|0);
      $126 = __THREW__; __THREW__ = 0;
      $127 = $126&1;
      if ($127) {
       label = 11;
       break L1;
      }
      __THREW__ = 0;
      invoke_viiii(280,($123|0),16,($125|0),(0|0));
      $128 = __THREW__; __THREW__ = 0;
      $129 = $128&1;
      if ($129) {
       label = 11;
       break L1;
      }
      $130 = HEAP32[$node>>2]|0;
      __THREW__ = 0;
      invoke_vi(278,($130|0));
      $131 = __THREW__; __THREW__ = 0;
      $132 = $131&1;
      if ($132) {
       label = 11;
       break L1;
      }
      $6 = 3;
      break;
     }
    }
    $133 = HEAP32[$node>>2]|0;
    __THREW__ = 0;
    (invoke_iii(289,($7|0),($133|0))|0);
    $134 = __THREW__; __THREW__ = 0;
    $135 = $134&1;
    if ($135) {
     label = 11;
     break L1;
    }
    $6 = 0;
   } else {
    __THREW__ = 0;
    invoke_vi(278,($29|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 11;
     break L1;
    }
    $32 = ((($7)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    __THREW__ = 0;
    $34 = (invoke_ii(279,($33|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     label = 11;
     break L1;
    }
    if (!($34)) {
     $37 = ((($7)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     __THREW__ = 0;
     invoke_viiii(280,($38|0),17,(0|0),(0|0));
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      label = 11;
      break L1;
     }
    }
    $6 = 3;
   }
  } while(0);
  __ZN8tinyxml27StrPairD2Ev($endTag);
  $cleanup$dest = $6;
  switch ($cleanup$dest|0) {
  case 0:  {
   break;
  }
  case 3:  {
   label = 51;
   break L1;
   break;
  }
  case 1:  {
   label = 52;
   break L1;
   break;
  }
  default: {
   label = 53;
   break L1;
  }
  }
 }
 if ((label|0) == 11) {
  $41 = ___cxa_find_matching_catch()|0;
  $42 = tempRet0;
  $4 = $41;
  $5 = $42;
  __ZN8tinyxml27StrPairD2Ev($endTag);
  $43 = $4;
  $44 = $5;
  ___resumeException($43|0);
  // unreachable;
 }
 else if ((label|0) == 51) {
  $0 = 0;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 52) {
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 53) {
  // unreachable;
 }
 return (0)|0;
}
function __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($this,$error,$str1,$str2) {
 $this = $this|0;
 $error = $error|0;
 $str1 = $str1|0;
 $str2 = $str2|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $error;
 $2 = $str1;
 $3 = $str2;
 $4 = $0;
 $5 = $1;
 $6 = ((($4)) + 52|0);
 HEAP32[$6>>2] = $5;
 $7 = $2;
 $8 = ((($4)) + 60|0);
 HEAP32[$8>>2] = $7;
 $9 = $3;
 $10 = ((($4)) + 64|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairE($this,$p,$0) {
 $this = $this|0;
 $p = $p|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $p;
 $4 = $0;
 $5 = $2;
 $6 = $3;
 $start = $6;
 $7 = (__ZNK8tinyxml27XMLText5CDataEv($5)|0);
 if ($7) {
  $8 = ((($5)) + 12|0);
  $9 = $3;
  $10 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($8,$9,8991,2)|0);
  $3 = $10;
  $11 = $3;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   $13 = ((($5)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $start;
   __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($14,11,$15,0);
  }
  $16 = $3;
  $1 = $16;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 $17 = ((($5)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv($18)|0);
 $20 = $19 ? 3 : 2;
 $flags = $20;
 $21 = ((($5)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__ZNK8tinyxml211XMLDocument14WhitespaceModeEv($22)|0);
 $24 = ($23|0)==(1);
 if ($24) {
  $25 = $flags;
  $26 = $25 | 4;
  $flags = $26;
 }
 $27 = ((($5)) + 12|0);
 $28 = $3;
 $29 = $flags;
 $30 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($27,$28,8995,$29)|0);
 $3 = $30;
 $31 = $3;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $3;
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)!=(0);
  if ($35) {
   $36 = $3;
   $37 = ((($36)) + -1|0);
   $1 = $37;
   $43 = $1;
   STACKTOP = sp;return ($43|0);
  }
 }
 $38 = $3;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $40 = ((($5)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $start;
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($41,10,$42,0);
 }
 $1 = 0;
 $43 = $1;
 STACKTOP = sp;return ($43|0);
}
function __ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument7NewTextEPKc($7,$8)|0);
 $text = $9;
 $10 = $text;
 $11 = (__ZNK8tinyxml27XMLText5CDataEv($2)|0);
 __ZN8tinyxml27XMLText8SetCDataEb($10,$11);
 $12 = $text;
 STACKTOP = sp;return ($12|0);
}
function __ZN8tinyxml211XMLDocument7NewTextEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 $3 = ((($2)) + 224|0);
 $4 = (__ZN8tinyxml28MemPoolTILi52EE5AllocEv($3)|0);
 __ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE($4,$2);
 $text = $4;
 $5 = ((($2)) + 224|0);
 $6 = $text;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $text;
 $9 = $1;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($8,$9,0);
 $10 = $text;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $compare;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($3)|0);
 $text = $7;
 $8 = $text;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $10 = $text;
 $11 = (__ZNK8tinyxml27XMLNode5ValueEv($10)|0);
 $12 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $13 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($11,$12,2147483647)|0);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 511]($3,$2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 3500;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLCommentD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLCommentD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLCommentD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairE($this,$p,$0) {
 $this = $this|0;
 $p = $p|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $start = $5;
 $6 = ((($4)) + 12|0);
 $7 = $2;
 $8 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($6,$7,8997,2)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $start;
 __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($12,12,$13,0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument10NewCommentEPKc($7,$8)|0);
 $comment = $9;
 $10 = $comment;
 STACKTOP = sp;return ($10|0);
}
function __ZN8tinyxml211XMLDocument10NewCommentEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 $3 = ((($2)) + 300|0);
 $4 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($3)|0);
 __ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE($4,$2);
 $comment = $4;
 $5 = ((($2)) + 300|0);
 $6 = $comment;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $comment;
 $9 = $1;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($8,$9,0);
 $10 = $comment;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comment = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $compare;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($3)|0);
 $comment = $7;
 $8 = $comment;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $10 = $comment;
 $11 = (__ZNK8tinyxml27XMLNode5ValueEv($10)|0);
 $12 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $13 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($11,$12,2147483647)|0);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 511]($3,$2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 3580;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml214XMLDeclarationD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml214XMLDeclarationD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml214XMLDeclarationD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairE($this,$p,$0) {
 $this = $this|0;
 $p = $p|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $start = $5;
 $6 = ((($4)) + 12|0);
 $7 = $2;
 $8 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($6,$7,9001,2)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $start;
 __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($12,13,$13,0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument14NewDeclarationEPKc($7,$8)|0);
 $dec = $9;
 $10 = $dec;
 STACKTOP = sp;return ($10|0);
}
function __ZN8tinyxml211XMLDocument14NewDeclarationEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 $3 = ((($2)) + 300|0);
 $4 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($3)|0);
 __ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE($4,$2);
 $dec = $4;
 $5 = ((($2)) + 300|0);
 $6 = $dec;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $dec;
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 $11 = $1;
 $12 = $10 ? $11 : 9004;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($8,$12,0);
 $13 = $dec;
 STACKTOP = sp;return ($13|0);
}
function __ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $declaration = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $compare;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($3)|0);
 $declaration = $7;
 $8 = $declaration;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $10 = $declaration;
 $11 = (__ZNK8tinyxml27XMLNode5ValueEv($10)|0);
 $12 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $13 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($11,$12,2147483647)|0);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 511]($3,$2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 3660;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLUnknownD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLUnknownD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLUnknownD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairE($this,$p,$0) {
 $this = $this|0;
 $p = $p|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $start = $5;
 $6 = ((($4)) + 12|0);
 $7 = $2;
 $8 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($6,$7,9039,2)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $start;
 __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($12,14,$13,0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument10NewUnknownEPKc($7,$8)|0);
 $text = $9;
 $10 = $text;
 STACKTOP = sp;return ($10|0);
}
function __ZN8tinyxml211XMLDocument10NewUnknownEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $unk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 $3 = ((($2)) + 300|0);
 $4 = (__ZN8tinyxml28MemPoolTILi48EE5AllocEv($3)|0);
 __ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE($4,$2);
 $unk = $4;
 $5 = ((($2)) + 300|0);
 $6 = $unk;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $unk;
 $9 = $1;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($8,$9,0);
 $10 = $unk;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $unknown = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $compare;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($3)|0);
 $unknown = $7;
 $8 = $unknown;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $14 = 0;
  STACKTOP = sp;return ($14|0);
 }
 $10 = $unknown;
 $11 = (__ZNK8tinyxml27XMLNode5ValueEv($10)|0);
 $12 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $13 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($11,$12,2147483647)|0);
 $14 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 511]($3,$2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK8tinyxml212XMLAttribute4NameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = (__ZN8tinyxml27StrPair6GetStrEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK8tinyxml212XMLAttribute5ValueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = (__ZN8tinyxml27StrPair6GetStrEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml212XMLAttribute9ParseDeepEPcb($this,$p,$processEntities) {
 $this = $this|0;
 $p = $p|0;
 $processEntities = $processEntities|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endTag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endTag = sp + 12|0;
 $1 = $this;
 $2 = $p;
 $4 = $processEntities&1;
 $3 = $4;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = $2;
 $8 = (__ZN8tinyxml27StrPair9ParseNameEPc($6,$7)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  if ($13) {
   $14 = $2;
   $15 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($14)|0);
   $2 = $15;
   $16 = $2;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17 << 24 >> 24;
   $19 = ($18|0)!=(61);
   if ($19) {
    $0 = 0;
    $44 = $0;
    STACKTOP = sp;return ($44|0);
   }
   $20 = $2;
   $21 = ((($20)) + 1|0);
   $2 = $21;
   $22 = $2;
   $23 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($22)|0);
   $2 = $23;
   $24 = $2;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)!=(34);
   if ($27) {
    $28 = $2;
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($30|0)!=(39);
    if ($31) {
     $0 = 0;
     $44 = $0;
     STACKTOP = sp;return ($44|0);
    }
   }
   $32 = $2;
   $33 = HEAP8[$32>>0]|0;
   HEAP8[$endTag>>0] = $33;
   $34 = ((($endTag)) + 1|0);
   HEAP8[$34>>0] = 0;
   $35 = $2;
   $36 = ((($35)) + 1|0);
   $2 = $36;
   $37 = ((($5)) + 16|0);
   $38 = $2;
   $39 = $3;
   $40 = $39&1;
   $41 = $40 ? 3 : 2;
   $42 = (__ZN8tinyxml27StrPair9ParseTextEPcPKci($37,$38,$endTag,$41)|0);
   $2 = $42;
   $43 = $2;
   $0 = $43;
   $44 = $0;
   STACKTOP = sp;return ($44|0);
  }
 }
 $0 = 0;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function __ZN8tinyxml212XMLAttribute7SetNameEPKc($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = $1;
 __ZN8tinyxml27StrPair6SetStrEPKci($3,$4,0);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml212XMLAttribute13QueryIntValueEPi($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZNK8tinyxml212XMLAttribute5ValueEv($3)|0);
 $5 = $2;
 $6 = (__ZN8tinyxml27XMLUtil5ToIntEPKcPi($4,$5)|0);
 if ($6) {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  $0 = 2;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml212XMLAttribute16QueryDoubleValueEPd($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = (__ZNK8tinyxml212XMLAttribute5ValueEv($3)|0);
 $5 = $2;
 $6 = (__ZN8tinyxml27XMLUtil8ToDoubleEPKcPd($4,$5)|0);
 if ($6) {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  $0 = 2;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN8tinyxml212XMLAttribute12SetAttributeEPKc($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = $1;
 __ZN8tinyxml27StrPair6SetStrEPKci($3,$4,0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml212XMLAttribute12SetAttributeEi($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLUtil5ToStrEiPci($3,$buf,200);
 $4 = ((($2)) + 16|0);
 __ZN8tinyxml27StrPair6SetStrEPKci($4,$buf,0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml212XMLAttribute12SetAttributeEd($this,$v) {
 $this = $this|0;
 $v = +$v;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLUtil5ToStrEdPci($3,$buf,200);
 $4 = ((($2)) + 16|0);
 __ZN8tinyxml27StrPair6SetStrEPKci($4,$buf,0);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 3740;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 48|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 52|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLElementD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3740;
 HEAP32[$3>>2] = $4;
 while(1) {
  $5 = ((($3)) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = ((($3)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $next = $11;
  $12 = ((($3)) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  __THREW__ = 0;
  invoke_vi(290,($13|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   label = 5;
   break;
  }
  $16 = $next;
  $17 = ((($3)) + 52|0);
  HEAP32[$17>>2] = $16;
 }
 if ((label|0) == 5) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  $1 = $18;
  $2 = $19;
  __ZN8tinyxml27XMLNodeD2Ev($3);
  $20 = $1;
  ___clang_call_terminate($20);
  // unreachable;
 }
 else if ((label|0) == 6) {
  __ZN8tinyxml27XMLNodeD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE($attribute) {
 $attribute = $attribute|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $attribute;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $pool = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 511]($6);
 $9 = $pool;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 FUNCTION_TABLE_vii[$12 & 511]($9,$13);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLElementD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLElementD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml210XMLElement13FindAttributeEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $1;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $a = $5;
 while(1) {
  $6 = $a;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $a;
  $9 = (__ZNK8tinyxml212XMLAttribute4NameEv($8)|0);
  $10 = $2;
  $11 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($9,$10,2147483647)|0);
  $12 = $a;
  if ($11) {
   label = 4;
   break;
  }
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $a = $14;
 }
 if ((label|0) == 4) {
  $0 = $12;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml210XMLElement9AttributeEPKcS2_($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $value;
 $4 = $1;
 $5 = $2;
 $6 = (__ZNK8tinyxml210XMLElement13FindAttributeEPKc($4,$5)|0);
 $a = $6;
 $7 = $a;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $a;
  $12 = (__ZNK8tinyxml212XMLAttribute5ValueEv($11)|0);
  $13 = $3;
  $14 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($12,$13,2147483647)|0);
  if (!($14)) {
   $0 = 0;
   $17 = $0;
   STACKTOP = sp;return ($17|0);
  }
 }
 $15 = $a;
 $16 = (__ZNK8tinyxml212XMLAttribute5ValueEv($15)|0);
 $0 = $16;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function __ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $attrib = 0, $last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $last = 0;
 $attrib = 0;
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $attrib = $4;
 while(1) {
  $5 = $attrib;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $attrib;
  $8 = (__ZNK8tinyxml212XMLAttribute4NameEv($7)|0);
  $9 = $1;
  $10 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($8,$9,2147483647)|0);
  if ($10) {
   break;
  }
  $11 = $attrib;
  $last = $11;
  $12 = $attrib;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $attrib = $14;
 }
 $15 = $attrib;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $40 = $attrib;
  STACKTOP = sp;return ($40|0);
 }
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 148|0);
 $20 = (__ZN8tinyxml28MemPoolTILi36EE5AllocEv($19)|0);
 __ZN8tinyxml212XMLAttributeC2Ev($20);
 $attrib = $20;
 $21 = ((($2)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 148|0);
 $24 = $attrib;
 $25 = ((($24)) + 32|0);
 HEAP32[$25>>2] = $23;
 $26 = $last;
 $27 = ($26|0)!=(0|0);
 $28 = $attrib;
 if ($27) {
  $29 = $last;
  $30 = ((($29)) + 28|0);
  HEAP32[$30>>2] = $28;
 } else {
  $31 = ((($2)) + 52|0);
  HEAP32[$31>>2] = $28;
 }
 $32 = $attrib;
 $33 = $1;
 __ZN8tinyxml212XMLAttribute7SetNameEPKc($32,$33);
 $34 = $attrib;
 $35 = ((($34)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vi[$39 & 511]($36);
 $40 = $attrib;
 STACKTOP = sp;return ($40|0);
}
function __ZN8tinyxml210XMLElement15ParseAttributesEPc($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $attrib = 0, $prevAttribute = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $1;
 $4 = $2;
 $start = $4;
 $prevAttribute = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($7)|0);
  $2 = $8;
  $9 = $2;
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)!=(0);
  if (!($11)) {
   label = 4;
   break;
  }
  $16 = $2;
  $17 = HEAP8[$16>>0]|0;
  $18 = (__ZN8tinyxml27XMLUtil15IsNameStartCharEh($17)|0);
  if (!($18)) {
   label = 13;
   break;
  }
  $19 = ((($3)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 148|0);
  $22 = (__ZN8tinyxml28MemPoolTILi36EE5AllocEv($21)|0);
  __ZN8tinyxml212XMLAttributeC2Ev($22);
  $attrib = $22;
  $23 = ((($3)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 148|0);
  $26 = $attrib;
  $27 = ((($26)) + 32|0);
  HEAP32[$27>>2] = $25;
  $28 = $attrib;
  $29 = ((($28)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vi[$33 & 511]($30);
  $34 = $attrib;
  $35 = $2;
  $36 = ((($3)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv($37)|0);
  $39 = (__ZN8tinyxml212XMLAttribute9ParseDeepEPcb($34,$35,$38)|0);
  $2 = $39;
  $40 = $2;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   label = 8;
   break;
  }
  $42 = $attrib;
  $43 = (__ZNK8tinyxml212XMLAttribute4NameEv($42)|0);
  $44 = (__ZNK8tinyxml210XMLElement9AttributeEPKcS2_($3,$43,0)|0);
  $45 = ($44|0)!=(0|0);
  if ($45) {
   label = 8;
   break;
  }
  $51 = $prevAttribute;
  $52 = ($51|0)!=(0|0);
  $53 = $attrib;
  if ($52) {
   $54 = $prevAttribute;
   $55 = ((($54)) + 28|0);
   HEAP32[$55>>2] = $53;
  } else {
   $56 = ((($3)) + 52|0);
   HEAP32[$56>>2] = $53;
  }
  $57 = $attrib;
  $prevAttribute = $57;
 }
 do {
  if ((label|0) == 4) {
   $12 = ((($3)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $start;
   $15 = (__ZNK8tinyxml210XMLElement4NameEv($3)|0);
   __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($13,7,$14,$15);
   $0 = 0;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
  else if ((label|0) == 8) {
   $46 = $attrib;
   __ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE($46);
   $47 = ((($3)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $start;
   $50 = $2;
   __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($48,8,$49,$50);
   $0 = 0;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
  else if ((label|0) == 13) {
   $58 = $2;
   $59 = HEAP8[$58>>0]|0;
   $60 = $59 << 24 >> 24;
   $61 = ($60|0)==(62);
   $62 = $2;
   if ($61) {
    $63 = ((($62)) + 1|0);
    $2 = $63;
    break;
   }
   $64 = HEAP8[$62>>0]|0;
   $65 = $64 << 24 >> 24;
   $66 = ($65|0)==(47);
   if ($66) {
    $67 = $2;
    $68 = ((($67)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $71 = ($70|0)==(62);
    if ($71) {
     $72 = ((($3)) + 48|0);
     HEAP32[$72>>2] = 1;
     $73 = $2;
     $74 = ((($73)) + 2|0);
     $0 = $74;
     $80 = $0;
     STACKTOP = sp;return ($80|0);
    }
   }
   $75 = ((($3)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $start;
   $78 = $2;
   __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($76,7,$77,$78);
   $0 = 0;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
 } while(0);
 $79 = $2;
 $0 = $79;
 $80 = $0;
 STACKTOP = sp;return ($80|0);
}
function __ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairE($this,$p,$strPair) {
 $this = $this|0;
 $p = $p|0;
 $strPair = $strPair|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $strPair;
 $4 = $1;
 $5 = $2;
 $6 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($5)|0);
 $2 = $6;
 $7 = $2;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(47);
 if ($10) {
  $11 = ((($4)) + 48|0);
  HEAP32[$11>>2] = 2;
  $12 = $2;
  $13 = ((($12)) + 1|0);
  $2 = $13;
 }
 $14 = ((($4)) + 12|0);
 $15 = $2;
 $16 = (__ZN8tinyxml27StrPair9ParseNameEPc($14,$15)|0);
 $2 = $16;
 $17 = ((($4)) + 12|0);
 $18 = (__ZNK8tinyxml27StrPair5EmptyEv($17)|0);
 if ($18) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $19 = $2;
 $20 = (__ZN8tinyxml210XMLElement15ParseAttributesEPc($4,$19)|0);
 $2 = $20;
 $21 = $2;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $2;
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=(0);
  if ($25) {
   $26 = ((($4)) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)!=(0);
   if (!($28)) {
    $30 = $2;
    $31 = $3;
    $32 = (__ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairE($4,$30,$31)|0);
    $2 = $32;
    $33 = $2;
    $0 = $33;
    $34 = $0;
    STACKTOP = sp;return ($34|0);
   }
  }
 }
 $29 = $2;
 $0 = $29;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $element = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($2)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 $8 = (__ZNK8tinyxml27XMLNode5ValueEv($2)|0);
 $9 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($7,$8)|0);
 $element = $9;
 $10 = (__ZNK8tinyxml210XMLElement14FirstAttributeEv($2)|0);
 $a = $10;
 while(1) {
  $11 = $a;
  $12 = ($11|0)!=(0|0);
  $13 = $element;
  if (!($12)) {
   break;
  }
  $14 = $a;
  $15 = (__ZNK8tinyxml212XMLAttribute4NameEv($14)|0);
  $16 = $a;
  $17 = (__ZNK8tinyxml212XMLAttribute5ValueEv($16)|0);
  __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($13,$15,$17);
  $18 = $a;
  $19 = (__ZNK8tinyxml212XMLAttribute4NextEv($18)|0);
  $a = $19;
 }
 STACKTOP = sp;return ($13|0);
}
function __ZN8tinyxml211XMLDocument10NewElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ele = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = ((($2)) + 72|0);
 $4 = (__ZN8tinyxml28MemPoolTILi56EE5AllocEv($3)|0);
 __ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE($4,$2);
 $ele = $4;
 $5 = ((($2)) + 72|0);
 $6 = $ele;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $5;
 $8 = $ele;
 $9 = $1;
 __ZN8tinyxml210XMLElement7SetNameEPKcb($8,$9,0);
 $10 = $ele;
 STACKTOP = sp;return ($10|0);
}
function __ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE($this,$compare) {
 $this = $this|0;
 $compare = $compare|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $a = 0, $b = 0, $or$cond = 0, $other = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 20|0;
 $1 = $this;
 $2 = $compare;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
 $other = $8;
 $9 = $other;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $other;
  $12 = (__ZNK8tinyxml210XMLElement4NameEv($11)|0);
  $13 = (__ZNK8tinyxml210XMLElement4NameEv($3)|0);
  $14 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($12,$13,2147483647)|0);
  if ($14) {
   $15 = (__ZNK8tinyxml210XMLElement14FirstAttributeEv($3)|0);
   $a = $15;
   $16 = $other;
   $17 = (__ZNK8tinyxml210XMLElement14FirstAttributeEv($16)|0);
   $b = $17;
   while(1) {
    $18 = $a;
    $19 = ($18|0)!=(0|0);
    $20 = $b;
    $21 = ($20|0)!=(0|0);
    $22 = $19 ? $21 : 0;
    $23 = $a;
    if (!($22)) {
     break;
    }
    $24 = (__ZNK8tinyxml212XMLAttribute5ValueEv($23)|0);
    $25 = $b;
    $26 = (__ZNK8tinyxml212XMLAttribute5ValueEv($25)|0);
    $27 = (__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($24,$26,2147483647)|0);
    if (!($27)) {
     label = 6;
     break;
    }
    $28 = $a;
    $29 = (__ZNK8tinyxml212XMLAttribute4NextEv($28)|0);
    $a = $29;
    $30 = $b;
    $31 = (__ZNK8tinyxml212XMLAttribute4NextEv($30)|0);
    $b = $31;
   }
   if ((label|0) == 6) {
    $$expand_i1_val = 0;
    HEAP8[$0>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $35 = $$pre_trunc&1;
    STACKTOP = sp;return ($35|0);
   }
   $32 = ($23|0)!=(0|0);
   $33 = $b;
   $34 = ($33|0)!=(0|0);
   $or$cond = $32 | $34;
   if ($or$cond) {
    $$expand_i1_val3 = 0;
    HEAP8[$0>>0] = $$expand_i1_val3;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $35 = $$pre_trunc&1;
    STACKTOP = sp;return ($35|0);
   } else {
    $$expand_i1_val5 = 1;
    HEAP8[$0>>0] = $$expand_i1_val5;
    $$pre_trunc = HEAP8[$0>>0]|0;
    $35 = $$pre_trunc&1;
    STACKTOP = sp;return ($35|0);
   }
  }
 }
 $$expand_i1_val7 = 0;
 HEAP8[$0>>0] = $$expand_i1_val7;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $35 = $$pre_trunc&1;
 STACKTOP = sp;return ($35|0);
}
function __ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE($this,$visitor) {
 $this = $this|0;
 $visitor = $visitor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $visitor;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$6 & 511]($3,$2,$8)|0);
 L1: do {
  if ($9) {
   $10 = (__ZNK8tinyxml27XMLNode10FirstChildEv($2)|0);
   $node = $10;
   while(1) {
    $11 = $node;
    $12 = ($11|0)!=(0|0);
    if (!($12)) {
     break L1;
    }
    $13 = $node;
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 56|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $1;
    $18 = (FUNCTION_TABLE_iii[$16 & 511]($13,$17)|0);
    if (!($18)) {
     break L1;
    }
    $19 = $node;
    $20 = (__ZNK8tinyxml27XMLNode11NextSiblingEv($19)|0);
    $node = $20;
   }
  }
 } while(0);
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_iii[$24 & 511]($21,$2)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($this,$processEntities,$whitespace) {
 $this = $this|0;
 $processEntities = $processEntities|0;
 $whitespace = $whitespace|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $5 = $processEntities&1;
 $1 = $5;
 $2 = $whitespace;
 $6 = $0;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($6,0);
 $7 = 3820;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 48|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($6)) + 49|0);
 $10 = $1;
 $11 = $10&1;
 $12 = $11&1;
 HEAP8[$9>>0] = $12;
 $13 = ((($6)) + 52|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($6)) + 56|0);
 $15 = $2;
 HEAP32[$14>>2] = $15;
 $16 = ((($6)) + 60|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 64|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($6)) + 68|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($6)) + 72|0);
 __THREW__ = 0;
 invoke_vi(291,($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $3 = $32;
  $4 = $33;
  __ZN8tinyxml27XMLNodeD2Ev($6);
  $40 = $3;
  $41 = $4;
  ___resumeException($40|0);
  // unreachable;
 }
 $22 = ((($6)) + 148|0);
 __THREW__ = 0;
 invoke_vi(292,($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $3 = $34;
  $4 = $35;
 } else {
  $25 = ((($6)) + 224|0);
  __THREW__ = 0;
  invoke_vi(293,($25|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  do {
   if ($27) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $3 = $36;
    $4 = $37;
   } else {
    $28 = ((($6)) + 300|0);
    __THREW__ = 0;
    invoke_vi(294,($28|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     $38 = ___cxa_find_matching_catch()|0;
     $39 = tempRet0;
     $3 = $38;
     $4 = $39;
     __ZN8tinyxml28MemPoolTILi52EED2Ev($25);
     break;
    } else {
     $31 = ((($6)) + 4|0);
     HEAP32[$31>>2] = $6;
     STACKTOP = sp;return;
    }
   }
  } while(0);
  __ZN8tinyxml28MemPoolTILi36EED2Ev($22);
 }
 __ZN8tinyxml28MemPoolTILi56EED2Ev($19);
 __ZN8tinyxml27XMLNodeD2Ev($6);
 $40 = $3;
 $41 = $4;
 ___resumeException($40|0);
 // unreachable;
}
function __ZN8tinyxml211XMLDocumentD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 3820;
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 invoke_vi(295,($3|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 300|0);
  __ZN8tinyxml28MemPoolTILi48EED2Ev($13);
  $14 = ((($3)) + 224|0);
  __ZN8tinyxml28MemPoolTILi52EED2Ev($14);
  $15 = ((($3)) + 148|0);
  __ZN8tinyxml28MemPoolTILi36EED2Ev($15);
  $16 = ((($3)) + 72|0);
  __ZN8tinyxml28MemPoolTILi56EED2Ev($16);
  __ZN8tinyxml27XMLNodeD2Ev($3);
  $17 = $1;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  $7 = ((($3)) + 300|0);
  __ZN8tinyxml28MemPoolTILi48EED2Ev($7);
  $8 = ((($3)) + 224|0);
  __ZN8tinyxml28MemPoolTILi52EED2Ev($8);
  $9 = ((($3)) + 148|0);
  __ZN8tinyxml28MemPoolTILi36EED2Ev($9);
  $10 = ((($3)) + 72|0);
  __ZN8tinyxml28MemPoolTILi56EED2Ev($10);
  __ZN8tinyxml27XMLNodeD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml211XMLDocument5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNode14DeleteChildrenEv($1);
 $2 = ((($1)) + 52|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 60|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 64|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = ((($1)) + 68|0);
  HEAP32[$8>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdaPv($6);
 $8 = ((($1)) + 68|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml211XMLDocumentD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml211XMLDocumentD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml211XMLDocument5ParseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $p = $3;
 $4 = $p;
 $5 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($4)|0);
 $p = $5;
 $6 = $p;
 $7 = ((($1)) + 48|0);
 $8 = (__ZN8tinyxml27XMLUtil7ReadBOMEPKcPb($6,$7)|0);
 $p = $8;
 $9 = $p;
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)!=(0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = ((($12)) + 68|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $p;
  (FUNCTION_TABLE_iiii[$14 & 511]($1,$15,0)|0);
  STACKTOP = sp;return;
 } else {
  __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($1,15,0,0);
  STACKTOP = sp;return;
 }
}
function __ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE($this,$streamer) {
 $this = $this|0;
 $streamer = $streamer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $stdoutStreamer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $stdoutStreamer = sp + 8|0;
 $0 = $this;
 $1 = $streamer;
 $4 = $0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$4>>2]|0;
  $8 = ((($7)) + 56|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  (FUNCTION_TABLE_iii[$9 & 511]($4,$10)|0);
  STACKTOP = sp;return;
 }
 $11 = HEAP32[6452>>2]|0;
 __ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi($stdoutStreamer,$11,0,0);
 $12 = HEAP32[$4>>2]|0;
 $13 = ((($12)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 __THREW__ = 0;
 (invoke_iii($14|0,($4|0),($stdoutStreamer|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $2 = $17;
  $3 = $18;
  __ZN8tinyxml210XMLPrinterD2Ev($stdoutStreamer);
  $19 = $2;
  $20 = $3;
  ___resumeException($19|0);
  // unreachable;
 }
 __ZN8tinyxml210XMLPrinterD2Ev($stdoutStreamer);
 STACKTOP = sp;return;
}
function __ZN8tinyxml211XMLDocument5ParseEPKcj($this,$p,$len) {
 $this = $this|0;
 $p = $p|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $p;
 $3 = $len;
 $4 = $1;
 __ZN8tinyxml211XMLDocument5ClearEv($4);
 $5 = $3;
 $6 = ($5|0)!=(0);
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $or$cond = $6 & $8;
 if ($or$cond) {
  $9 = $2;
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)!=(0);
  if ($11) {
   $14 = $3;
   $15 = ($14|0)==(-1);
   if ($15) {
    $16 = $2;
    $17 = (_strlen($16)|0);
    $3 = $17;
   }
   $18 = $3;
   $19 = (($18) + 1)|0;
   $20 = (__Znaj($19)|0);
   $21 = ((($4)) + 68|0);
   HEAP32[$21>>2] = $20;
   $22 = ((($4)) + 68|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $2;
   $25 = $3;
   _memcpy(($23|0),($24|0),($25|0))|0;
   $26 = $3;
   $27 = ((($4)) + 68|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($26)|0);
   HEAP8[$29>>0] = 0;
   __ZN8tinyxml211XMLDocument5ParseEv($4);
   $30 = (__ZNK8tinyxml211XMLDocument5ErrorEv($4)|0);
   if ($30) {
    __ZN8tinyxml27XMLNode14DeleteChildrenEv($4);
    $31 = ((($4)) + 72|0);
    __ZN8tinyxml28MemPoolTILi56EE5ClearEv($31);
    $32 = ((($4)) + 148|0);
    __ZN8tinyxml28MemPoolTILi36EE5ClearEv($32);
    $33 = ((($4)) + 224|0);
    __ZN8tinyxml28MemPoolTILi52EE5ClearEv($33);
    $34 = ((($4)) + 300|0);
    __ZN8tinyxml28MemPoolTILi48EE5ClearEv($34);
   }
   $35 = ((($4)) + 52|0);
   $36 = HEAP32[$35>>2]|0;
   $0 = $36;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_($4,15,0,0);
 $12 = ((($4)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $0 = $13;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function __ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi($this,$file,$compact,$depth) {
 $this = $this|0;
 $file = $file|0;
 $compact = $compact|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $entityValue = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $file;
 $6 = $compact&1;
 $2 = $6;
 $3 = $depth;
 $7 = $0;
 __ZN8tinyxml210XMLVisitorC2Ev($7);
 $8 = 3900;
 HEAP32[$7>>2] = $8;
 $9 = ((($7)) + 4|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($7)) + 8|0);
 __THREW__ = 0;
 invoke_vi(296,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $4 = $37;
  $5 = $38;
  __ZN8tinyxml210XMLVisitorD2Ev($7);
  $64 = $4;
  $65 = $5;
  ___resumeException($64|0);
  // unreachable;
 }
 $13 = ((($7)) + 60|0);
 HEAP8[$13>>0] = 1;
 $14 = ((($7)) + 64|0);
 $15 = $1;
 HEAP32[$14>>2] = $15;
 $16 = ((($7)) + 68|0);
 $17 = $3;
 HEAP32[$16>>2] = $17;
 $18 = ((($7)) + 72|0);
 HEAP32[$18>>2] = -1;
 $19 = ((($7)) + 76|0);
 HEAP8[$19>>0] = 1;
 $20 = ((($7)) + 77|0);
 $21 = $2;
 $22 = $21&1;
 $23 = $22&1;
 HEAP8[$20>>0] = $23;
 $24 = ((($7)) + 208|0);
 __THREW__ = 0;
 invoke_vi(297,($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 do {
  if ($26) {
   $39 = ___cxa_find_matching_catch()|0;
   $40 = tempRet0;
   $4 = $39;
   $5 = $40;
  } else {
   $i = 0;
   while(1) {
    $27 = $i;
    $28 = ($27|0)<(64);
    if (!($28)) {
     break;
    }
    $29 = $i;
    $30 = ((($7)) + 78|0);
    $31 = (($30) + ($29)|0);
    HEAP8[$31>>0] = 0;
    $32 = $i;
    $33 = ((($7)) + 142|0);
    $34 = (($33) + ($32)|0);
    HEAP8[$34>>0] = 0;
    $35 = $i;
    $36 = (($35) + 1)|0;
    $i = $36;
   }
   $i1 = 0;
   while(1) {
    $41 = $i1;
    $42 = ($41|0)<(5);
    if (!($42)) {
     break;
    }
    $43 = $i1;
    $44 = (4032 + (($43*12)|0)|0);
    $45 = ((($44)) + 8|0);
    $46 = HEAP8[$45>>0]|0;
    $entityValue = $46;
    $47 = $entityValue;
    $48 = $47&255;
    $49 = ((($7)) + 78|0);
    $50 = (($49) + ($48)|0);
    HEAP8[$50>>0] = 1;
    $51 = $i1;
    $52 = (($51) + 1)|0;
    $i1 = $52;
   }
   $53 = ((($7)) + 142|0);
   $54 = ((($53)) + 38|0);
   HEAP8[$54>>0] = 1;
   $55 = ((($7)) + 142|0);
   $56 = ((($55)) + 60|0);
   HEAP8[$56>>0] = 1;
   $57 = ((($7)) + 142|0);
   $58 = ((($57)) + 62|0);
   HEAP8[$58>>0] = 1;
   $59 = ((($7)) + 208|0);
   __THREW__ = 0;
   invoke_vii(298,($59|0),0);
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   if ($61) {
    $62 = ___cxa_find_matching_catch()|0;
    $63 = tempRet0;
    $4 = $62;
    $5 = $63;
    __ZN8tinyxml28DynArrayIcLi20EED2Ev($24);
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZN8tinyxml28DynArrayIPKcLi10EED2Ev($10);
 __ZN8tinyxml210XMLVisitorD2Ev($7);
 $64 = $4;
 $65 = $5;
 ___resumeException($64|0);
 // unreachable;
}
function __ZN8tinyxml210XMLPrinter5PrintEPKcz($this,$format,$varargs) {
 $this = $this|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0;
 var $p = 0, $va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $va = sp + 8|0;
 $0 = $this;
 $1 = $format;
 $2 = $0;
 HEAP32[$va>>2] = $varargs;
 $3 = ((($2)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($2)) + 64|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  (_vfprintf($7,$8,$va)|0);
  STACKTOP = sp;return;
 } else {
  $9 = $1;
  $10 = (__ZL15TIXML_VSCPRINTFPKcPi($9,$va)|0);
  $len = $10;
  HEAP32[$va>>2] = $varargs;
  $11 = ((($2)) + 208|0);
  $12 = $len;
  $13 = (__ZN8tinyxml28DynArrayIcLi20EE7PushArrEi($11,$12)|0);
  $14 = ((($13)) + -1|0);
  $p = $14;
  $15 = $p;
  $16 = $len;
  $17 = (($16) + 1)|0;
  $18 = $1;
  (_vsnprintf($15,$17,$18,$va)|0);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml210XMLPrinter10PrintSpaceEi($this,$depth) {
 $this = $this|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $depth;
 $2 = $0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,9044,$vararg_buffer);
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter11PrintStringEPKcb($this,$p,$restricted) {
 $this = $this|0;
 $p = $p|0;
 $restricted = $restricted|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $delta = 0, $entityPatternPrinted = 0, $flag = 0, $i = 0, $q = 0;
 var $toPrint = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $p;
 $3 = $restricted&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $q = $5;
 $6 = ((($4)) + 76|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 L1: do {
  if ($8) {
   $9 = $2;
   $10 = $9&1;
   $11 = ((($4)) + 142|0);
   $12 = ((($4)) + 78|0);
   $13 = $10 ? $11 : $12;
   $flag = $13;
   while(1) {
    $14 = $q;
    $15 = HEAP8[$14>>0]|0;
    $16 = ($15<<24>>24)!=(0);
    if (!($16)) {
     break L1;
    }
    $17 = $q;
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 << 24 >> 24;
    $20 = ($19|0)>(0);
    if ($20) {
     $21 = $q;
     $22 = HEAP8[$21>>0]|0;
     $23 = $22 << 24 >> 24;
     $24 = ($23|0)<(64);
     if ($24) {
      $25 = $q;
      $26 = HEAP8[$25>>0]|0;
      $27 = $26&255;
      $28 = $flag;
      $29 = (($28) + ($27)|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30&1;
      if ($31) {
       while(1) {
        $32 = $1;
        $33 = $q;
        $34 = ($32>>>0)<($33>>>0);
        if (!($34)) {
         break;
        }
        $35 = $q;
        $36 = $1;
        $37 = $35;
        $38 = $36;
        $39 = (($37) - ($38))|0;
        $delta = $39;
        $40 = $delta;
        $41 = (2147483647)<($40>>>0);
        $42 = $delta;
        $43 = $41 ? 2147483647 : $42;
        $toPrint = $43;
        $44 = $toPrint;
        $45 = $1;
        HEAP32[$vararg_buffer>>2] = $44;
        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $45;
        __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,9049,$vararg_buffer);
        $46 = $toPrint;
        $47 = $1;
        $48 = (($47) + ($46)|0);
        $1 = $48;
       }
       $entityPatternPrinted = 0;
       $i = 0;
       while(1) {
        $49 = $i;
        $50 = ($49|0)<(5);
        if (!($50)) {
         break;
        }
        $51 = $i;
        $52 = (4032 + (($51*12)|0)|0);
        $53 = ((($52)) + 8|0);
        $54 = HEAP8[$53>>0]|0;
        $55 = $54 << 24 >> 24;
        $56 = $q;
        $57 = HEAP8[$56>>0]|0;
        $58 = $57 << 24 >> 24;
        $59 = ($55|0)==($58|0);
        $60 = $i;
        if ($59) {
         label = 12;
         break;
        }
        $63 = (($60) + 1)|0;
        $i = $63;
       }
       if ((label|0) == 12) {
        label = 0;
        $61 = (4032 + (($60*12)|0)|0);
        $62 = HEAP32[$61>>2]|0;
        HEAP32[$vararg_buffer2>>2] = $62;
        __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,9054,$vararg_buffer2);
        $entityPatternPrinted = 1;
       }
       $64 = $1;
       $65 = ((($64)) + 1|0);
       $1 = $65;
      }
     }
    }
    $66 = $q;
    $67 = ((($66)) + 1|0);
    $q = $67;
   }
  }
 } while(0);
 $68 = ((($4)) + 76|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 if ($70) {
  $71 = $1;
  $72 = $q;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   STACKTOP = sp;return;
  }
 }
 $74 = $1;
 HEAP32[$vararg_buffer5>>2] = $74;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,9041,$vararg_buffer5);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter10PushHeaderEbb($this,$writeBOM,$writeDec) {
 $this = $this|0;
 $writeBOM = $writeBOM|0;
 $writeDec = $writeDec|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $3 = $writeBOM&1;
 $1 = $3;
 $4 = $writeDec&1;
 $2 = $4;
 $5 = $0;
 $6 = $1;
 $7 = $6&1;
 if ($7) {
  HEAP32[$vararg_buffer>>2] = 9059;
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($5,9041,$vararg_buffer);
 }
 $8 = $2;
 $9 = $8&1;
 if (!($9)) {
  STACKTOP = sp;return;
 }
 __ZN8tinyxml210XMLPrinter15PushDeclarationEPKc($5,9063);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter15PushDeclarationEPKc($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($2);
 $3 = ((($2)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = ((($2)) + 60|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&1;
  if (!($8)) {
   $9 = ((($2)) + 77|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   if (!($11)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,9081,$vararg_buffer);
    $12 = HEAP32[$2>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($2)) + 68|0);
    $16 = HEAP32[$15>>2]|0;
    FUNCTION_TABLE_vii[$14 & 511]($2,$16);
   }
  }
 }
 $17 = ((($2)) + 60|0);
 HEAP8[$17>>0] = 0;
 $18 = $1;
 HEAP32[$vararg_buffer1>>2] = $18;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,9083,$vararg_buffer1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter11OpenElementEPKcb($this,$name,$compactMode) {
 $this = $this|0;
 $name = $name|0;
 $compactMode = $compactMode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $name;
 $3 = $compactMode&1;
 $2 = $3;
 $4 = $0;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($4);
 $5 = ((($4)) + 8|0);
 $6 = $1;
 __ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_($5,$6);
 $7 = ((($4)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 if ($9) {
  $10 = ((($4)) + 60|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&1;
  if (!($12)) {
   $13 = $2;
   $14 = $13&1;
   if (!($14)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,9081,$vararg_buffer);
   }
  }
 }
 $15 = $2;
 $16 = $15&1;
 if (!($16)) {
  $17 = HEAP32[$4>>2]|0;
  $18 = ((($17)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($4)) + 68|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$19 & 511]($4,$21);
 }
 $22 = $1;
 HEAP32[$vararg_buffer1>>2] = $22;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,9090,$vararg_buffer1);
 $23 = ((($4)) + 4|0);
 HEAP8[$23>>0] = 1;
 $24 = ((($4)) + 60|0);
 HEAP8[$24>>0] = 0;
 $25 = ((($4)) + 68|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$25>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 HEAP8[$5>>0] = 0;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($1,9039,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,9094,$vararg_buffer);
 $5 = $2;
 __ZN8tinyxml210XMLPrinter11PrintStringEPKcb($3,$5,0);
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,9100,$vararg_buffer1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter12CloseElementEb($this,$compactMode) {
 $this = $this|0;
 $compactMode = $compactMode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $2 = $compactMode&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($3)) + 8|0);
 $8 = (__ZN8tinyxml28DynArrayIPKcLi10EE3PopEv($7)|0);
 $name = $8;
 $9 = ((($3)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if ($11) {
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,9102,$vararg_buffer);
 } else {
  $12 = ((($3)) + 72|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)<(0);
  if ($14) {
   $15 = $1;
   $16 = $15&1;
   if (!($16)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,9081,$vararg_buffer1);
    $17 = HEAP32[$3>>2]|0;
    $18 = ((($17)) + 48|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($3)) + 68|0);
    $21 = HEAP32[$20>>2]|0;
    FUNCTION_TABLE_vii[$19 & 511]($3,$21);
   }
  }
  $22 = $name;
  HEAP32[$vararg_buffer3>>2] = $22;
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,9105,$vararg_buffer3);
 }
 $23 = ((($3)) + 72|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($3)) + 68|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($24|0)==($26|0);
 if ($27) {
  $28 = ((($3)) + 72|0);
  HEAP32[$28>>2] = -1;
 }
 $29 = ((($3)) + 68|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $34 = ((($3)) + 4|0);
  HEAP8[$34>>0] = 0;
  STACKTOP = sp;return;
 }
 $32 = $1;
 $33 = $32&1;
 if ($33) {
  $34 = ((($3)) + 4|0);
  HEAP8[$34>>0] = 0;
  STACKTOP = sp;return;
 }
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($3,9081,$vararg_buffer5);
 $34 = ((($3)) + 4|0);
 HEAP8[$34>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter8PushTextEPKcb($this,$text,$cdata) {
 $this = $this|0;
 $text = $text|0;
 $cdata = $cdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $text;
 $3 = $cdata&1;
 $2 = $3;
 $4 = $0;
 $5 = ((($4)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 1)|0;
 $8 = ((($4)) + 72|0);
 HEAP32[$8>>2] = $7;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($4);
 $9 = $2;
 $10 = $9&1;
 $11 = $1;
 if ($10) {
  HEAP32[$vararg_buffer>>2] = $11;
  __ZN8tinyxml210XMLPrinter5PrintEPKcz($4,9111,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  __ZN8tinyxml210XMLPrinter11PrintStringEPKcb($4,$11,1);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml210XMLPrinter11PushCommentEPKc($this,$comment) {
 $this = $this|0;
 $comment = $comment|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $comment;
 $2 = $0;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($2);
 $3 = ((($2)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = ((($2)) + 60|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&1;
  if (!($8)) {
   $9 = ((($2)) + 77|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   if (!($11)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,9081,$vararg_buffer);
    $12 = HEAP32[$2>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($2)) + 68|0);
    $16 = HEAP32[$15>>2]|0;
    FUNCTION_TABLE_vii[$14 & 511]($2,$16);
   }
  }
 }
 $17 = ((($2)) + 60|0);
 HEAP8[$17>>0] = 0;
 $18 = $1;
 HEAP32[$vararg_buffer1>>2] = $18;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,9126,$vararg_buffer1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter11PushUnknownEPKc($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $value;
 $2 = $0;
 __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv($2);
 $3 = ((($2)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = ((($2)) + 60|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&1;
  if (!($8)) {
   $9 = ((($2)) + 77|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   if (!($11)) {
    __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,9081,$vararg_buffer);
    $12 = HEAP32[$2>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($2)) + 68|0);
    $16 = HEAP32[$15>>2]|0;
    FUNCTION_TABLE_vii[$14 & 511]($2,$16);
   }
  }
 }
 $17 = ((($2)) + 60|0);
 HEAP8[$17>>0] = 0;
 $18 = $1;
 HEAP32[$vararg_buffer1>>2] = $18;
 __ZN8tinyxml210XMLPrinter5PrintEPKcz($2,9136,$vararg_buffer1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv($3)|0);
 $5 = ((($2)) + 76|0);
 $6 = $4&1;
 HEAP8[$5>>0] = $6;
 $7 = $1;
 $8 = (__ZNK8tinyxml211XMLDocument6HasBOMEv($7)|0);
 if (!($8)) {
  STACKTOP = sp;return 1;
 }
 __ZN8tinyxml210XMLPrinter10PushHeaderEbb($2,1,0);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE($this,$element,$attribute) {
 $this = $this|0;
 $element = $element|0;
 $attribute = $attribute|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compactMode = 0, $parentElem = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $element;
 $2 = $attribute;
 $3 = $0;
 $parentElem = 0;
 $4 = $1;
 $5 = (__ZNK8tinyxml27XMLNode6ParentEv($4)|0);
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = (__ZNK8tinyxml27XMLNode6ParentEv($7)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 511]($8)|0);
  $parentElem = $12;
 }
 $13 = $parentElem;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[$3>>2]|0;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $parentElem;
  $19 = (FUNCTION_TABLE_iii[$17 & 511]($3,$18)|0);
  $24 = $19;
 } else {
  $20 = ((($3)) + 77|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&1;
  $24 = $22;
 }
 $23 = $24&1;
 $compactMode = $23;
 $25 = $1;
 $26 = (__ZNK8tinyxml210XMLElement4NameEv($25)|0);
 $27 = $compactMode;
 $28 = $27&1;
 __ZN8tinyxml210XMLPrinter11OpenElementEPKcb($3,$26,$28);
 while(1) {
  $29 = $2;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   break;
  }
  $31 = $2;
  $32 = (__ZNK8tinyxml212XMLAttribute4NameEv($31)|0);
  $33 = $2;
  $34 = (__ZNK8tinyxml212XMLAttribute5ValueEv($33)|0);
  __ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_($3,$32,$34);
  $35 = $2;
  $36 = (__ZNK8tinyxml212XMLAttribute4NextEv($35)|0);
  $2 = $36;
 }
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE($this,$element) {
 $this = $this|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $element;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (FUNCTION_TABLE_iii[$8 & 511]($2,$9)|0);
 FUNCTION_TABLE_vii[$5 & 511]($2,$10);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE($this,$text) {
 $this = $this|0;
 $text = $text|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $text;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode5ValueEv($3)|0);
 $5 = $1;
 $6 = (__ZNK8tinyxml27XMLText5CDataEv($5)|0);
 __ZN8tinyxml210XMLPrinter8PushTextEPKcb($2,$4,$6);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE($this,$comment) {
 $this = $this|0;
 $comment = $comment|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $comment;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode5ValueEv($3)|0);
 __ZN8tinyxml210XMLPrinter11PushCommentEPKc($2,$4);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE($this,$declaration) {
 $this = $this|0;
 $declaration = $declaration|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $declaration;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode5ValueEv($3)|0);
 __ZN8tinyxml210XMLPrinter15PushDeclarationEPKc($2,$4);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE($this,$unknown) {
 $this = $this|0;
 $unknown = $unknown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $unknown;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode5ValueEv($3)|0);
 __ZN8tinyxml210XMLPrinter11PushUnknownEPKc($2,$4);
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml27StrPair3SetEPcS1_i($this,$start,$end,$flags) {
 $this = $this|0;
 $start = $start|0;
 $end = $end|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $start;
 $2 = $end;
 $3 = $flags;
 $4 = $0;
 __ZN8tinyxml27StrPair5ResetEv($4);
 $5 = $1;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = $2;
 $8 = ((($4)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = $3;
 $10 = $9 | 256;
 HEAP32[$4>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLUtil15IsNameStartCharEh($ch) {
 $ch = $ch|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 1|0;
 $1 = $ch;
 $2 = $1;
 $3 = $2&255;
 $4 = ($3|0)>=(128);
 do {
  if ($4) {
   $$expand_i1_val = 1;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $5 = $1;
   $6 = $5&255;
   $7 = (_isalpha($6)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $$expand_i1_val2 = 1;
    HEAP8[$0>>0] = $$expand_i1_val2;
    break;
   }
   $9 = $1;
   $10 = $9&255;
   $11 = ($10|0)==(58);
   if ($11) {
    $15 = 1;
   } else {
    $12 = $1;
    $13 = $12&255;
    $14 = ($13|0)==(95);
    $15 = $14;
   }
   $$expand_i1_val4 = $15&1;
   HEAP8[$0>>0] = $$expand_i1_val4;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $16 = $$pre_trunc&1;
 STACKTOP = sp;return ($16|0);
}
function __ZN8tinyxml27XMLUtil10IsNameCharEh($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ch;
 $1 = $0;
 $2 = (__ZN8tinyxml27XMLUtil15IsNameStartCharEh($1)|0);
 if ($2) {
  $13 = 1;
 } else {
  $3 = $0;
  $4 = $3&255;
  $5 = (_isdigit($4)|0);
  $6 = ($5|0)!=(0);
  if ($6) {
   $13 = 1;
  } else {
   $7 = $0;
   $8 = $7&255;
   $9 = ($8|0)==(46);
   if ($9) {
    $13 = 1;
   } else {
    $10 = $0;
    $11 = $10&255;
    $12 = ($11|0)==(45);
    $13 = $12;
   }
  }
 }
 STACKTOP = sp;return ($13|0);
}
function __ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8tinyxml27XMLUtil12IsWhiteSpaceEc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = (__ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc($1)|0);
 if ($2) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $3 = $0;
 $4 = $3&255;
 $5 = (_isspace($4)|0);
 $6 = ($5|0)!=(0);
 $7 = $6;
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i($p,$q,$nChar) {
 $p = $p|0;
 $q = $q|0;
 $nChar = $nChar|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = $p;
 $2 = $q;
 $3 = $nChar;
 $4 = $1;
 $5 = $2;
 $6 = ($4|0)==($5|0);
 if ($6) {
  $$expand_i1_val = 1;
  HEAP8[$0>>0] = $$expand_i1_val;
 } else {
  $7 = $1;
  $8 = $2;
  $9 = $3;
  $10 = (_strncmp($7,$8,$9)|0);
  $11 = ($10|0)==(0);
  $$expand_i1_val2 = $11&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $12 = $$pre_trunc&1;
 STACKTOP = sp;return ($12|0);
}
function __ZN8tinyxml28MemPoolTILi48EE5AllocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = (__Znwj(4080)|0);
  _memset(($5|0),0,4080)|0;
  $block = $5;
  $6 = ((($1)) + 4|0);
  $7 = $block;
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE4PushES4_($6,$7);
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(84);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = $block;
   $13 = (($12) + (($11*48)|0)|0);
   $14 = $i;
   $15 = $block;
   $16 = (($15) + (($14*48)|0)|0);
   HEAP32[$16>>2] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $block;
  $20 = ((($19)) + 4032|0);
  HEAP32[$20>>2] = 0;
  $21 = $block;
  $22 = ((($1)) + 56|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = ((($1)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $result = $24;
 $25 = ((($1)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 56|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($1)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($1)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)>($35|0);
 if (!($36)) {
  $40 = ((($1)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = ((($1)) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$43>>2] = $45;
  $46 = $result;
  STACKTOP = sp;return ($46|0);
 }
 $37 = ((($1)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 68|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($1)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($1)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $result;
 STACKTOP = sp;return ($46|0);
}
function __ZN8tinyxml28MemPoolTILi52EE5AllocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = (__Znwj(4056)|0);
  _memset(($5|0),0,4056)|0;
  $block = $5;
  $6 = ((($1)) + 4|0);
  $7 = $block;
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_($6,$7);
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(77);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = $block;
   $13 = (($12) + (($11*52)|0)|0);
   $14 = $i;
   $15 = $block;
   $16 = (($15) + (($14*52)|0)|0);
   HEAP32[$16>>2] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $block;
  $20 = ((($19)) + 4004|0);
  HEAP32[$20>>2] = 0;
  $21 = $block;
  $22 = ((($1)) + 56|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = ((($1)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $result = $24;
 $25 = ((($1)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 56|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($1)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($1)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)>($35|0);
 if (!($36)) {
  $40 = ((($1)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = ((($1)) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$43>>2] = $45;
  $46 = $result;
  STACKTOP = sp;return ($46|0);
 }
 $37 = ((($1)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 68|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($1)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($1)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $result;
 STACKTOP = sp;return ($46|0);
}
function __ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE($this,$doc) {
 $this = $this|0;
 $doc = $doc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $doc;
 $2 = $0;
 $3 = $1;
 __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE($2,$3);
 $4 = 3960;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 48|0);
 HEAP8[$5>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLText8SetCDataEb($this,$isCData) {
 $this = $this|0;
 $isCData = $isCData|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $isCData&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = ((($3)) + 48|0);
 $7 = $5&1;
 HEAP8[$6>>0] = $7;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi56EE5AllocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = (__Znwj(4088)|0);
  _memset(($5|0),0,4088)|0;
  $block = $5;
  $6 = ((($1)) + 4|0);
  $7 = $block;
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_($6,$7);
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(72);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = $block;
   $13 = (($12) + (($11*56)|0)|0);
   $14 = $i;
   $15 = $block;
   $16 = (($15) + (($14*56)|0)|0);
   HEAP32[$16>>2] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $block;
  $20 = ((($19)) + 4032|0);
  HEAP32[$20>>2] = 0;
  $21 = $block;
  $22 = ((($1)) + 56|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = ((($1)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $result = $24;
 $25 = ((($1)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 56|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($1)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($1)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)>($35|0);
 if (!($36)) {
  $40 = ((($1)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = ((($1)) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$43>>2] = $45;
  $46 = $result;
  STACKTOP = sp;return ($46|0);
 }
 $37 = ((($1)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 68|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($1)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($1)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $result;
 STACKTOP = sp;return ($46|0);
}
function __ZNK8tinyxml27XMLNode10FirstChildEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK8tinyxml27XMLNode11NextSiblingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml27StrPairC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27StrPair14SetInternedStrEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $2 = $0;
 __ZN8tinyxml27StrPair5ResetEv($2);
 $3 = $1;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZNK8tinyxml210XMLElement4NameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK8tinyxml27XMLNode5ValueEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK8tinyxml211XMLDocument5ErrorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK8tinyxml27XMLNode10NoChildrenEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4 ^ 1;
 STACKTOP = sp;return ($5|0);
}
function __ZNK8tinyxml210XMLElement11ClosingTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK8tinyxml27StrPair5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK8tinyxml27XMLText5CDataEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZNK8tinyxml211XMLDocument15ProcessEntitiesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 49|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZNK8tinyxml211XMLDocument14WhitespaceModeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml27XMLNode11GetDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml28MemPoolTILi36EE5AllocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $block = 0, $i = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = (__Znwj(4068)|0);
  _memset(($5|0),0,4068)|0;
  $block = $5;
  $6 = ((($1)) + 4|0);
  $7 = $block;
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE4PushES4_($6,$7);
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(112);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = $block;
   $13 = (($12) + (($11*36)|0)|0);
   $14 = $i;
   $15 = $block;
   $16 = (($15) + (($14*36)|0)|0);
   HEAP32[$16>>2] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $block;
  $20 = ((($19)) + 4032|0);
  HEAP32[$20>>2] = 0;
  $21 = $block;
  $22 = ((($1)) + 56|0);
  HEAP32[$22>>2] = $21;
 }
 $23 = ((($1)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $result = $24;
 $25 = ((($1)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 56|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($1)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($1)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 68|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)>($35|0);
 if (!($36)) {
  $40 = ((($1)) + 64|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$40>>2] = $42;
  $43 = ((($1)) + 72|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$43>>2] = $45;
  $46 = $result;
  STACKTOP = sp;return ($46|0);
 }
 $37 = ((($1)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($1)) + 68|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($1)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = ((($1)) + 72|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 $46 = $result;
 STACKTOP = sp;return ($46|0);
}
function __ZN8tinyxml212XMLAttributeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4376;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __ZN8tinyxml27StrPairC2Ev($5);
 $6 = ((($3)) + 16|0);
 __THREW__ = 0;
 invoke_vi(299,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  __ZN8tinyxml27StrPairD2Ev($5);
  $13 = $1;
  $14 = $2;
  ___resumeException($13|0);
  // unreachable;
 } else {
  $9 = ((($3)) + 28|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 32|0);
  HEAP32[$10>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNK8tinyxml210XMLElement14FirstAttributeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc($3,$4)|0);
 $a = $5;
 $6 = $a;
 $7 = $2;
 __ZN8tinyxml212XMLAttribute12SetAttributeEPKc($6,$7);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml212XMLAttribute4NextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml210XMLElement7SetNameEPKcb($this,$str,$staticMem) {
 $this = $this|0;
 $str = $str|0;
 $staticMem = $staticMem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $str;
 $3 = $staticMem&1;
 $2 = $3;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6&1;
 __ZN8tinyxml27XMLNode8SetValueEPKcb($4,$5,$7);
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi56EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8tinyxml27MemPoolC2Ev($3);
 $4 = 4232;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(300,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $1 = $13;
  $2 = $14;
  __ZN8tinyxml27MemPoolD2Ev($3);
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 } else {
  $8 = ((($3)) + 56|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 60|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 64|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($3)) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($3)) + 72|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi36EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8tinyxml27MemPoolC2Ev($3);
 $4 = 4268;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(301,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $1 = $13;
  $2 = $14;
  __ZN8tinyxml27MemPoolD2Ev($3);
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 } else {
  $8 = ((($3)) + 56|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 60|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 64|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($3)) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($3)) + 72|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi52EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8tinyxml27MemPoolC2Ev($3);
 $4 = 4304;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(302,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $1 = $13;
  $2 = $14;
  __ZN8tinyxml27MemPoolD2Ev($3);
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 } else {
  $8 = ((($3)) + 56|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 60|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 64|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($3)) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($3)) + 72|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi48EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN8tinyxml27MemPoolC2Ev($3);
 $4 = 4196;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vi(303,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $1 = $13;
  $2 = $14;
  __ZN8tinyxml27MemPoolD2Ev($3);
  $15 = $1;
  $16 = $2;
  ___resumeException($15|0);
  // unreachable;
 } else {
  $8 = ((($3)) + 56|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($3)) + 60|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($3)) + 64|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($3)) + 68|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($3)) + 72|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi52EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4304;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev($13);
  __ZN8tinyxml27MemPoolD2Ev($3);
  $14 = $1;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $10 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev($10);
  __ZN8tinyxml27MemPoolD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi36EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4268;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EED2Ev($13);
  __ZN8tinyxml27MemPoolD2Ev($3);
  $14 = $1;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $10 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EED2Ev($10);
  __ZN8tinyxml27MemPoolD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi56EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4232;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev($13);
  __ZN8tinyxml27MemPoolD2Ev($3);
  $14 = $1;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $10 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev($10);
  __ZN8tinyxml27MemPoolD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml28MemPoolTILi48EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = 4196;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 __THREW__ = 0;
 invoke_vi($7|0,($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  $1 = $11;
  $2 = $12;
  $13 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EED2Ev($13);
  __ZN8tinyxml27MemPoolD2Ev($3);
  $14 = $1;
  ___clang_call_terminate($14);
  // unreachable;
 } else {
  $10 = ((($3)) + 4|0);
  __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EED2Ev($10);
  __ZN8tinyxml27MemPoolD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml210XMLPrinterD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 3900;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 208|0);
 __ZN8tinyxml28DynArrayIcLi20EED2Ev($3);
 $4 = ((($1)) + 8|0);
 __ZN8tinyxml28DynArrayIPKcLi10EED2Ev($4);
 __ZN8tinyxml210XMLVisitorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi56EE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 4|0);
  $3 = (__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv($2)|0);
  $4 = $3 ^ 1;
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 4|0);
  $6 = (__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv($5)|0);
  $b = $6;
  $7 = $b;
  $8 = ($7|0)==(0|0);
  if ($8) {
   continue;
  }
  __ZdlPv($7);
 }
 $9 = ((($1)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 68|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 72|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi36EE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 4|0);
  $3 = (__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE5EmptyEv($2)|0);
  $4 = $3 ^ 1;
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 4|0);
  $6 = (__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE3PopEv($5)|0);
  $b = $6;
  $7 = $b;
  $8 = ($7|0)==(0|0);
  if ($8) {
   continue;
  }
  __ZdlPv($7);
 }
 $9 = ((($1)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 68|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 72|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi52EE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 4|0);
  $3 = (__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv($2)|0);
  $4 = $3 ^ 1;
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 4|0);
  $6 = (__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv($5)|0);
  $b = $6;
  $7 = $b;
  $8 = ($7|0)==(0|0);
  if ($8) {
   continue;
  }
  __ZdlPv($7);
 }
 $9 = ((($1)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 68|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 72|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi48EE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = ((($1)) + 4|0);
  $3 = (__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE5EmptyEv($2)|0);
  $4 = $3 ^ 1;
  if (!($4)) {
   break;
  }
  $5 = ((($1)) + 4|0);
  $6 = (__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE3PopEv($5)|0);
  $b = $6;
  $7 = $b;
  $8 = ($7|0)==(0|0);
  if ($8) {
   continue;
  }
  __ZdlPv($7);
 }
 $9 = ((($1)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 64|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($1)) + 68|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($1)) + 72|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLVisitorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4148;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPKcLi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIcLi20EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 24|0);
 HEAP32[$3>>2] = 20;
 $4 = ((($1)) + 28|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIcLi20EE4PushEc($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8)|0);
 HEAP8[$11>>0] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIcLi20EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPKcLi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLVisitorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZL15TIXML_VSCPRINTFPKcPi($format,$va) {
 $format = $format|0;
 $va = $va|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $format;
 $1 = $va;
 $2 = $0;
 $3 = $1;
 $4 = (_vsnprintf(0,0,$2,$3)|0);
 $len = $4;
 $5 = $len;
 STACKTOP = sp;return ($5|0);
}
function __ZN8tinyxml28DynArrayIcLi20EE7PushArrEi($this,$count) {
 $this = $this|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $count;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (($4) + ($5))|0;
 __ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi($2,$6);
 $7 = ((($2)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = (($9) + ($8)|0);
 $ret = $10;
 $11 = $1;
 $12 = ((($2)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11))|0;
 HEAP32[$12>>2] = $14;
 $15 = $ret;
 STACKTOP = sp;return ($15|0);
}
function __ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPKcLi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK8tinyxml211XMLDocument6HasBOMEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZNK8tinyxml27XMLNode6ParentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8tinyxml27XMLNode9ToElementEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLNode6ToTextEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLNode9ToCommentEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLNode10ToDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLNode13ToDeclarationEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml27XMLNode9ToUnknownEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode9ToElementEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode6ToTextEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode9ToCommentEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode10ToDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode13ToDeclarationEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml27XMLNode9ToUnknownEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (0|0);
}
function __ZN8tinyxml210XMLComment9ToCommentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml210XMLComment9ToCommentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml214XMLDeclaration13ToDeclarationEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml214XMLDeclaration13ToDeclarationEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml210XMLUnknown9ToUnknownEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml210XMLUnknown9ToUnknownEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml210XMLElement9ToElementEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml210XMLElement9ToElementEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml211XMLDocument10ToDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml211XMLDocument10ToDocumentEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return (0|0);
}
function __ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 0;
}
function __ZN8tinyxml210XMLPrinterD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLPrinterD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 77|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function __ZN8tinyxml27XMLText6ToTextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNK8tinyxml27XMLText6ToTextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN8tinyxml27XMLTextD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLNodeD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLTextD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27XMLTextD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $10 = ($9|0)<(0);
 $11 = $10 ? -1 : $9;
 $12 = (__Znaj($11)|0);
 $newMem = $12;
 $13 = $newMem;
 $14 = HEAP32[$2>>2]|0;
 $15 = ((($2)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 _memcpy(($13|0),($14|0),($17|0))|0;
 $18 = HEAP32[$2>>2]|0;
 $19 = ((($2)) + 4|0);
 $20 = ($18|0)!=($19|0);
 if ($20) {
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   __ZdaPv($21);
  }
 }
 $23 = $newMem;
 HEAP32[$2>>2] = $23;
 $24 = $newAllocated;
 $25 = ((($2)) + 24|0);
 HEAP32[$25>>2] = $24;
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLVisitorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml210XMLVisitorD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 $4 = $1;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml27MemPoolD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi48EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml28MemPoolTILi48EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml28MemPoolTILi48EE8ItemSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 48;
}
function __ZN8tinyxml28MemPoolTILi48EE4FreeEPv($this,$mem) {
 $this = $this|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mem;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($2)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $chunk = $8;
 $9 = ((($2)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $chunk;
 HEAP32[$11>>2] = $10;
 $12 = $chunk;
 $13 = ((($2)) + 56|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi48EE10SetTrackedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi56EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml28MemPoolTILi56EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 56;
}
function __ZN8tinyxml28MemPoolTILi56EE4FreeEPv($this,$mem) {
 $this = $this|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mem;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($2)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $chunk = $8;
 $9 = ((($2)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $chunk;
 HEAP32[$11>>2] = $10;
 $12 = $chunk;
 $13 = ((($2)) + 56|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi36EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml28MemPoolTILi36EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml28MemPoolTILi36EE8ItemSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 36;
}
function __ZN8tinyxml28MemPoolTILi36EE4FreeEPv($this,$mem) {
 $this = $this|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mem;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($2)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $chunk = $8;
 $9 = ((($2)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $chunk;
 HEAP32[$11>>2] = $10;
 $12 = $chunk;
 $13 = ((($2)) + 56|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi36EE10SetTrackedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = ($2|0)!=($3|0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZdaPv($5);
  }
 }
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi52EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml28MemPoolTILi52EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 52;
}
function __ZN8tinyxml28MemPoolTILi52EE4FreeEPv($this,$mem) {
 $this = $this|0;
 $mem = $mem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chunk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $mem;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($2)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $chunk = $8;
 $9 = ((($2)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $chunk;
 HEAP32[$11>>2] = $10;
 $12 = $chunk;
 $13 = ((($2)) + 56|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27MemPoolC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4340;
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27MemPoolD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml27MemPoolD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 44|0);
 HEAP32[$3>>2] = 10;
 $4 = ((($1)) + 48|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8tinyxml212XMLAttributeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4376;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZN8tinyxml27StrPairD2Ev($3);
 $4 = ((($1)) + 4|0);
 __ZN8tinyxml27StrPairD2Ev($4);
 STACKTOP = sp;return;
}
function __ZN8tinyxml212XMLAttributeD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN8tinyxml212XMLAttributeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE4PushES4_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE4PushES4_($this,$t) {
 $this = $this|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $t;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE14EnsureCapacityEi($2,$5);
 $6 = $1;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EE14EnsureCapacityEi($this,$cap) {
 $this = $this|0;
 $cap = $cap|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newAllocated = 0, $newMem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cap;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7<<1;
 $newAllocated = $8;
 $9 = $newAllocated;
 $$arith = $9<<2;
 $$overflow = ($9>>>0)>(1073741823);
 $10 = $$overflow ? -1 : $$arith;
 $11 = (__Znaj($10)|0);
 $newMem = $11;
 $12 = $newMem;
 $13 = HEAP32[$2>>2]|0;
 $14 = ((($2)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15<<2;
 _memcpy(($12|0),($13|0),($16|0))|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = ($17|0)!=($18|0);
 if ($19) {
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  if (!($21)) {
   __ZdaPv($20);
  }
 }
 $22 = $newMem;
 HEAP32[$2>>2] = $22;
 $23 = $newAllocated;
 $24 = ((($2)) + 44|0);
 HEAP32[$24>>2] = $23;
 STACKTOP = sp;return;
}
function __ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = $2 & 128;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKc($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = (__ZN8tinyxml27XMLUtil12IsWhiteSpaceEc($2)|0);
  $4 = $0;
  if (!($3)) {
   break;
  }
  $5 = ((($4)) + 1|0);
  $0 = $5;
 }
 STACKTOP = sp;return ($4|0);
}
function __Z4nxidPKc($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
 } else {
  $4 = $1;
  $5 = (__ZN2mp15Cnxid_tInstance2idEPKc(4384,$4)|0);
  $0 = $5;
 }
 $6 = $0;
 STACKTOP = sp;return ($6|0);
}
function __GLOBAL__sub_I_nxid_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init330();
 return;
}
function __ZN2mp15Cnxid_tInstance2idEPKc($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_n = 0, $it = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $7 = sp + 192|0;
 $10 = sp + 176|0;
 $17 = sp;
 $18 = sp + 144|0;
 $21 = sp + 132|0;
 $it = sp + 52|0;
 $_n = sp + 40|0;
 $41 = sp + 32|0;
 $44 = sp + 16|0;
 $39 = $this;
 $40 = $n;
 $46 = $39;
 $38 = $it;
 $47 = $40;
 $14 = $_n;
 $15 = $47;
 $48 = $14;
 $13 = $48;
 $49 = $13;
 $12 = $49;
 $50 = $12;
 $11 = $50;
 $51 = $15;
 $52 = $15;
 $53 = (__ZNSt3__111char_traitsIcE6lengthEPKc($52)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($48,$51,$53);
 $8 = $46;
 $9 = $_n;
 $54 = $8;
 $55 = $9;
 __THREW__ = 0;
 invoke_viii(304,($10|0),($54|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $104 = ___cxa_find_matching_catch()|0;
  $105 = tempRet0;
  $42 = $104;
  $43 = $105;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($_n);
  $106 = $42;
  $107 = $43;
  ___resumeException($106|0);
  // unreachable;
 }
 $4 = $41;
 $5 = $10;
 $6 = 0;
 $58 = $4;
 $59 = $5;
 $3 = $59;
 $60 = $3;
 ;HEAP32[$7>>2]=HEAP32[$60>>2]|0;
 ;HEAP8[$1>>0]=HEAP8[$7>>0]|0;HEAP8[$1+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$7+3>>0]|0;
 $0 = $58;
 $61 = $0;
 $62 = HEAP32[$1>>2]|0;
 HEAP32[$61>>2] = $62;
 $63 = ((($58)) + 4|0);
 $64 = $5;
 $65 = ((($64)) + 4|0);
 $2 = $65;
 $66 = $2;
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&1;
 $69 = $68&1;
 HEAP8[$63>>0] = $69;
 $19 = $46;
 $20 = $_n;
 $70 = $19;
 $71 = $20;
 __THREW__ = 0;
 $72 = (invoke_iii(305,($70|0),($71|0))|0);
 $73 = __THREW__; __THREW__ = 0;
 $74 = $73&1;
 if ($74) {
  $104 = ___cxa_find_matching_catch()|0;
  $105 = tempRet0;
  $42 = $104;
  $43 = $105;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($_n);
  $106 = $42;
  $107 = $43;
  ___resumeException($106|0);
  // unreachable;
 }
 HEAP32[$21>>2] = $72;
 ;HEAP8[$17>>0]=HEAP8[$21>>0]|0;HEAP8[$17+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$21+3>>0]|0;
 $16 = $18;
 $75 = $16;
 $76 = HEAP32[$17>>2]|0;
 HEAP32[$75>>2] = $76;
 $77 = HEAP32[$18>>2]|0;
 HEAP32[$44>>2] = $77;
 ;HEAP32[$it>>2]=HEAP32[$44>>2]|0;
 $22 = $it;
 $78 = $22;
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 16|0);
 $37 = $80;
 $81 = $37;
 $36 = $81;
 $82 = $36;
 $35 = $82;
 $83 = $35;
 $34 = $83;
 $84 = $34;
 $33 = $84;
 $85 = $33;
 $32 = $85;
 $86 = $32;
 $87 = HEAP8[$86>>0]|0;
 $88 = $87&255;
 $89 = $88 & 1;
 $90 = ($89|0)!=(0);
 if ($90) {
  $26 = $83;
  $91 = $26;
  $25 = $91;
  $92 = $25;
  $24 = $92;
  $93 = $24;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $102 = $95;
  $23 = $102;
  $103 = $23;
  $45 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($_n);
  STACKTOP = sp;return ($103|0);
 } else {
  $31 = $83;
  $96 = $31;
  $30 = $96;
  $97 = $30;
  $29 = $97;
  $98 = $29;
  $99 = ((($98)) + 1|0);
  $28 = $99;
  $100 = $28;
  $27 = $100;
  $101 = $27;
  $102 = $101;
  $23 = $102;
  $103 = $23;
  $45 = 1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($_n);
  STACKTOP = sp;return ($103|0);
 }
 return (0)|0;
}
function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE15__insert_uniqueERKS6_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0;
 var $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 8|0;
 $16 = sp + 314|0;
 $43 = sp;
 $46 = sp + 313|0;
 $__parent = sp + 44|0;
 $__inserted = sp + 312|0;
 $__h = sp + 24|0;
 $69 = sp + 12|0;
 $65 = $this;
 $66 = $__v;
 $70 = $65;
 $71 = $66;
 $72 = (__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESG_RKT_($70,$__parent,$71)|0);
 $__child = $72;
 $73 = $__child;
 $74 = HEAP32[$73>>2]|0;
 $__r = $74;
 HEAP8[$__inserted>>0] = 0;
 $75 = $__child;
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(0|0);
 do {
  if ($77) {
   $78 = $66;
   __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE16__construct_nodeIJRKS6_EEENS_10unique_ptrINS_11__tree_nodeIS6_PvEENS_22__tree_node_destructorINS4_ISH_EEEEEEDpOT_($__h,$70,$78);
   $79 = HEAP32[$__parent>>2]|0;
   $80 = $__child;
   $64 = $__h;
   $81 = $64;
   $63 = $81;
   $82 = $63;
   $62 = $82;
   $83 = $62;
   $84 = HEAP32[$83>>2]|0;
   __THREW__ = 0;
   invoke_viiii(306,($70|0),($79|0),($80|0),($84|0));
   $85 = __THREW__; __THREW__ = 0;
   $86 = $85&1;
   if (!($86)) {
    $29 = $__h;
    $87 = $29;
    $28 = $87;
    $88 = $28;
    $27 = $88;
    $89 = $27;
    $90 = HEAP32[$89>>2]|0;
    $__t$i = $90;
    $26 = $87;
    $91 = $26;
    $25 = $91;
    $92 = $25;
    HEAP32[$92>>2] = 0;
    $93 = $__t$i;
    $__r = $93;
    HEAP8[$__inserted>>0] = 1;
    $24 = $__h;
    $94 = $24;
    $22 = $94;
    $23 = 0;
    $95 = $22;
    $21 = $95;
    $96 = $21;
    $20 = $96;
    $97 = $20;
    $98 = HEAP32[$97>>2]|0;
    $__tmp$i$i1 = $98;
    $99 = $23;
    $3 = $95;
    $100 = $3;
    $2 = $100;
    $101 = $2;
    HEAP32[$101>>2] = $99;
    $102 = $__tmp$i$i1;
    $103 = ($102|0)!=(0|0);
    if (!($103)) {
     break;
    }
    $1 = $95;
    $104 = $1;
    $0 = $104;
    $105 = $0;
    $106 = ((($105)) + 4|0);
    $107 = $__tmp$i$i1;
    $18 = $106;
    $19 = $107;
    $108 = $18;
    $109 = ((($108)) + 4|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&1;
    if ($111) {
     $112 = HEAP32[$108>>2]|0;
     $113 = $19;
     $114 = ((($113)) + 16|0);
     $17 = $114;
     $115 = $17;
     $14 = $112;
     $15 = $115;
     $116 = $14;
     $117 = $15;
     ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
     $11 = $116;
     $12 = $117;
     $118 = $12;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($118);
    }
    $119 = $19;
    $120 = ($119|0)!=(0|0);
    if (!($120)) {
     break;
    }
    $121 = HEAP32[$108>>2]|0;
    $122 = $19;
    $8 = $121;
    $9 = $122;
    $10 = 1;
    $123 = $8;
    $124 = $9;
    $125 = $10;
    $5 = $123;
    $6 = $124;
    $7 = $125;
    $126 = $6;
    $4 = $126;
    $127 = $4;
    __ZdlPv($127);
    break;
   }
   $128 = ___cxa_find_matching_catch()|0;
   $129 = tempRet0;
   $67 = $128;
   $68 = $129;
   $54 = $__h;
   $130 = $54;
   $52 = $130;
   $53 = 0;
   $131 = $52;
   $51 = $131;
   $132 = $51;
   $50 = $132;
   $133 = $50;
   $134 = HEAP32[$133>>2]|0;
   $__tmp$i$i = $134;
   $135 = $53;
   $33 = $131;
   $136 = $33;
   $32 = $136;
   $137 = $32;
   HEAP32[$137>>2] = $135;
   $138 = $__tmp$i$i;
   $139 = ($138|0)!=(0|0);
   if (!($139)) {
    $176 = $67;
    $177 = $68;
    ___resumeException($176|0);
    // unreachable;
   }
   $31 = $131;
   $140 = $31;
   $30 = $140;
   $141 = $30;
   $142 = ((($141)) + 4|0);
   $143 = $__tmp$i$i;
   $48 = $142;
   $49 = $143;
   $144 = $48;
   $145 = ((($144)) + 4|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&1;
   if ($147) {
    $148 = HEAP32[$144>>2]|0;
    $149 = $49;
    $150 = ((($149)) + 16|0);
    $47 = $150;
    $151 = $47;
    $44 = $148;
    $45 = $151;
    $152 = $44;
    $153 = $45;
    ;HEAP8[$43>>0]=HEAP8[$46>>0]|0;
    $41 = $152;
    $42 = $153;
    $154 = $42;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($154);
   }
   $155 = $49;
   $156 = ($155|0)!=(0|0);
   if (!($156)) {
    $176 = $67;
    $177 = $68;
    ___resumeException($176|0);
    // unreachable;
   }
   $157 = HEAP32[$144>>2]|0;
   $158 = $49;
   $38 = $157;
   $39 = $158;
   $40 = 1;
   $159 = $38;
   $160 = $39;
   $161 = $40;
   $35 = $159;
   $36 = $160;
   $37 = $161;
   $162 = $36;
   $34 = $162;
   $163 = $34;
   __ZdlPv($163);
   $176 = $67;
   $177 = $68;
   ___resumeException($176|0);
   // unreachable;
  }
 } while(0);
 $164 = $__r;
 $55 = $69;
 $56 = $164;
 $165 = $55;
 $166 = $56;
 HEAP32[$165>>2] = $166;
 $59 = $agg$result;
 $60 = $69;
 $61 = $__inserted;
 $167 = $59;
 $168 = $60;
 $58 = $168;
 $169 = $58;
 ;HEAP32[$167>>2]=HEAP32[$169>>2]|0;
 $170 = ((($167)) + 4|0);
 $171 = $61;
 $57 = $171;
 $172 = $57;
 $173 = HEAP8[$172>>0]|0;
 $174 = $173&1;
 $175 = $174&1;
 HEAP8[$170>>0] = $175;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE16__construct_nodeIJRKS6_EEENS_10unique_ptrINS_11__tree_nodeIS6_PvEENS_22__tree_node_destructorINS4_ISH_EEEEEEDpOT_($agg$result,$this,$__args) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__na = 0, $__tmp$i$i = 0;
 var $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 32|0;
 $14 = sp + 451|0;
 $35 = sp + 24|0;
 $38 = sp + 450|0;
 $51 = sp + 252|0;
 $52 = sp + 16|0;
 $55 = sp + 240|0;
 $56 = sp + 232|0;
 $57 = sp + 8|0;
 $62 = sp + 208|0;
 $84 = sp;
 $87 = sp + 449|0;
 $101 = sp + 448|0;
 $102 = sp + 48|0;
 $99 = $this;
 $100 = $__args;
 $106 = $99;
 $98 = $106;
 $107 = $98;
 $108 = ((($107)) + 4|0);
 $97 = $108;
 $109 = $97;
 $96 = $109;
 $110 = $96;
 $__na = $110;
 $$expand_i1_val = 0;
 HEAP8[$101>>0] = $$expand_i1_val;
 $111 = $__na;
 $69 = $111;
 $70 = 1;
 $112 = $69;
 $113 = $70;
 $66 = $112;
 $67 = $113;
 $68 = 0;
 $114 = $67;
 $115 = ($114*28)|0;
 $65 = $115;
 $116 = $65;
 $117 = (__Znwj($116)|0);
 $118 = $__na;
 $63 = $102;
 $64 = $118;
 $119 = $63;
 $120 = $64;
 HEAP32[$119>>2] = $120;
 $121 = ((($119)) + 4|0);
 HEAP8[$121>>0] = 0;
 $59 = $agg$result;
 $60 = $117;
 $61 = $102;
 $122 = $59;
 $123 = $60;
 $124 = $61;
 $58 = $124;
 $125 = $58;
 ;HEAP32[$62>>2]=HEAP32[$125>>2]|0;HEAP32[$62+4>>2]=HEAP32[$125+4>>2]|0;
 ;HEAP8[$57>>0]=HEAP8[$62>>0]|0;HEAP8[$57+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$57+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$57+3>>0]=HEAP8[$62+3>>0]|0;HEAP8[$57+4>>0]=HEAP8[$62+4>>0]|0;HEAP8[$57+5>>0]=HEAP8[$62+5>>0]|0;HEAP8[$57+6>>0]=HEAP8[$62+6>>0]|0;HEAP8[$57+7>>0]=HEAP8[$62+7>>0]|0;
 $54 = $122;
 HEAP32[$55>>2] = $123;
 $126 = $54;
 $53 = $55;
 $127 = $53;
 $128 = HEAP32[$127>>2]|0;
 $47 = $57;
 $129 = $47;
 ;HEAP32[$56>>2]=HEAP32[$129>>2]|0;HEAP32[$56+4>>2]=HEAP32[$129+4>>2]|0;
 ;HEAP8[$52>>0]=HEAP8[$56>>0]|0;HEAP8[$52+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$52+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$52+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$52+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$52+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$52+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$52+7>>0]=HEAP8[$56+7>>0]|0;
 $50 = $126;
 HEAP32[$51>>2] = $128;
 $130 = $50;
 $49 = $51;
 $131 = $49;
 $132 = HEAP32[$131>>2]|0;
 HEAP32[$130>>2] = $132;
 $133 = ((($130)) + 4|0);
 $48 = $52;
 $134 = $48;
 ;HEAP32[$133>>2]=HEAP32[$134>>2]|0;HEAP32[$133+4>>2]=HEAP32[$134+4>>2]|0;
 $135 = $__na;
 $21 = $agg$result;
 $136 = $21;
 $20 = $136;
 $137 = $20;
 $19 = $137;
 $138 = $19;
 $139 = HEAP32[$138>>2]|0;
 $140 = ((($139)) + 16|0);
 $18 = $140;
 $141 = $18;
 $142 = $100;
 $0 = $142;
 $143 = $0;
 $11 = $135;
 $12 = $141;
 $13 = $143;
 $144 = $11;
 $145 = $12;
 $146 = $13;
 $10 = $146;
 $147 = $10;
 ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
 $6 = $144;
 $7 = $145;
 $8 = $147;
 $148 = $6;
 $149 = $7;
 $150 = $8;
 $5 = $150;
 $151 = $5;
 $2 = $148;
 $3 = $149;
 $4 = $151;
 $152 = $3;
 $153 = $4;
 $1 = $153;
 $154 = $1;
 __THREW__ = 0;
 invoke_vii(307,($152|0),($154|0));
 $155 = __THREW__; __THREW__ = 0;
 $156 = $155&1;
 if ($156) {
  $163 = ___cxa_find_matching_catch()|0;
  $164 = tempRet0;
  $103 = $163;
  $104 = $164;
  $46 = $agg$result;
  $165 = $46;
  $44 = $165;
  $45 = 0;
  $166 = $44;
  $43 = $166;
  $167 = $43;
  $42 = $167;
  $168 = $42;
  $169 = HEAP32[$168>>2]|0;
  $__tmp$i$i1 = $169;
  $170 = $45;
  $25 = $166;
  $171 = $25;
  $24 = $171;
  $172 = $24;
  HEAP32[$172>>2] = $170;
  $173 = $__tmp$i$i1;
  $174 = ($173|0)!=(0|0);
  if (!($174)) {
   $233 = $103;
   $234 = $104;
   ___resumeException($233|0);
   // unreachable;
  }
  $23 = $166;
  $175 = $23;
  $22 = $175;
  $176 = $22;
  $177 = ((($176)) + 4|0);
  $178 = $__tmp$i$i1;
  $40 = $177;
  $41 = $178;
  $179 = $40;
  $180 = ((($179)) + 4|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&1;
  if ($182) {
   $183 = HEAP32[$179>>2]|0;
   $184 = $41;
   $185 = ((($184)) + 16|0);
   $39 = $185;
   $186 = $39;
   $36 = $183;
   $37 = $186;
   $187 = $36;
   $188 = $37;
   ;HEAP8[$35>>0]=HEAP8[$38>>0]|0;
   $33 = $187;
   $34 = $188;
   $189 = $34;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($189);
  }
  $190 = $41;
  $191 = ($190|0)!=(0|0);
  if (!($191)) {
   $233 = $103;
   $234 = $104;
   ___resumeException($233|0);
   // unreachable;
  }
  $192 = HEAP32[$179>>2]|0;
  $193 = $41;
  $30 = $192;
  $31 = $193;
  $32 = 1;
  $194 = $30;
  $195 = $31;
  $196 = $32;
  $27 = $194;
  $28 = $195;
  $29 = $196;
  $197 = $28;
  $26 = $197;
  $198 = $26;
  __ZdlPv($198);
  $233 = $103;
  $234 = $104;
  ___resumeException($233|0);
  // unreachable;
 }
 $17 = $agg$result;
 $157 = $17;
 $16 = $157;
 $158 = $16;
 $15 = $158;
 $159 = $15;
 $160 = ((($159)) + 4|0);
 $161 = ((($160)) + 4|0);
 HEAP8[$161>>0] = 1;
 $$expand_i1_val2 = 1;
 HEAP8[$101>>0] = $$expand_i1_val2;
 $105 = 1;
 $$pre_trunc = HEAP8[$101>>0]|0;
 $162 = $$pre_trunc&1;
 if ($162) {
  STACKTOP = sp;return;
 }
 $95 = $agg$result;
 $199 = $95;
 $93 = $199;
 $94 = 0;
 $200 = $93;
 $92 = $200;
 $201 = $92;
 $91 = $201;
 $202 = $91;
 $203 = HEAP32[$202>>2]|0;
 $__tmp$i$i = $203;
 $204 = $94;
 $74 = $200;
 $205 = $74;
 $73 = $205;
 $206 = $73;
 HEAP32[$206>>2] = $204;
 $207 = $__tmp$i$i;
 $208 = ($207|0)!=(0|0);
 if (!($208)) {
  STACKTOP = sp;return;
 }
 $72 = $200;
 $209 = $72;
 $71 = $209;
 $210 = $71;
 $211 = ((($210)) + 4|0);
 $212 = $__tmp$i$i;
 $89 = $211;
 $90 = $212;
 $213 = $89;
 $214 = ((($213)) + 4|0);
 $215 = HEAP8[$214>>0]|0;
 $216 = $215&1;
 if ($216) {
  $217 = HEAP32[$213>>2]|0;
  $218 = $90;
  $219 = ((($218)) + 16|0);
  $88 = $219;
  $220 = $88;
  $85 = $217;
  $86 = $220;
  $221 = $85;
  $222 = $86;
  ;HEAP8[$84>>0]=HEAP8[$87>>0]|0;
  $82 = $221;
  $83 = $222;
  $223 = $83;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($223);
 }
 $224 = $90;
 $225 = ($224|0)!=(0|0);
 if (!($225)) {
  STACKTOP = sp;return;
 }
 $226 = HEAP32[$213>>2]|0;
 $227 = $90;
 $79 = $226;
 $80 = $227;
 $81 = 1;
 $228 = $79;
 $229 = $80;
 $230 = $81;
 $76 = $228;
 $77 = $229;
 $78 = $230;
 $231 = $77;
 $75 = $231;
 $232 = $75;
 __ZdlPv($232);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init330() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN2mp15Cnxid_tInstanceC2Ev(4384);
 (___cxa_atexit((308|0),(4384|0),(___dso_handle|0))|0);
 return;
}
function __ZN2mp15Cnxid_tInstanceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $2 = $this;
 $3 = $2;
 $0 = $3;
 $4 = $0;
 __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEC2ERKS8_($4,$1);
 STACKTOP = sp;return;
}
function __ZN2mp15Cnxid_tInstanceD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPKcNS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPKcNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEEC2EjjS5_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 4|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(309,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN2dx12c_dx_xnode_tC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 32|0;
 $6 = sp + 20|0;
 $10 = $this;
 $11 = $name;
 $12 = $10;
 $13 = $11;
 __ZN2dx16c_dx_node_mini_tC2EPKc($12,$13);
 $14 = 4404;
 HEAP32[$12>>2] = $14;
 $15 = ((($12)) + 28|0);
 $9 = $15;
 $16 = $9;
 $8 = $16;
 $17 = $8;
 $7 = $17;
 HEAP32[$17>>2] = 0;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($17)) + 8|0);
 $5 = $19;
 HEAP32[$6>>2] = 0;
 $20 = $5;
 $4 = $6;
 $21 = $4;
 $22 = HEAP32[$21>>2]|0;
 $2 = $20;
 HEAP32[$3>>2] = $22;
 $23 = $2;
 $1 = $23;
 $0 = $3;
 $24 = $0;
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$23>>2] = $25;
 STACKTOP = sp;return;
}
function __ZN2dx12c_dx_xnode_tD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $__old_size$i = 0, $i = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 96|0;
 $21 = $this;
 $22 = $21;
 $23 = 4404;
 HEAP32[$22>>2] = $23;
 $i = 0;
 $24 = ((($22)) + 28|0);
 $20 = $24;
 $25 = $20;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$25>>2]|0;
 $29 = $27;
 $30 = $28;
 $31 = (($29) - ($30))|0;
 $32 = (($31|0) / 4)&-1;
 $n = $32;
 while(1) {
  $33 = $i;
  $34 = $n;
  $35 = ($33|0)<($34|0);
  $36 = ((($22)) + 28|0);
  if (!($35)) {
   break;
  }
  $37 = $i;
  $18 = $36;
  $19 = $37;
  $38 = $18;
  $39 = $19;
  $40 = HEAP32[$38>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  if (!($43)) {
   $44 = HEAP32[$42>>2]|0;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   FUNCTION_TABLE_vi[$46 & 511]($42);
  }
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 $17 = $36;
 $49 = $17;
 $16 = $49;
 $50 = $16;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$50>>2]|0;
 $54 = $52;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $57 = (($56|0) / 4)&-1;
 $__old_size$i = $57;
 $15 = $49;
 $58 = $15;
 $59 = HEAP32[$58>>2]|0;
 $13 = $58;
 $14 = $59;
 $60 = $13;
 while(1) {
  $61 = $14;
  $62 = ((($60)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($61|0)!=($63|0);
  if (!($64)) {
   break;
  }
  $12 = $60;
  $65 = $12;
  $66 = ((($65)) + 8|0);
  $11 = $66;
  $67 = $11;
  $10 = $67;
  $68 = $10;
  $69 = ((($60)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + -4|0);
  HEAP32[$69>>2] = $71;
  $9 = $71;
  $72 = $9;
  $6 = $68;
  $7 = $72;
  $73 = $6;
  $74 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $73;
  $4 = $74;
  $75 = $3;
  $76 = $4;
  $1 = $75;
  $2 = $76;
 }
 $77 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(310,($49|0),($77|0));
 $78 = __THREW__; __THREW__ = 0;
 $79 = $78&1;
 if ($79) {
  $80 = ___cxa_find_matching_catch(0|0)|0;
  $81 = tempRet0;
  ___clang_call_terminate($80);
  // unreachable;
 } else {
  $0 = $49;
  $82 = ((($22)) + 28|0);
  __ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEED2Ev($82);
  __ZN2dx16c_dx_node_mini_tD2Ev($22);
  STACKTOP = sp;return;
 }
}
function __ZN2dx12c_dx_xnode_tD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx12c_dx_xnode_tD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx12c_dx_xnode_t6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 4)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx12c_dx_xnode_t4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 511]($1)|0);
 $6 = ((($agg$result)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($1)) + 4|0);
 HEAP32[$agg$result>>2] = $7;
 $8 = ((($agg$result)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 511]($1)|0);
 $13 = ((($agg$result)) + 8|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN2dx12c_dx_xnode_t4itemEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $index;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 $6 = $3;
 $0 = $5;
 $1 = $6;
 $7 = $0;
 $8 = $1;
 $9 = HEAP32[$7>>2]|0;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx16create_node_implEPKc11e_dx_type_tiPK12dx_node_meta($name,$typ,$len,$meta) {
 $name = $name|0;
 $typ = $typ|0;
 $len = $len|0;
 $meta = $meta|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $typ;
 $3 = $len;
 $4 = $meta;
 $node = 0;
 $7 = $2;
 $8 = ($7|0)==(0);
 if ($8) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 $9 = $2;
 $10 = ($9|0)<(8);
 L5: do {
  if ($10) {
   $11 = $3;
   $12 = ($11|0)<(1);
   if ($12) {
    $0 = 0;
    $170 = $0;
    STACKTOP = sp;return ($170|0);
   }
   $13 = $3;
   $14 = ($13|0)==(1);
   $15 = $2;
   $16 = ($15|0)==(1);
   if ($14) {
    do {
     if ($16) {
      $17 = (__Znwj(32)|0);
      $18 = $1;
      __THREW__ = 0;
      invoke_vii(311,($17|0),($18|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       $21 = ___cxa_find_matching_catch()|0;
       $22 = tempRet0;
       $5 = $21;
       $6 = $22;
       __ZdlPv($17);
       label = 82;
       break L5;
      } else {
       $node = $17;
       break;
      }
     }
    } while(0);
    $23 = $2;
    $24 = ($23|0)==(2);
    do {
     if ($24) {
      $25 = (__Znwj(40)|0);
      $26 = $1;
      __THREW__ = 0;
      invoke_vii(312,($25|0),($26|0));
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $29 = ___cxa_find_matching_catch()|0;
       $30 = tempRet0;
       $5 = $29;
       $6 = $30;
       __ZdlPv($25);
       label = 82;
       break L5;
      } else {
       $node = $25;
       break;
      }
     }
    } while(0);
    $31 = $2;
    $32 = ($31|0)==(3);
    do {
     if ($32) {
      $33 = (__Znwj(48)|0);
      $34 = $1;
      __THREW__ = 0;
      invoke_vii(313,($33|0),($34|0));
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       $37 = ___cxa_find_matching_catch()|0;
       $38 = tempRet0;
       $5 = $37;
       $6 = $38;
       __ZdlPv($33);
       label = 82;
       break L5;
      } else {
       $node = $33;
       break;
      }
     }
    } while(0);
    $39 = $2;
    $40 = ($39|0)==(4);
    do {
     if ($40) {
      $41 = (__Znwj(56)|0);
      $42 = $1;
      __THREW__ = 0;
      invoke_vii(314,($41|0),($42|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch()|0;
       $46 = tempRet0;
       $5 = $45;
       $6 = $46;
       __ZdlPv($41);
       label = 82;
       break L5;
      } else {
       $node = $41;
       break;
      }
     }
    } while(0);
    $47 = $2;
    $48 = ($47|0)==(5);
    do {
     if ($48) {
      $49 = (__Znwj(64)|0);
      $50 = $1;
      __THREW__ = 0;
      invoke_vii(315,($49|0),($50|0));
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       $53 = ___cxa_find_matching_catch()|0;
       $54 = tempRet0;
       $5 = $53;
       $6 = $54;
       __ZdlPv($49);
       label = 82;
       break L5;
      } else {
       $node = $49;
       break;
      }
     }
    } while(0);
    $55 = $2;
    $56 = ($55|0)==(6);
    do {
     if ($56) {
      $57 = (__Znwj(40)|0);
      $58 = $1;
      __THREW__ = 0;
      invoke_vii(316,($57|0),($58|0));
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       $61 = ___cxa_find_matching_catch()|0;
       $62 = tempRet0;
       $5 = $61;
       $6 = $62;
       __ZdlPv($57);
       label = 82;
       break L5;
      } else {
       $node = $57;
       break;
      }
     }
    } while(0);
    $63 = $2;
    $64 = ($63|0)==(7);
    if (!($64)) {
     break;
    }
    $65 = (__Znwj(40)|0);
    $66 = $1;
    __THREW__ = 0;
    invoke_vii(317,($65|0),($66|0));
    $67 = __THREW__; __THREW__ = 0;
    $68 = $67&1;
    if ($68) {
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $5 = $69;
     $6 = $70;
     __ZdlPv($65);
     label = 82;
     break;
    } else {
     $node = $65;
     break;
    }
   } else {
    do {
     if ($16) {
      $71 = (__Znwj(40)|0);
      $72 = $1;
      $73 = $3;
      __THREW__ = 0;
      invoke_viii(318,($71|0),($72|0),($73|0));
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       $76 = ___cxa_find_matching_catch()|0;
       $77 = tempRet0;
       $5 = $76;
       $6 = $77;
       __ZdlPv($71);
       label = 82;
       break L5;
      } else {
       $node = $71;
       break;
      }
     }
    } while(0);
    $78 = $2;
    $79 = ($78|0)==(2);
    do {
     if ($79) {
      $80 = (__Znwj(40)|0);
      $81 = $1;
      $82 = $3;
      __THREW__ = 0;
      invoke_viii(319,($80|0),($81|0),($82|0));
      $83 = __THREW__; __THREW__ = 0;
      $84 = $83&1;
      if ($84) {
       $85 = ___cxa_find_matching_catch()|0;
       $86 = tempRet0;
       $5 = $85;
       $6 = $86;
       __ZdlPv($80);
       label = 82;
       break L5;
      } else {
       $node = $80;
       break;
      }
     }
    } while(0);
    $87 = $2;
    $88 = ($87|0)==(3);
    do {
     if ($88) {
      $89 = (__Znwj(40)|0);
      $90 = $1;
      $91 = $3;
      __THREW__ = 0;
      invoke_viii(320,($89|0),($90|0),($91|0));
      $92 = __THREW__; __THREW__ = 0;
      $93 = $92&1;
      if ($93) {
       $94 = ___cxa_find_matching_catch()|0;
       $95 = tempRet0;
       $5 = $94;
       $6 = $95;
       __ZdlPv($89);
       label = 82;
       break L5;
      } else {
       $node = $89;
       break;
      }
     }
    } while(0);
    $96 = $2;
    $97 = ($96|0)==(4);
    do {
     if ($97) {
      $98 = (__Znwj(40)|0);
      $99 = $1;
      $100 = $3;
      __THREW__ = 0;
      invoke_viii(321,($98|0),($99|0),($100|0));
      $101 = __THREW__; __THREW__ = 0;
      $102 = $101&1;
      if ($102) {
       $103 = ___cxa_find_matching_catch()|0;
       $104 = tempRet0;
       $5 = $103;
       $6 = $104;
       __ZdlPv($98);
       label = 82;
       break L5;
      } else {
       $node = $98;
       break;
      }
     }
    } while(0);
    $105 = $2;
    $106 = ($105|0)==(5);
    do {
     if ($106) {
      $107 = (__Znwj(40)|0);
      $108 = $1;
      $109 = $3;
      __THREW__ = 0;
      invoke_viii(322,($107|0),($108|0),($109|0));
      $110 = __THREW__; __THREW__ = 0;
      $111 = $110&1;
      if ($111) {
       $112 = ___cxa_find_matching_catch()|0;
       $113 = tempRet0;
       $5 = $112;
       $6 = $113;
       __ZdlPv($107);
       label = 82;
       break L5;
      } else {
       $node = $107;
       break;
      }
     }
    } while(0);
    $114 = $2;
    $115 = ($114|0)==(6);
    do {
     if ($115) {
      $116 = (__Znwj(52)|0);
      $117 = $1;
      $118 = $3;
      __THREW__ = 0;
      invoke_viii(323,($116|0),($117|0),($118|0));
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if ($120) {
       $121 = ___cxa_find_matching_catch()|0;
       $122 = tempRet0;
       $5 = $121;
       $6 = $122;
       __ZdlPv($116);
       label = 82;
       break L5;
      } else {
       $node = $116;
       break;
      }
     }
    } while(0);
    $123 = $2;
    $124 = ($123|0)==(7);
    if (!($124)) {
     break;
    }
    $125 = (__Znwj(52)|0);
    $126 = $1;
    $127 = $3;
    __THREW__ = 0;
    invoke_viii(324,($125|0),($126|0),($127|0));
    $128 = __THREW__; __THREW__ = 0;
    $129 = $128&1;
    if ($129) {
     $130 = ___cxa_find_matching_catch()|0;
     $131 = tempRet0;
     $5 = $130;
     $6 = $131;
     __ZdlPv($125);
     label = 82;
     break;
    } else {
     $node = $125;
     break;
    }
   }
  } else {
   $132 = $2;
   $133 = ($132|0)<(12);
   if ($133) {
    $134 = $2;
    $135 = ($134|0)==(8);
    do {
     if ($135) {
      $136 = (__Znwj(40)|0);
      $137 = $1;
      __THREW__ = 0;
      invoke_vii(325,($136|0),($137|0));
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       $140 = ___cxa_find_matching_catch()|0;
       $141 = tempRet0;
       $5 = $140;
       $6 = $141;
       __ZdlPv($136);
       label = 82;
       break L5;
      } else {
       $node = $136;
       break;
      }
     }
    } while(0);
    $142 = $2;
    $143 = ($142|0)==(9);
    do {
     if ($143) {
      $144 = (__Znwj(40)|0);
      $145 = $1;
      __THREW__ = 0;
      invoke_vii(326,($144|0),($145|0));
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       $148 = ___cxa_find_matching_catch()|0;
       $149 = tempRet0;
       $5 = $148;
       $6 = $149;
       __ZdlPv($144);
       label = 82;
       break L5;
      } else {
       $node = $144;
       break;
      }
     }
    } while(0);
    $150 = $2;
    $151 = ($150|0)==(10);
    do {
     if ($151) {
      $152 = (__Znwj(40)|0);
      $153 = $1;
      __THREW__ = 0;
      invoke_vii(327,($152|0),($153|0));
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       $156 = ___cxa_find_matching_catch()|0;
       $157 = tempRet0;
       $5 = $156;
       $6 = $157;
       __ZdlPv($152);
       label = 82;
       break L5;
      } else {
       $node = $152;
       break;
      }
     }
    } while(0);
    $158 = $2;
    $159 = ($158|0)==(11);
    if ($159) {
     $160 = (__Znwj(40)|0);
     $161 = $1;
     __THREW__ = 0;
     invoke_vii(328,($160|0),($161|0));
     $162 = __THREW__; __THREW__ = 0;
     $163 = $162&1;
     if ($163) {
      $164 = ___cxa_find_matching_catch()|0;
      $165 = tempRet0;
      $5 = $164;
      $6 = $165;
      __ZdlPv($160);
      label = 82;
      break;
     } else {
      $node = $160;
      break;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 82) {
  $171 = $5;
  $172 = $6;
  ___resumeException($171|0);
  // unreachable;
 }
 $166 = $4;
 $167 = $node;
 $168 = ((($167)) + 12|0);
 HEAP32[$168>>2] = $166;
 $169 = $node;
 $0 = $169;
 $170 = $0;
 STACKTOP = sp;return ($170|0);
}
function __ZN2dx12c_dx_xnode_t3addEPKc11e_dx_type_tiPK12dx_node_meta($this,$name,$typ,$len,$meta) {
 $this = $this|0;
 $name = $name|0;
 $typ = $typ|0;
 $len = $len|0;
 $meta = $meta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 113|0;
 $__annotator$i = sp + 112|0;
 $node = sp + 4|0;
 $23 = $this;
 $24 = $name;
 $25 = $typ;
 $26 = $len;
 $27 = $meta;
 $28 = $23;
 $29 = $24;
 $30 = $25;
 $31 = $26;
 $32 = $27;
 $33 = (__ZN2dx16create_node_implEPKc11e_dx_type_tiPK12dx_node_meta($29,$30,$31,$32)|0);
 HEAP32[$node>>2] = $33;
 $34 = HEAP32[$node>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  $74 = HEAP32[$node>>2]|0;
  STACKTOP = sp;return ($74|0);
 }
 $36 = ((($28)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$node>>2]|0;
 $39 = ((($38)) + 4|0);
 HEAP32[$39>>2] = $37;
 $40 = ((($28)) + 28|0);
 $21 = $40;
 $22 = $node;
 $41 = $21;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $20 = $41;
 $44 = $20;
 $45 = ((($44)) + 8|0);
 $19 = $45;
 $46 = $19;
 $18 = $46;
 $47 = $18;
 $48 = HEAP32[$47>>2]|0;
 $49 = ($43|0)!=($48|0);
 if ($49) {
  __ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator$i,$41,1);
  $17 = $41;
  $50 = $17;
  $51 = ((($50)) + 8|0);
  $16 = $51;
  $52 = $16;
  $15 = $52;
  $53 = $15;
  $54 = ((($41)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $14 = $55;
  $56 = $14;
  $57 = $22;
  $10 = $53;
  $11 = $56;
  $12 = $57;
  $58 = $10;
  $59 = $11;
  $60 = $12;
  $9 = $60;
  $61 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $58;
  $6 = $59;
  $7 = $61;
  $62 = $5;
  $63 = $6;
  $64 = $7;
  $4 = $64;
  $65 = $4;
  $1 = $62;
  $2 = $63;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $67;
  $68 = $0;
  $69 = HEAP32[$68>>2]|0;
  HEAP32[$66>>2] = $69;
  __ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $70 = ((($41)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 4|0);
  HEAP32[$70>>2] = $72;
  $74 = HEAP32[$node>>2]|0;
  STACKTOP = sp;return ($74|0);
 } else {
  $73 = $22;
  __ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($41,$73);
  $74 = HEAP32[$node>>2]|0;
  STACKTOP = sp;return ($74|0);
 }
 return (0)|0;
}
function __ZN2dx21fn_node_get_name_implEP7dx_node($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 $3 = ((($1)) + -4|0);
 $4 = $2 ? 0 : $3;
 $impl = $4;
 $5 = $impl;
 $6 = (__ZN2dx16c_dx_node_mini_t4nameEv($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN2dx21fn_node_get_type_implEP7dx_node($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 $3 = ((($1)) + -4|0);
 $4 = $2 ? 0 : $3;
 $impl = $4;
 $5 = $impl;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN2dx23fn_node_get_length_implEP7dx_node($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 $3 = ((($1)) + -4|0);
 $4 = $2 ? 0 : $3;
 $impl = $4;
 $5 = $impl;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN2dx26fn_node_get_data_cell_implEP7dx_node($agg$result,$node) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 $3 = ((($1)) + -4|0);
 $4 = $2 ? 0 : $3;
 $impl = $4;
 $5 = $impl;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$8 & 511]($agg$result,$5);
 STACKTOP = sp;return;
}
function __ZN2dx22fn_node_get_child_implEP7dx_nodei($node,$index) {
 $node = $node|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, $impl2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $index;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = ((($2)) + -4|0);
 $5 = $3 ? 0 : $4;
 $impl = $5;
 $6 = $impl;
 $impl2 = $6;
 $7 = $impl2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = (FUNCTION_TABLE_iii[$10 & 511]($7,$11)|0);
 $13 = ($12|0)==(0|0);
 $14 = ((($12)) + 4|0);
 $15 = $13 ? 0 : $14;
 STACKTOP = sp;return ($15|0);
}
function __ZN2dx22fn_node_add_child_implEP7dx_nodePKc11e_dx_type_ti($parent,$name,$type,$length) {
 $parent = $parent|0;
 $name = $name|0;
 $type = $type|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, $impl2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $parent;
 $1 = $name;
 $2 = $type;
 $3 = $length;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 $6 = ((($4)) + -4|0);
 $7 = $5 ? 0 : $6;
 $impl = $7;
 $8 = $impl;
 $impl2 = $8;
 $9 = $impl2;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = (__ZN2dx12c_dx_xnode_t3addEPKc11e_dx_type_tiPK12dx_node_meta($9,$10,$11,$12,0)|0);
 $14 = ($13|0)==(0|0);
 $15 = ((($13)) + 4|0);
 $16 = $14 ? 0 : $15;
 STACKTOP = sp;return ($16|0);
}
function __ZN2dx23fn_node_add_child2_implEP7dx_nodePK12dx_node_metai($parent,$meta,$length) {
 $parent = $parent|0;
 $meta = $meta|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $impl = 0, $impl2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $parent;
 $1 = $meta;
 $2 = $length;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 $5 = ((($3)) + -4|0);
 $6 = $4 ? 0 : $5;
 $impl = $6;
 $7 = $impl;
 $impl2 = $7;
 $8 = $impl2;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = $1;
 $16 = (__ZN2dx12c_dx_xnode_t3addEPKc11e_dx_type_tiPK12dx_node_meta($8,$10,$13,$14,$15)|0);
 $17 = ($16|0)==(0|0);
 $18 = ((($16)) + 4|0);
 $19 = $17 ? 0 : $18;
 STACKTOP = sp;return ($19|0);
}
function __ZN2dx21fn_node_put_meta_implEP7dx_nodePK12dx_node_meta($node,$meta) {
 $node = $node|0;
 $meta = $meta|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $meta;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = ((($2)) + -4|0);
 $5 = $3 ? 0 : $4;
 $impl = $5;
 $6 = $impl;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 FUNCTION_TABLE_vii[$9 & 511]($6,$10);
 STACKTOP = sp;return;
}
function __ZN2dx21fn_node_get_meta_implEP7dx_node($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 $3 = ((($1)) + -4|0);
 $4 = $2 ? 0 : $3;
 $impl = $4;
 $5 = $impl;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN2dx25fn_node_iterator_get_implEP7dx_node($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, $impl2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $node;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 $6 = ((($4)) + -4|0);
 $7 = $5 ? 0 : $6;
 $impl = $7;
 $8 = $impl;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 511]($8)|0);
 $13 = ($12|0)<(8);
 if ($13) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $14 = $1;
 $15 = ($14|0)==(0|0);
 $16 = ((($14)) + -4|0);
 $17 = $15 ? 0 : $16;
 $impl2 = $17;
 $18 = (__Znwj(12)|0);
 $19 = $impl2;
 __THREW__ = 0;
 invoke_vii(329,($18|0),($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $2 = $22;
  $3 = $23;
  __ZdlPv($18);
  $24 = $2;
  $25 = $3;
  ___resumeException($24|0);
  // unreachable;
 }
 $0 = $18;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function __ZN2dx26fn_node_iterator_next_implEP16dx_node_iterator($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $it;
 $1 = $0;
 $impl = $1;
 $2 = $impl;
 $3 = (__ZN2dx25c_dx_node_iterator_mini_t4nextEv($2)|0);
 $4 = ($3|0)==(0|0);
 $5 = ((($3)) + 4|0);
 $6 = $4 ? 0 : $5;
 STACKTOP = sp;return ($6|0);
}
function __ZN2dx28fn_node_iterator_rewind_implEP16dx_node_iterator($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $2 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $it;
 $1 = $0;
 $impl = $1;
 $2 = $impl;
 __ZN2dx25c_dx_node_iterator_mini_t6rewindEv($2);
 STACKTOP = sp;return;
}
function __ZN2dx29fn_node_iterator_release_implEP16dx_node_iterator($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $it;
 $1 = $0;
 $impl = $1;
 $2 = $impl;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdlPv($2);
 }
 STACKTOP = sp;return;
}
function __ZN2dx18fn_put_string_implEP7dx_nodePKci($node,$str,$ix) {
 $node = $node|0;
 $str = $str|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $impl = 0, $st = 0, $st2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $str;
 $2 = $ix;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 $5 = ((($3)) + -4|0);
 $6 = $4 ? 0 : $5;
 $impl = $6;
 $7 = $impl;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $10 = 0;
 } else {
  $9 = (___dynamic_cast($7,232,256,0)|0);
  $10 = $9;
 }
 $st = $10;
 $11 = $st;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $st;
  $14 = $1;
  __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE10put_stringEPKc($13,$14);
  STACKTOP = sp;return;
 }
 $15 = $impl;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $18 = 0;
 } else {
  $17 = (___dynamic_cast($15,232,272,0)|0);
  $18 = $17;
 }
 $st2 = $18;
 $19 = $st2;
 $20 = $1;
 $21 = $2;
 __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE10put_stringEPKci($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN2dx19fn_put_wstring_implEP7dx_nodePKwi($node,$wstr,$ix) {
 $node = $node|0;
 $wstr = $wstr|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $impl = 0, $st = 0, $st2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $wstr;
 $2 = $ix;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 $5 = ((($3)) + -4|0);
 $6 = $4 ? 0 : $5;
 $impl = $6;
 $7 = $impl;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $10 = 0;
 } else {
  $9 = (___dynamic_cast($7,232,288,0)|0);
  $10 = $9;
 }
 $st = $10;
 $11 = $st;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $st;
  $14 = $1;
  __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE10put_stringEPKw($13,$14);
  STACKTOP = sp;return;
 }
 $15 = $impl;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $18 = 0;
 } else {
  $17 = (___dynamic_cast($15,232,304,0)|0);
  $18 = $17;
 }
 $st2 = $18;
 $19 = $st2;
 $20 = $1;
 $21 = $2;
 __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE10put_stringEPKwi($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN2dx29fn_node_data_cell_commit_implEP7dx_cell($cell) {
 $cell = $cell|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cell;
 STACKTOP = sp;return;
}
function __ZN2dx20fn_node_put_tag_implEP7dx_nodePKc($node,$tag) {
 $node = $node|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $tag;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = ((($2)) + -4|0);
 $5 = $3 ? 0 : $4;
 $impl = $5;
 $6 = $impl;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 FUNCTION_TABLE_vii[$9 & 511]($6,$10);
 STACKTOP = sp;return;
}
function __ZN2dx26fn_node_get_tag_count_implEP7dx_node($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 $3 = ((($1)) + -4|0);
 $4 = $2 ? 0 : $3;
 $impl = $4;
 $5 = $impl;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN2dx20fn_node_get_tag_implEP7dx_nodei($node,$ix) {
 $node = $node|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $node;
 $1 = $ix;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = ((($2)) + -4|0);
 $5 = $3 ? 0 : $4;
 $impl = $5;
 $6 = $impl;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (FUNCTION_TABLE_iii[$9 & 511]($6,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function __Z10getVersionv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return +1;
}
function __Z13createDatasetv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $dx = 0, $dxftable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dxftable = 4448;
 $0 = $dxftable;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__Z4nxidPKc(9385)|0);
 $4 = (FUNCTION_TABLE_iiiii[$2 & 511](9392,$3,8,0)|0);
 $dx = $4;
 $5 = $dx;
 $6 = $5;
 STACKTOP = sp;return ($6|0);
}
function __Z14getDatasetNodei($dxID) {
 $dxID = $dxID|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $dx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dxID;
 $1 = $0;
 $2 = $1;
 $dx = $2;
 $3 = $dx;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 STACKTOP = sp;return ($6|0);
}
function __Z17getNodeChildCounti($nxID) {
 $nxID = $nxID|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $nxID;
 $1 = $0;
 $2 = $1;
 $nx = $2;
 $3 = $nx;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $nx;
 $9 = (FUNCTION_TABLE_ii[$7 & 511]($8)|0);
 STACKTOP = sp;return ($9|0);
}
function __Z12getChildNodeii($nxID,$idx) {
 $nxID = $nxID|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $childNode = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $nxID;
 $1 = $idx;
 $2 = $0;
 $3 = $2;
 $nx = $3;
 $4 = $nx;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $nx;
 $10 = $1;
 $11 = (FUNCTION_TABLE_iii[$8 & 511]($9,$10)|0);
 $childNode = $11;
 $12 = $childNode;
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function __Z11getNodeNamei($agg$result,$nxID) {
 $agg$result = $agg$result|0;
 $nxID = $nxID|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 32|0;
 $5 = $nxID;
 $8 = $5;
 $9 = $8;
 $nx = $9;
 $$expand_i1_val = 0;
 HEAP8[$6>>0] = $$expand_i1_val;
 $10 = $nx;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $nx;
 $15 = (FUNCTION_TABLE_ii[$13 & 511]($14)|0);
 $3 = $agg$result;
 $4 = $15;
 $16 = $3;
 $2 = $16;
 $17 = $2;
 $1 = $17;
 $18 = $1;
 $0 = $18;
 $19 = $4;
 $20 = $4;
 $21 = (__ZNSt3__111char_traitsIcE6lengthEPKc($20)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($16,$19,$21);
 $$expand_i1_val2 = 1;
 HEAP8[$6>>0] = $$expand_i1_val2;
 $7 = 1;
 $$pre_trunc = HEAP8[$6>>0]|0;
 $22 = $$pre_trunc&1;
 if ($22) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __Z11getNodeTypei($nxID) {
 $nxID = $nxID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell_type = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $nxID;
 $2 = $0;
 $3 = $2;
 $nx = $3;
 $4 = $nx;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $nx;
 FUNCTION_TABLE_vii[$8 & 511]($1,$9);
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $cell_type = $11;
 $12 = $cell_type;
 STACKTOP = sp;return ($12|0);
}
function __Z13getNodeLengthi($nxID) {
 $nxID = $nxID|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell_len = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $nxID;
 $2 = $0;
 $3 = $2;
 $nx = $3;
 $4 = $nx;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $nx;
 FUNCTION_TABLE_vii[$8 & 511]($1,$9);
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $cell_len = $11;
 $12 = $cell_len;
 STACKTOP = sp;return ($12|0);
}
function __Z17kerneltype2string11e_dx_type_ti($agg$result,$pType,$len) {
 $agg$result = $agg$result|0;
 $pType = $pType|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $85 = $pType;
 $86 = $len;
 $87 = $85;
 do {
  switch ($87|0) {
  case 1:  {
   $88 = $86;
   $89 = ($88|0)==(1);
   if ($89) {
    $83 = $agg$result;
    $84 = 12085;
    $90 = $83;
    $82 = $90;
    $91 = $82;
    $81 = $91;
    $92 = $81;
    $80 = $92;
    $93 = $84;
    $94 = $84;
    $95 = (__ZNSt3__111char_traitsIcE6lengthEPKc($94)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($90,$93,$95);
    STACKTOP = sp;return;
   } else {
    $78 = $agg$result;
    $79 = 9393;
    $96 = $78;
    $77 = $96;
    $97 = $77;
    $76 = $97;
    $98 = $76;
    $75 = $98;
    $99 = $79;
    $100 = $79;
    $101 = (__ZNSt3__111char_traitsIcE6lengthEPKc($100)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($96,$99,$101);
    STACKTOP = sp;return;
   }
   break;
  }
  case 2:  {
   $102 = $86;
   $103 = ($102|0)==(1);
   if ($103) {
    $73 = $agg$result;
    $74 = 9403;
    $104 = $73;
    $72 = $104;
    $105 = $72;
    $71 = $105;
    $106 = $71;
    $70 = $106;
    $107 = $74;
    $108 = $74;
    $109 = (__ZNSt3__111char_traitsIcE6lengthEPKc($108)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($104,$107,$109);
    STACKTOP = sp;return;
   } else {
    $68 = $agg$result;
    $69 = 9408;
    $110 = $68;
    $67 = $110;
    $111 = $67;
    $66 = $111;
    $112 = $66;
    $65 = $112;
    $113 = $69;
    $114 = $69;
    $115 = (__ZNSt3__111char_traitsIcE6lengthEPKc($114)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($110,$113,$115);
    STACKTOP = sp;return;
   }
   break;
  }
  case 6:  {
   $116 = $86;
   $117 = ($116|0)==(1);
   if ($117) {
    $63 = $agg$result;
    $64 = 9419;
    $118 = $63;
    $62 = $118;
    $119 = $62;
    $61 = $119;
    $120 = $61;
    $60 = $120;
    $121 = $64;
    $122 = $64;
    $123 = (__ZNSt3__111char_traitsIcE6lengthEPKc($122)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($118,$121,$123);
    STACKTOP = sp;return;
   } else {
    $58 = $agg$result;
    $59 = 9426;
    $124 = $58;
    $57 = $124;
    $125 = $57;
    $56 = $125;
    $126 = $56;
    $55 = $126;
    $127 = $59;
    $128 = $59;
    $129 = (__ZNSt3__111char_traitsIcE6lengthEPKc($128)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($124,$127,$129);
    STACKTOP = sp;return;
   }
   break;
  }
  case 3:  {
   $130 = $86;
   $131 = ($130|0)==(1);
   if ($131) {
    $53 = $agg$result;
    $54 = 9439;
    $132 = $53;
    $52 = $132;
    $133 = $52;
    $51 = $133;
    $134 = $51;
    $50 = $134;
    $135 = $54;
    $136 = $54;
    $137 = (__ZNSt3__111char_traitsIcE6lengthEPKc($136)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($132,$135,$137);
    STACKTOP = sp;return;
   } else {
    $48 = $agg$result;
    $49 = 9448;
    $138 = $48;
    $47 = $138;
    $139 = $47;
    $46 = $139;
    $140 = $46;
    $45 = $140;
    $141 = $49;
    $142 = $49;
    $143 = (__ZNSt3__111char_traitsIcE6lengthEPKc($142)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($138,$141,$143);
    STACKTOP = sp;return;
   }
   break;
  }
  case 4:  {
   $144 = $86;
   $145 = ($144|0)==(1);
   if ($145) {
    $43 = $agg$result;
    $44 = 9463;
    $146 = $43;
    $42 = $146;
    $147 = $42;
    $41 = $147;
    $148 = $41;
    $40 = $148;
    $149 = $44;
    $150 = $44;
    $151 = (__ZNSt3__111char_traitsIcE6lengthEPKc($150)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($146,$149,$151);
    STACKTOP = sp;return;
   } else {
    $38 = $agg$result;
    $39 = 9472;
    $152 = $38;
    $37 = $152;
    $153 = $37;
    $36 = $153;
    $154 = $36;
    $35 = $154;
    $155 = $39;
    $156 = $39;
    $157 = (__ZNSt3__111char_traitsIcE6lengthEPKc($156)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($152,$155,$157);
    STACKTOP = sp;return;
   }
   break;
  }
  case 5:  {
   $158 = $86;
   $159 = ($158|0)==(1);
   if ($159) {
    $33 = $agg$result;
    $34 = 9487;
    $160 = $33;
    $32 = $160;
    $161 = $32;
    $31 = $161;
    $162 = $31;
    $30 = $162;
    $163 = $34;
    $164 = $34;
    $165 = (__ZNSt3__111char_traitsIcE6lengthEPKc($164)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($160,$163,$165);
    STACKTOP = sp;return;
   } else {
    $28 = $agg$result;
    $29 = 9496;
    $166 = $28;
    $27 = $166;
    $167 = $27;
    $26 = $167;
    $168 = $26;
    $25 = $168;
    $169 = $29;
    $170 = $29;
    $171 = (__ZNSt3__111char_traitsIcE6lengthEPKc($170)|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($166,$169,$171);
    STACKTOP = sp;return;
   }
   break;
  }
  case 8:  {
   $23 = $agg$result;
   $24 = 9511;
   $172 = $23;
   $22 = $172;
   $173 = $22;
   $21 = $173;
   $174 = $21;
   $20 = $174;
   $175 = $24;
   $176 = $24;
   $177 = (__ZNSt3__111char_traitsIcE6lengthEPKc($176)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($172,$175,$177);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $18 = $agg$result;
   $19 = 9515;
   $178 = $18;
   $17 = $178;
   $179 = $17;
   $16 = $179;
   $180 = $16;
   $15 = $180;
   $181 = $19;
   $182 = $19;
   $183 = (__ZNSt3__111char_traitsIcE6lengthEPKc($182)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($178,$181,$183);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $13 = $agg$result;
   $14 = 9520;
   $184 = $13;
   $12 = $184;
   $185 = $12;
   $11 = $185;
   $186 = $11;
   $10 = $186;
   $187 = $14;
   $188 = $14;
   $189 = (__ZNSt3__111char_traitsIcE6lengthEPKc($188)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($184,$187,$189);
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $8 = $agg$result;
   $9 = 9524;
   $190 = $8;
   $7 = $190;
   $191 = $7;
   $6 = $191;
   $192 = $6;
   $5 = $192;
   $193 = $9;
   $194 = $9;
   $195 = (__ZNSt3__111char_traitsIcE6lengthEPKc($194)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($190,$193,$195);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $3 = $agg$result;
   $4 = 9511;
   $196 = $3;
   $2 = $196;
   $197 = $2;
   $1 = $197;
   $198 = $1;
   $0 = $198;
   $199 = $4;
   $200 = $4;
   $201 = (__ZNSt3__111char_traitsIcE6lengthEPKc($200)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($196,$199,$201);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function __Z17string2kerneltypeNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($pStr) {
 $pStr = $pStr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = $pStr;
 $31 = 12085;
 $33 = $30;
 $34 = $31;
 $35 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($33,$34)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  $28 = $pStr;
  $29 = 9393;
  $37 = $28;
  $38 = $29;
  $39 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($37,$38)|0);
  $40 = ($39|0)==(0);
  if (!($40)) {
   $26 = $pStr;
   $27 = 9403;
   $41 = $26;
   $42 = $27;
   $43 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($41,$42)|0);
   $44 = ($43|0)==(0);
   if (!($44)) {
    $24 = $pStr;
    $25 = 9408;
    $45 = $24;
    $46 = $25;
    $47 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($45,$46)|0);
    $48 = ($47|0)==(0);
    if (!($48)) {
     $22 = $pStr;
     $23 = 9419;
     $49 = $22;
     $50 = $23;
     $51 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($49,$50)|0);
     $52 = ($51|0)==(0);
     if (!($52)) {
      $20 = $pStr;
      $21 = 9426;
      $53 = $20;
      $54 = $21;
      $55 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($53,$54)|0);
      $56 = ($55|0)==(0);
      if (!($56)) {
       $18 = $pStr;
       $19 = 9439;
       $57 = $18;
       $58 = $19;
       $59 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($57,$58)|0);
       $60 = ($59|0)==(0);
       if (!($60)) {
        $16 = $pStr;
        $17 = 9448;
        $61 = $16;
        $62 = $17;
        $63 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($61,$62)|0);
        $64 = ($63|0)==(0);
        if (!($64)) {
         $14 = $pStr;
         $15 = 9463;
         $65 = $14;
         $66 = $15;
         $67 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($65,$66)|0);
         $68 = ($67|0)==(0);
         if (!($68)) {
          $12 = $pStr;
          $13 = 9472;
          $69 = $12;
          $70 = $13;
          $71 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($69,$70)|0);
          $72 = ($71|0)==(0);
          if (!($72)) {
           $10 = $pStr;
           $11 = 9487;
           $73 = $10;
           $74 = $11;
           $75 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($73,$74)|0);
           $76 = ($75|0)==(0);
           if (!($76)) {
            $8 = $pStr;
            $9 = 9496;
            $77 = $8;
            $78 = $9;
            $79 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($77,$78)|0);
            $80 = ($79|0)==(0);
            if (!($80)) {
             $6 = $pStr;
             $7 = 9511;
             $81 = $6;
             $82 = $7;
             $83 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($81,$82)|0);
             $84 = ($83|0)==(0);
             if ($84) {
              $32 = 8;
              $97 = $32;
              STACKTOP = sp;return ($97|0);
             }
             $4 = $pStr;
             $5 = 9515;
             $85 = $4;
             $86 = $5;
             $87 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($85,$86)|0);
             $88 = ($87|0)==(0);
             if ($88) {
              $32 = 9;
              $97 = $32;
              STACKTOP = sp;return ($97|0);
             }
             $2 = $pStr;
             $3 = 9520;
             $89 = $2;
             $90 = $3;
             $91 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($89,$90)|0);
             $92 = ($91|0)==(0);
             if ($92) {
              $32 = 10;
              $97 = $32;
              STACKTOP = sp;return ($97|0);
             }
             $0 = $pStr;
             $1 = 9524;
             $93 = $0;
             $94 = $1;
             $95 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($93,$94)|0);
             $96 = ($95|0)==(0);
             if ($96) {
              $32 = 11;
              $97 = $32;
              STACKTOP = sp;return ($97|0);
             } else {
              $32 = 0;
              $97 = $32;
              STACKTOP = sp;return ($97|0);
             }
            }
           }
           $32 = 5;
           $97 = $32;
           STACKTOP = sp;return ($97|0);
          }
         }
         $32 = 4;
         $97 = $32;
         STACKTOP = sp;return ($97|0);
        }
       }
       $32 = 3;
       $97 = $32;
       STACKTOP = sp;return ($97|0);
      }
     }
     $32 = 6;
     $97 = $32;
     STACKTOP = sp;return ($97|0);
    }
   }
   $32 = 2;
   $97 = $32;
   STACKTOP = sp;return ($97|0);
  }
 }
 $32 = 1;
 $97 = $32;
 STACKTOP = sp;return ($97|0);
}
function __Z12addChildNodeiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE11e_dx_type_ti($nxID,$name,$type,$length) {
 $nxID = $nxID|0;
 $name = $name|0;
 $type = $type|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nx = 0, $parentNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $nxID;
 $16 = $type;
 $17 = $length;
 $18 = $15;
 $19 = $18;
 $parentNode = $19;
 $20 = $parentNode;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $parentNode;
 $14 = $name;
 $26 = $14;
 $13 = $26;
 $27 = $13;
 $12 = $27;
 $28 = $12;
 $11 = $28;
 $29 = $11;
 $10 = $29;
 $30 = $10;
 $9 = $30;
 $31 = $9;
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 & 1;
 $35 = ($34|0)!=(0);
 if ($35) {
  $3 = $28;
  $36 = $3;
  $2 = $36;
  $37 = $2;
  $1 = $37;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $47 = $40;
 } else {
  $8 = $28;
  $41 = $8;
  $7 = $41;
  $42 = $7;
  $6 = $42;
  $43 = $6;
  $44 = ((($43)) + 1|0);
  $5 = $44;
  $45 = $5;
  $4 = $45;
  $46 = $4;
  $47 = $46;
 }
 $0 = $47;
 $48 = $0;
 $49 = (__Z4nxidPKc($48)|0);
 $50 = $16;
 $51 = $17;
 $52 = (FUNCTION_TABLE_iiiii[$24 & 511]($25,$49,$50,$51)|0);
 $nx = $52;
 $53 = $nx;
 $54 = $53;
 STACKTOP = sp;return ($54|0);
}
function __Z15setIntNodeValueii($nxID,$value) {
 $nxID = $nxID|0;
 $value = $value|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 28|0;
 $cell = sp;
 $1 = $nxID;
 $2 = $value;
 $3 = $1;
 $4 = $3;
 $nx = $4;
 $5 = $nx;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $nx;
 FUNCTION_TABLE_vii[$9 & 511]($cell,$10);
 $11 = ((($cell)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(1);
 if ($13) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 } else {
  $14 = $2;
  $15 = ((($cell)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$16>>2] = $14;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __Z16setRealNodeValueid($nxID,$value) {
 $nxID = $nxID|0;
 $value = +$value;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 32|0;
 $cell = sp + 8|0;
 $1 = $nxID;
 $2 = $value;
 $3 = $1;
 $4 = $3;
 $nx = $4;
 $5 = $nx;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $nx;
 FUNCTION_TABLE_vii[$9 & 511]($cell,$10);
 $11 = ((($cell)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(2);
 if ($13) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 } else {
  $14 = $2;
  $15 = ((($cell)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  HEAPF64[$16>>3] = $14;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __Z18setStringNodeValueiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($nxID,$value) {
 $nxID = $nxID|0;
 $value = $value|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 84|0;
 $cell = sp;
 $16 = $nxID;
 $17 = $16;
 $18 = $17;
 $nx = $18;
 $19 = $nx;
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $nx;
 FUNCTION_TABLE_vii[$23 & 511]($cell,$24);
 $25 = ((($cell)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(6);
 if ($27) {
  $$expand_i1_val = 0;
  HEAP8[$15>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $57 = $$pre_trunc&1;
  STACKTOP = sp;return ($57|0);
 }
 $28 = $nx;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $nx;
 $14 = $value;
 $34 = $14;
 $13 = $34;
 $35 = $13;
 $12 = $35;
 $36 = $12;
 $11 = $36;
 $37 = $11;
 $10 = $37;
 $38 = $10;
 $9 = $38;
 $39 = $9;
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 & 1;
 $43 = ($42|0)!=(0);
 if ($43) {
  $3 = $36;
  $44 = $3;
  $2 = $44;
  $45 = $2;
  $1 = $45;
  $46 = $1;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $55 = $48;
 } else {
  $8 = $36;
  $49 = $8;
  $7 = $49;
  $50 = $7;
  $6 = $50;
  $51 = $6;
  $52 = ((($51)) + 1|0);
  $5 = $52;
  $53 = $5;
  $4 = $53;
  $54 = $4;
  $55 = $54;
 }
 $0 = $55;
 $56 = $0;
 FUNCTION_TABLE_viii[$32 & 511]($33,$56,0);
 $$expand_i1_val2 = 1;
 HEAP8[$15>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$15>>0]|0;
 $57 = $$pre_trunc&1;
 STACKTOP = sp;return ($57|0);
}
function __Z20setVector2dNodeValueidd($nxID,$x,$y) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 40|0;
 $cell = sp + 16|0;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $1;
 $5 = $4;
 $nx = $5;
 $6 = $nx;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $nx;
 FUNCTION_TABLE_vii[$10 & 511]($cell,$11);
 $12 = ((($cell)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(3);
 if ($14) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $22 = $$pre_trunc&1;
  STACKTOP = sp;return ($22|0);
 } else {
  $15 = $2;
  $16 = ((($cell)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAPF64[$17>>3] = $15;
  $18 = $3;
  $19 = ((($cell)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 8|0);
  HEAPF64[$21>>3] = $18;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $22 = $$pre_trunc&1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function __Z20setVector3dNodeValueiddd($nxID,$x,$y,$z) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 48|0;
 $cell = sp + 24|0;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $1;
 $6 = $5;
 $nx = $6;
 $7 = $nx;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $nx;
 FUNCTION_TABLE_vii[$11 & 511]($cell,$12);
 $13 = ((($cell)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(4);
 if ($15) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 } else {
  $16 = $2;
  $17 = ((($cell)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  HEAPF64[$18>>3] = $16;
  $19 = $3;
  $20 = ((($cell)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 8|0);
  HEAPF64[$22>>3] = $19;
  $23 = $4;
  $24 = ((($cell)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 16|0);
  HEAPF64[$26>>3] = $23;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $27 = $$pre_trunc&1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __Z20setVector4dNodeValueidddd($nxID,$x,$y,$z,$m) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $m = +$m;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 56|0;
 $cell = sp + 32|0;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $m;
 $6 = $1;
 $7 = $6;
 $nx = $7;
 $8 = $nx;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $nx;
 FUNCTION_TABLE_vii[$12 & 511]($cell,$13);
 $14 = ((($cell)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(5);
 if ($16) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $32 = $$pre_trunc&1;
  STACKTOP = sp;return ($32|0);
 } else {
  $17 = $2;
  $18 = ((($cell)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  HEAPF64[$19>>3] = $17;
  $20 = $3;
  $21 = ((($cell)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 8|0);
  HEAPF64[$23>>3] = $20;
  $24 = $4;
  $25 = ((($cell)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 16|0);
  HEAPF64[$27>>3] = $24;
  $28 = $5;
  $29 = ((($cell)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 24|0);
  HEAPF64[$31>>3] = $28;
  $$expand_i1_val2 = 1;
  HEAP8[$0>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $32 = $$pre_trunc&1;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __Z15addIntNodeValueiii($nxID,$value,$idx) {
 $nxID = $nxID|0;
 $value = $value|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 32|0;
 $cell = sp;
 $1 = $nxID;
 $2 = $value;
 $3 = $idx;
 $4 = $1;
 $5 = $4;
 $nx = $5;
 $6 = $nx;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $nx;
 FUNCTION_TABLE_vii[$10 & 511]($cell,$11);
 $12 = ((($cell)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(1);
 do {
  if ($14) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $15 = $3;
   $16 = ($15|0)<(0);
   if (!($16)) {
    $17 = $3;
    $18 = ((($cell)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)>=($19|0);
    if (!($20)) {
     $21 = $2;
     $22 = $3;
     $23 = ((($cell)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + ($22<<2)|0);
     HEAP32[$25>>2] = $21;
     $$expand_i1_val4 = 1;
     HEAP8[$0>>0] = $$expand_i1_val4;
     break;
    }
   }
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $26 = $$pre_trunc&1;
 STACKTOP = sp;return ($26|0);
}
function __Z16addRealNodeValueidi($nxID,$value,$idx) {
 $nxID = $nxID|0;
 $value = +$value;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 36|0;
 $cell = sp + 8|0;
 $1 = $nxID;
 $2 = $value;
 $3 = $idx;
 $4 = $1;
 $5 = $4;
 $nx = $5;
 $6 = $nx;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $nx;
 FUNCTION_TABLE_vii[$10 & 511]($cell,$11);
 $12 = ((($cell)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(2);
 do {
  if ($14) {
   $$expand_i1_val = 0;
   HEAP8[$0>>0] = $$expand_i1_val;
  } else {
   $15 = $3;
   $16 = ($15|0)<(0);
   if (!($16)) {
    $17 = $3;
    $18 = ((($cell)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)>=($19|0);
    if (!($20)) {
     $21 = $2;
     $22 = $3;
     $23 = ((($cell)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + ($22<<3)|0);
     HEAPF64[$25>>3] = $21;
     $$expand_i1_val4 = 1;
     HEAP8[$0>>0] = $$expand_i1_val4;
     break;
    }
   }
   $$expand_i1_val2 = 0;
   HEAP8[$0>>0] = $$expand_i1_val2;
  }
 } while(0);
 $$pre_trunc = HEAP8[$0>>0]|0;
 $26 = $$pre_trunc&1;
 STACKTOP = sp;return ($26|0);
}
function __Z18addStringNodeValueiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi($nxID,$value,$idx) {
 $nxID = $nxID|0;
 $value = $value|0;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 88|0;
 $cell = sp;
 $16 = $nxID;
 $17 = $idx;
 $18 = $16;
 $19 = $18;
 $nx = $19;
 $20 = $nx;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $nx;
 FUNCTION_TABLE_vii[$24 & 511]($cell,$25);
 $26 = ((($cell)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(6);
 if ($28) {
  $$expand_i1_val = 0;
  HEAP8[$15>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$15>>0]|0;
  $65 = $$pre_trunc&1;
  STACKTOP = sp;return ($65|0);
 }
 $29 = $17;
 $30 = ($29|0)<(0);
 if (!($30)) {
  $31 = $17;
  $32 = ((($cell)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($31|0)>=($33|0);
  if (!($34)) {
   $35 = $nx;
   $36 = HEAP32[$35>>2]|0;
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 52|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $nx;
   $14 = $value;
   $41 = $14;
   $13 = $41;
   $42 = $13;
   $12 = $42;
   $43 = $12;
   $11 = $43;
   $44 = $11;
   $10 = $44;
   $45 = $10;
   $9 = $45;
   $46 = $9;
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = $48 & 1;
   $50 = ($49|0)!=(0);
   if ($50) {
    $3 = $43;
    $51 = $3;
    $2 = $51;
    $52 = $2;
    $1 = $52;
    $53 = $1;
    $54 = ((($53)) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $62 = $55;
   } else {
    $8 = $43;
    $56 = $8;
    $7 = $56;
    $57 = $7;
    $6 = $57;
    $58 = $6;
    $59 = ((($58)) + 1|0);
    $5 = $59;
    $60 = $5;
    $4 = $60;
    $61 = $4;
    $62 = $61;
   }
   $0 = $62;
   $63 = $0;
   $64 = $17;
   FUNCTION_TABLE_viii[$39 & 511]($40,$63,$64);
   $$expand_i1_val4 = 1;
   HEAP8[$15>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$15>>0]|0;
   $65 = $$pre_trunc&1;
   STACKTOP = sp;return ($65|0);
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$15>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$15>>0]|0;
 $65 = $$pre_trunc&1;
 STACKTOP = sp;return ($65|0);
}
function __Z20addVector2dNodeValueiddi($nxID,$x,$y,$idx) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $nx = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 44|0;
 $cell = sp + 16|0;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $idx;
 $5 = $1;
 $6 = $5;
 $nx = $6;
 $7 = $nx;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $nx;
 FUNCTION_TABLE_vii[$11 & 511]($cell,$12);
 $13 = ((($cell)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(3);
 if ($15) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $33 = $$pre_trunc&1;
  STACKTOP = sp;return ($33|0);
 }
 $16 = $4;
 $17 = ($16|0)<(0);
 if (!($17)) {
  $18 = $4;
  $19 = ((($cell)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18|0)>=($20|0);
  if (!($21)) {
   $22 = $2;
   $23 = $4;
   $24 = ((($cell)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($23<<4)|0);
   HEAPF64[$26>>3] = $22;
   $27 = $3;
   $28 = $4;
   $29 = ((($cell)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($28<<4)|0);
   $32 = ((($31)) + 8|0);
   HEAPF64[$32>>3] = $27;
   $$expand_i1_val4 = 1;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $33 = $$pre_trunc&1;
   STACKTOP = sp;return ($33|0);
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $33 = $$pre_trunc&1;
 STACKTOP = sp;return ($33|0);
}
function __Z20addVector3dNodeValueidddi($nxID,$x,$y,$z,$idx) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 52|0;
 $cell = sp + 24|0;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $idx;
 $6 = $1;
 $7 = $6;
 $nx = $7;
 $8 = $nx;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $nx;
 FUNCTION_TABLE_vii[$12 & 511]($cell,$13);
 $14 = ((($cell)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(4);
 if ($16) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $40 = $$pre_trunc&1;
  STACKTOP = sp;return ($40|0);
 }
 $17 = $5;
 $18 = ($17|0)<(0);
 if (!($18)) {
  $19 = $5;
  $20 = ((($cell)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($19|0)>=($21|0);
  if (!($22)) {
   $23 = $2;
   $24 = $5;
   $25 = ((($cell)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + (($24*24)|0)|0);
   HEAPF64[$27>>3] = $23;
   $28 = $3;
   $29 = $5;
   $30 = ((($cell)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + (($29*24)|0)|0);
   $33 = ((($32)) + 8|0);
   HEAPF64[$33>>3] = $28;
   $34 = $4;
   $35 = $5;
   $36 = ((($cell)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + (($35*24)|0)|0);
   $39 = ((($38)) + 16|0);
   HEAPF64[$39>>3] = $34;
   $$expand_i1_val4 = 1;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $40 = $$pre_trunc&1;
   STACKTOP = sp;return ($40|0);
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $40 = $$pre_trunc&1;
 STACKTOP = sp;return ($40|0);
}
function __Z20addVector4dNodeValueiddddi($nxID,$x,$y,$z,$m,$idx) {
 $nxID = $nxID|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 $m = +$m;
 $idx = $idx|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0;
 var $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $nx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 60|0;
 $cell = sp + 32|0;
 $1 = $nxID;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $m;
 $6 = $idx;
 $7 = $1;
 $8 = $7;
 $nx = $8;
 $9 = $nx;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $nx;
 FUNCTION_TABLE_vii[$13 & 511]($cell,$14);
 $15 = ((($cell)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(5);
 if ($17) {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$0>>0]|0;
  $47 = $$pre_trunc&1;
  STACKTOP = sp;return ($47|0);
 }
 $18 = $6;
 $19 = ($18|0)<(0);
 if (!($19)) {
  $20 = $6;
  $21 = ((($cell)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($20|0)>=($22|0);
  if (!($23)) {
   $24 = $2;
   $25 = $6;
   $26 = ((($cell)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($25<<5)|0);
   HEAPF64[$28>>3] = $24;
   $29 = $3;
   $30 = $6;
   $31 = ((($cell)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($30<<5)|0);
   $34 = ((($33)) + 8|0);
   HEAPF64[$34>>3] = $29;
   $35 = $4;
   $36 = $6;
   $37 = ((($cell)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($36<<5)|0);
   $40 = ((($39)) + 16|0);
   HEAPF64[$40>>3] = $35;
   $41 = $5;
   $42 = $6;
   $43 = ((($cell)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($42<<5)|0);
   $46 = ((($45)) + 24|0);
   HEAPF64[$46>>3] = $41;
   $$expand_i1_val4 = 1;
   HEAP8[$0>>0] = $$expand_i1_val4;
   $$pre_trunc = HEAP8[$0>>0]|0;
   $47 = $$pre_trunc&1;
   STACKTOP = sp;return ($47|0);
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$0>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$0>>0]|0;
 $47 = $$pre_trunc&1;
 STACKTOP = sp;return ($47|0);
}
function __Z15getNodeIntValuei($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 8|0;
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $realNode = $3;
 $4 = $realNode;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $realNode;
 $10 = (FUNCTION_TABLE_ii[$8 & 511]($9)|0);
 $nodeType = $10;
 $11 = $realNode;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $realNode;
 FUNCTION_TABLE_vii[$15 & 511]($cell,$16);
 $17 = ((($cell)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $cellLen = $18;
 $19 = $nodeType;
 $20 = ($19|0)!=(1);
 $21 = $cellLen;
 $22 = ($21|0)!=(1);
 $or$cond = $20 | $22;
 if ($or$cond) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $23 = ((($cell)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __Z16getNodeRealValuei($node) {
 $node = $node|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 16|0;
 $1 = $node;
 $2 = $1;
 $3 = $2;
 $realNode = $3;
 $4 = $realNode;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $realNode;
 $10 = (FUNCTION_TABLE_ii[$8 & 511]($9)|0);
 $nodeType = $10;
 $11 = $realNode;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $realNode;
 FUNCTION_TABLE_vii[$15 & 511]($cell,$16);
 $17 = ((($cell)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $cellLen = $18;
 $19 = $nodeType;
 $20 = ($19|0)!=(2);
 $21 = $cellLen;
 $22 = ($21|0)!=(1);
 $or$cond = $20 | $22;
 if ($or$cond) {
  $0 = 0.0;
  $26 = $0;
  STACKTOP = sp;return (+$26);
 } else {
  $23 = ((($cell)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = +HEAPF64[$24>>3];
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return (+$26);
 }
 return +(0.0);
}
function __Z18getNodeStringValuei($agg$result,$node) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 8|0;
 $10 = $node;
 $11 = $10;
 $12 = $11;
 $realNode = $12;
 $13 = $realNode;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $realNode;
 $19 = (FUNCTION_TABLE_ii[$17 & 511]($18)|0);
 $nodeType = $19;
 $20 = $realNode;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $realNode;
 FUNCTION_TABLE_vii[$24 & 511]($cell,$25);
 $26 = ((($cell)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $cellLen = $27;
 $28 = $nodeType;
 $29 = ($28|0)!=(6);
 $30 = $cellLen;
 $31 = ($30|0)!=(1);
 $or$cond = $29 | $31;
 if ($or$cond) {
  $8 = $agg$result;
  $9 = 0;
  $32 = $8;
  $7 = $32;
  $33 = $7;
  $6 = $33;
  $34 = $6;
  $5 = $34;
  $35 = $9;
  $36 = $9;
  $37 = (__ZNSt3__111char_traitsIcE6lengthEPKc($36)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($32,$35,$37);
  STACKTOP = sp;return;
 } else {
  $38 = ((($cell)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $3 = $agg$result;
  $4 = $39;
  $40 = $3;
  $2 = $40;
  $41 = $2;
  $1 = $41;
  $42 = $1;
  $0 = $42;
  $43 = $4;
  $44 = $4;
  $45 = (__ZNSt3__111char_traitsIcE6lengthEPKc($44)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($40,$43,$45);
  STACKTOP = sp;return;
 }
}
function __Z20getNodeVector2dValuei($agg$result,$node) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $realNode = 0, $ret = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ret = sp + 32|0;
 $cell = sp + 8|0;
 $0 = $node;
 HEAPF32[$ret>>2] = -999999.875;
 $1 = ((($ret)) + 4|0);
 HEAPF32[$1>>2] = -999999.875;
 $2 = $0;
 $3 = $2;
 $realNode = $3;
 $4 = $realNode;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $realNode;
 $10 = (FUNCTION_TABLE_ii[$8 & 511]($9)|0);
 $nodeType = $10;
 $11 = $realNode;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $realNode;
 FUNCTION_TABLE_vii[$15 & 511]($cell,$16);
 $17 = ((($cell)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $cellLen = $18;
 $19 = $nodeType;
 $20 = ($19|0)!=(3);
 $21 = $cellLen;
 $22 = ($21|0)!=(1);
 $or$cond = $20 | $22;
 if ($or$cond) {
  ;HEAP32[$agg$result>>2]=HEAP32[$ret>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ret+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $23 = ((($cell)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = +HEAPF64[$24>>3];
  $26 = $25;
  HEAPF32[$agg$result>>2] = $26;
  $27 = ((($cell)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $30;
  $32 = ((($agg$result)) + 4|0);
  HEAPF32[$32>>2] = $31;
  STACKTOP = sp;return;
 }
}
function __Z20getNodeVector3dValuei($agg$result,$node) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 8|0;
 $0 = $node;
 HEAPF32[$agg$result>>2] = -999999.875;
 $1 = ((($agg$result)) + 4|0);
 HEAPF32[$1>>2] = -999999.875;
 $2 = ((($agg$result)) + 8|0);
 HEAPF32[$2>>2] = -999999.875;
 $3 = $0;
 $4 = $3;
 $realNode = $4;
 $5 = $realNode;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $realNode;
 $11 = (FUNCTION_TABLE_ii[$9 & 511]($10)|0);
 $nodeType = $11;
 $12 = $realNode;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $realNode;
 FUNCTION_TABLE_vii[$16 & 511]($cell,$17);
 $18 = ((($cell)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $cellLen = $19;
 $20 = $nodeType;
 $21 = ($20|0)!=(4);
 $22 = $cellLen;
 $23 = ($22|0)!=(1);
 $or$cond = $21 | $23;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $24 = ((($cell)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = +HEAPF64[$25>>3];
 $27 = $26;
 HEAPF32[$agg$result>>2] = $27;
 $28 = ((($cell)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $31;
 $33 = ((($agg$result)) + 4|0);
 HEAPF32[$33>>2] = $32;
 $34 = ((($cell)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $37;
 $39 = ((($agg$result)) + 8|0);
 HEAPF32[$39>>2] = $38;
 STACKTOP = sp;return;
}
function __Z20getNodeVector4dValuei($agg$result,$node) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 8|0;
 $0 = $node;
 HEAPF32[$agg$result>>2] = -999999.875;
 $1 = ((($agg$result)) + 4|0);
 HEAPF32[$1>>2] = -999999.875;
 $2 = ((($agg$result)) + 8|0);
 HEAPF32[$2>>2] = -999999.875;
 $3 = ((($agg$result)) + 12|0);
 HEAPF32[$3>>2] = -999999.875;
 $4 = $0;
 $5 = $4;
 $realNode = $5;
 $6 = $realNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $realNode;
 $12 = (FUNCTION_TABLE_ii[$10 & 511]($11)|0);
 $nodeType = $12;
 $13 = $realNode;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $realNode;
 FUNCTION_TABLE_vii[$17 & 511]($cell,$18);
 $19 = ((($cell)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $cellLen = $20;
 $21 = $nodeType;
 $22 = ($21|0)!=(5);
 $23 = $cellLen;
 $24 = ($23|0)!=(1);
 $or$cond = $22 | $24;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $25 = ((($cell)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = +HEAPF64[$26>>3];
 $28 = $27;
 HEAPF32[$agg$result>>2] = $28;
 $29 = ((($cell)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $32;
 $34 = ((($agg$result)) + 4|0);
 HEAPF32[$34>>2] = $33;
 $35 = ((($cell)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 16|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $38;
 $40 = ((($agg$result)) + 8|0);
 HEAPF32[$40>>2] = $39;
 $41 = ((($cell)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 24|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $44;
 $46 = ((($agg$result)) + 12|0);
 HEAPF32[$46>>2] = $45;
 STACKTOP = sp;return;
}
function __Z20getNodeIntArrayValueii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $or$cond3 = 0;
 var $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 8|0;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $realNode = $4;
 $5 = $realNode;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $realNode;
 $11 = (FUNCTION_TABLE_ii[$9 & 511]($10)|0);
 $nodeType = $11;
 $12 = $realNode;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $realNode;
 FUNCTION_TABLE_vii[$16 & 511]($cell,$17);
 $18 = ((($cell)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $cellLen = $19;
 $20 = $nodeType;
 $21 = ($20|0)!=(1);
 $22 = $cellLen;
 $23 = ($22|0)<=(1);
 $or$cond = $21 | $23;
 $24 = $2;
 $25 = ($24|0)<(0);
 $or$cond3 = $or$cond | $25;
 if (!($or$cond3)) {
  $26 = $2;
  $27 = $cellLen;
  $28 = ($26|0)>=($27|0);
  if (!($28)) {
   $29 = $2;
   $30 = ((($cell)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($29<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $0 = $33;
   $34 = $0;
   STACKTOP = sp;return ($34|0);
  }
 }
 $0 = 0;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __Z21getNodeRealArrayValueii($node,$idx) {
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $or$cond3 = 0;
 var $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 16|0;
 $1 = $node;
 $2 = $idx;
 $3 = $1;
 $4 = $3;
 $realNode = $4;
 $5 = $realNode;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $realNode;
 $11 = (FUNCTION_TABLE_ii[$9 & 511]($10)|0);
 $nodeType = $11;
 $12 = $realNode;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $realNode;
 FUNCTION_TABLE_vii[$16 & 511]($cell,$17);
 $18 = ((($cell)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $cellLen = $19;
 $20 = $nodeType;
 $21 = ($20|0)!=(2);
 $22 = $cellLen;
 $23 = ($22|0)<=(1);
 $or$cond = $21 | $23;
 $24 = $2;
 $25 = ($24|0)<(0);
 $or$cond3 = $or$cond | $25;
 if (!($or$cond3)) {
  $26 = $2;
  $27 = $cellLen;
  $28 = ($26|0)>=($27|0);
  if (!($28)) {
   $29 = $2;
   $30 = ((($cell)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($29<<3)|0);
   $33 = +HEAPF64[$32>>3];
   $0 = $33;
   $34 = $0;
   STACKTOP = sp;return (+$34);
  }
 }
 $0 = 0.0;
 $34 = $0;
 STACKTOP = sp;return (+$34);
}
function __Z23getNodeStringArrayValueii($agg$result,$node,$idx) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $or$cond3 = 0;
 var $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 8|0;
 $10 = $node;
 $11 = $idx;
 $12 = $10;
 $13 = $12;
 $realNode = $13;
 $14 = $realNode;
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $realNode;
 $20 = (FUNCTION_TABLE_ii[$18 & 511]($19)|0);
 $nodeType = $20;
 $21 = $realNode;
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $realNode;
 FUNCTION_TABLE_vii[$25 & 511]($cell,$26);
 $27 = ((($cell)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $cellLen = $28;
 $29 = $nodeType;
 $30 = ($29|0)!=(6);
 $31 = $cellLen;
 $32 = ($31|0)<=(1);
 $or$cond = $30 | $32;
 $33 = $11;
 $34 = ($33|0)<(0);
 $or$cond3 = $or$cond | $34;
 if (!($or$cond3)) {
  $35 = $11;
  $36 = $cellLen;
  $37 = ($35|0)>=($36|0);
  if (!($37)) {
   $44 = $11;
   $45 = ((($cell)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($44<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $3 = $agg$result;
   $4 = $48;
   $49 = $3;
   $2 = $49;
   $50 = $2;
   $1 = $50;
   $51 = $1;
   $0 = $51;
   $52 = $4;
   $53 = $4;
   $54 = (__ZNSt3__111char_traitsIcE6lengthEPKc($53)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($49,$52,$54);
   STACKTOP = sp;return;
  }
 }
 $8 = $agg$result;
 $9 = 0;
 $38 = $8;
 $7 = $38;
 $39 = $7;
 $6 = $39;
 $40 = $6;
 $5 = $40;
 $41 = $9;
 $42 = $9;
 $43 = (__ZNSt3__111char_traitsIcE6lengthEPKc($42)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($38,$41,$43);
 STACKTOP = sp;return;
}
function __Z25getNodeVector2dArrayValueii($agg$result,$node,$idx) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $or$cond3 = 0, $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 8|0;
 $0 = $node;
 $1 = $idx;
 HEAPF32[$agg$result>>2] = -999999.875;
 $2 = ((($agg$result)) + 4|0);
 HEAPF32[$2>>2] = -999999.875;
 $3 = $0;
 $4 = $3;
 $realNode = $4;
 $5 = $realNode;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $realNode;
 $11 = (FUNCTION_TABLE_ii[$9 & 511]($10)|0);
 $nodeType = $11;
 $12 = $realNode;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $realNode;
 FUNCTION_TABLE_vii[$16 & 511]($cell,$17);
 $18 = ((($cell)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $cellLen = $19;
 $20 = $nodeType;
 $21 = ($20|0)!=(3);
 $22 = $cellLen;
 $23 = ($22|0)<=(1);
 $or$cond = $21 | $23;
 $24 = $1;
 $25 = ($24|0)<(0);
 $or$cond3 = $or$cond | $25;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $26 = $1;
 $27 = $cellLen;
 $28 = ($26|0)>=($27|0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = ((($cell)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($29<<4)|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $33;
 HEAPF32[$agg$result>>2] = $34;
 $35 = $1;
 $36 = ((($cell)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + ($35<<4)|0);
 $39 = ((($38)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $40;
 $42 = ((($agg$result)) + 4|0);
 HEAPF32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __Z25getNodeVector3dArrayValueii($agg$result,$node,$idx) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $or$cond3 = 0, $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 8|0;
 $0 = $node;
 $1 = $idx;
 HEAPF32[$agg$result>>2] = -999999.875;
 $2 = ((($agg$result)) + 4|0);
 HEAPF32[$2>>2] = -999999.875;
 $3 = ((($agg$result)) + 8|0);
 HEAPF32[$3>>2] = -999999.875;
 $4 = $0;
 $5 = $4;
 $realNode = $5;
 $6 = $realNode;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $realNode;
 $12 = (FUNCTION_TABLE_ii[$10 & 511]($11)|0);
 $nodeType = $12;
 $13 = $realNode;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $realNode;
 FUNCTION_TABLE_vii[$17 & 511]($cell,$18);
 $19 = ((($cell)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $cellLen = $20;
 $21 = $nodeType;
 $22 = ($21|0)!=(4);
 $23 = $cellLen;
 $24 = ($23|0)<=(1);
 $or$cond = $22 | $24;
 $25 = $1;
 $26 = ($25|0)<(0);
 $or$cond3 = $or$cond | $26;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = $cellLen;
 $29 = ($27|0)>=($28|0);
 if ($29) {
  STACKTOP = sp;return;
 }
 $30 = $1;
 $31 = ((($cell)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + (($30*24)|0)|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $34;
 HEAPF32[$agg$result>>2] = $35;
 $36 = $1;
 $37 = ((($cell)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + (($36*24)|0)|0);
 $40 = ((($39)) + 8|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $41;
 $43 = ((($agg$result)) + 4|0);
 HEAPF32[$43>>2] = $42;
 $44 = $1;
 $45 = ((($cell)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + (($44*24)|0)|0);
 $48 = ((($47)) + 16|0);
 $49 = +HEAPF64[$48>>3];
 $50 = $49;
 $51 = ((($agg$result)) + 8|0);
 HEAPF32[$51>>2] = $50;
 STACKTOP = sp;return;
}
function __Z25getNodeVector4dArrayValueii($agg$result,$node,$idx) {
 $agg$result = $agg$result|0;
 $node = $node|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cell = 0, $cellLen = 0, $nodeType = 0, $or$cond = 0, $or$cond3 = 0, $realNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cell = sp + 8|0;
 $0 = $node;
 $1 = $idx;
 HEAPF32[$agg$result>>2] = -999999.875;
 $2 = ((($agg$result)) + 4|0);
 HEAPF32[$2>>2] = -999999.875;
 $3 = ((($agg$result)) + 8|0);
 HEAPF32[$3>>2] = -999999.875;
 $4 = ((($agg$result)) + 12|0);
 HEAPF32[$4>>2] = -999999.875;
 $5 = $0;
 $6 = $5;
 $realNode = $6;
 $7 = $realNode;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $realNode;
 $13 = (FUNCTION_TABLE_ii[$11 & 511]($12)|0);
 $nodeType = $13;
 $14 = $realNode;
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $realNode;
 FUNCTION_TABLE_vii[$18 & 511]($cell,$19);
 $20 = ((($cell)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $cellLen = $21;
 $22 = $nodeType;
 $23 = ($22|0)!=(5);
 $24 = $cellLen;
 $25 = ($24|0)<=(1);
 $or$cond = $23 | $25;
 $26 = $1;
 $27 = ($26|0)<(0);
 $or$cond3 = $or$cond | $27;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $28 = $1;
 $29 = $cellLen;
 $30 = ($28|0)>=($29|0);
 if ($30) {
  STACKTOP = sp;return;
 }
 $31 = $1;
 $32 = ((($cell)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($31<<5)|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $35;
 HEAPF32[$agg$result>>2] = $36;
 $37 = $1;
 $38 = ((($cell)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($37<<5)|0);
 $41 = ((($40)) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $42;
 $44 = ((($agg$result)) + 4|0);
 HEAPF32[$44>>2] = $43;
 $45 = $1;
 $46 = ((($cell)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($45<<5)|0);
 $49 = ((($48)) + 16|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $50;
 $52 = ((($agg$result)) + 8|0);
 HEAPF32[$52>>2] = $51;
 $53 = $1;
 $54 = ((($cell)) + 12|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($53<<5)|0);
 $57 = ((($56)) + 24|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $58;
 $60 = ((($agg$result)) + 12|0);
 HEAPF32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function __Z9FormatXDOP7dx_nodePN8tinyxml210XMLElementE($pNode,$element) {
 $pNode = $pNode|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0.0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0.0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0.0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0.0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0.0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0.0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0.0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0.0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0.0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0.0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0.0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0.0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0.0, $904 = 0, $905 = 0, $906 = 0, $907 = 0.0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0.0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0.0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0.0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0.0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $ce = 0, $childEle = 0, $count = 0, $doc = 0, $dx = 0, $iNode = 0, $iVal = 0, $iVal11 = 0, $iVal14 = 0, $iVal2 = 0, $iVal5 = 0, $iVal8 = 0, $kernelType = 0, $name = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $tempNode = 0, $tempValChar = 0, $tempValChar12 = 0;
 var $tempValChar15 = 0, $tempValChar3 = 0, $tempValChar9 = 0, $valStr = 0, $valStr1 = 0, $valStr10 = 0, $valStr13 = 0, $valStr4 = 0, $valStr7 = 0, $valueLen = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer32 = 0, $vararg_buffer37 = 0, $vararg_buffer42 = 0, $vararg_buffer48 = 0;
 var $vararg_buffer54 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0;
 var $vararg_ptr59 = 0, $vector2dStr = 0, $vector3dStr = 0, $vector4dStr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer54 = sp + 216|0;
 $vararg_buffer48 = sp + 184|0;
 $vararg_buffer42 = sp + 152|0;
 $vararg_buffer37 = sp + 128|0;
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer12 = sp + 24|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $ce = sp + 536|0;
 $333 = sp + 508|0;
 $valStr = sp + 488|0;
 $tempValChar = sp + 2596|0;
 $336 = sp + 472|0;
 $337 = sp + 460|0;
 $valStr1 = sp + 448|0;
 $tempValChar3 = sp + 2496|0;
 $338 = sp + 432|0;
 $339 = sp + 420|0;
 $valStr4 = sp + 408|0;
 $340 = sp + 392|0;
 $vector2dStr = sp + 2396|0;
 $341 = sp + 380|0;
 $valStr7 = sp + 368|0;
 $tempValChar9 = sp + 2296|0;
 $342 = sp + 352|0;
 $vector3dStr = sp + 2196|0;
 $343 = sp + 340|0;
 $valStr10 = sp + 328|0;
 $tempValChar12 = sp + 2096|0;
 $344 = sp + 312|0;
 $vector4dStr = sp + 1996|0;
 $345 = sp + 300|0;
 $valStr13 = sp + 288|0;
 $tempValChar15 = sp + 1896|0;
 $346 = sp + 272|0;
 $347 = sp + 260|0;
 $331 = $pNode;
 $332 = $element;
 $348 = $331;
 $349 = HEAP32[$348>>2]|0;
 $dx = $349;
 $350 = $dx;
 $351 = HEAP32[$350>>2]|0;
 $352 = ((($351)) + 4|0);
 $353 = HEAP32[$352>>2]|0;
 $354 = $331;
 $355 = (FUNCTION_TABLE_ii[$353 & 511]($354)|0);
 $kernelType = $355;
 $356 = $dx;
 $357 = HEAP32[$356>>2]|0;
 $358 = HEAP32[$357>>2]|0;
 $359 = $331;
 $360 = (FUNCTION_TABLE_ii[$358 & 511]($359)|0);
 $name = $360;
 $361 = $dx;
 $362 = HEAP32[$361>>2]|0;
 $363 = ((($362)) + 12|0);
 $364 = HEAP32[$363>>2]|0;
 $365 = $331;
 FUNCTION_TABLE_vii[$364 & 511]($ce,$365);
 $366 = ((($ce)) + 4|0);
 $367 = HEAP32[$366>>2]|0;
 $valueLen = $367;
 $368 = $332;
 $369 = (__ZN8tinyxml27XMLNode11GetDocumentEv($368)|0);
 $doc = $369;
 $370 = $doc;
 $371 = (__ZN8tinyxml211XMLDocument10NewElementEPKc($370,9530)|0);
 $childEle = $371;
 $372 = $332;
 $373 = $childEle;
 (__ZN8tinyxml27XMLNode12LinkEndChildEPS0_($372,$373)|0);
 $374 = $childEle;
 $375 = $name;
 __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($374,9534,$375);
 $376 = $kernelType;
 $377 = ($376|0)==(1);
 if ($377) {
  $378 = $valueLen;
  $379 = ($378|0)==(1);
  if ($379) {
   $380 = $childEle;
   $381 = $kernelType;
   __Z17kerneltype2string11e_dx_type_ti($333,$381,1);
   $330 = $333;
   $382 = $330;
   $329 = $382;
   $383 = $329;
   $328 = $383;
   $384 = $328;
   $327 = $384;
   $385 = $327;
   $326 = $385;
   $386 = $326;
   $325 = $386;
   $387 = $325;
   $388 = HEAP8[$387>>0]|0;
   $389 = $388&255;
   $390 = $389 & 1;
   $391 = ($390|0)!=(0);
   if ($391) {
    $319 = $384;
    $392 = $319;
    $318 = $392;
    $393 = $318;
    $317 = $393;
    $394 = $317;
    $395 = ((($394)) + 8|0);
    $396 = HEAP32[$395>>2]|0;
    $403 = $396;
   } else {
    $324 = $384;
    $397 = $324;
    $323 = $397;
    $398 = $323;
    $322 = $398;
    $399 = $322;
    $400 = ((($399)) + 1|0);
    $321 = $400;
    $401 = $321;
    $320 = $401;
    $402 = $320;
    $403 = $402;
   }
   $316 = $403;
   $404 = $316;
   __THREW__ = 0;
   invoke_viii(330,($380|0),(9539|0),($404|0));
   $405 = __THREW__; __THREW__ = 0;
   $406 = $405&1;
   if ($406) {
    $411 = ___cxa_find_matching_catch()|0;
    $412 = tempRet0;
    $334 = $411;
    $335 = $412;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($333);
    $1258 = $334;
    $1259 = $335;
    ___resumeException($1258|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($333);
    $407 = $childEle;
    $408 = ((($ce)) + 12|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = HEAP32[$409>>2]|0;
    __ZN8tinyxml210XMLElement12SetAttributeEPKci($407,9550,$410);
    STACKTOP = sp;return;
   }
  }
  $413 = $valueLen;
  $414 = ($413|0)>(1);
  if (!($414)) {
   STACKTOP = sp;return;
  }
  $314 = $valStr;
  $315 = 9392;
  $415 = $314;
  $313 = $415;
  $416 = $313;
  $312 = $416;
  $417 = $312;
  $311 = $417;
  $418 = $315;
  $419 = $315;
  $420 = (__ZNSt3__111char_traitsIcE6lengthEPKc($419)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($415,$418,$420);
  $iVal = 0;
  while(1) {
   $421 = $iVal;
   $422 = $valueLen;
   $423 = ($421|0)<($422|0);
   if (!($423)) {
    label = 18;
    break;
   }
   $424 = $iVal;
   $425 = $valueLen;
   $426 = (($425) - 1)|0;
   $427 = ($424|0)!=($426|0);
   $428 = $iVal;
   $429 = ((($ce)) + 12|0);
   $430 = HEAP32[$429>>2]|0;
   $431 = (($430) + ($428<<2)|0);
   $432 = HEAP32[$431>>2]|0;
   __THREW__ = 0;
   if ($427) {
    HEAP32[$vararg_buffer>>2] = $432;
    (_sprintf($tempValChar,9556,$vararg_buffer)|0);
    $433 = __THREW__; __THREW__ = 0;
    $434 = $433&1;
    if ($434) {
     label = 14;
     break;
    }
   } else {
    HEAP32[$vararg_buffer6>>2] = $432;
    (_sprintf($tempValChar,9561,$vararg_buffer6)|0);
    $437 = __THREW__; __THREW__ = 0;
    $438 = $437&1;
    if ($438) {
     label = 14;
     break;
    }
   }
   $309 = $valStr;
   $310 = $tempValChar;
   $439 = $309;
   $440 = $310;
   __THREW__ = 0;
   (invoke_iii(331,($439|0),($440|0))|0);
   $441 = __THREW__; __THREW__ = 0;
   $442 = $441&1;
   if ($442) {
    label = 14;
    break;
   }
   $443 = $iVal;
   $444 = (($443) + 1)|0;
   $iVal = $444;
  }
  do {
   if ((label|0) == 18) {
    $445 = $childEle;
    $446 = $kernelType;
    $447 = $valueLen;
    __THREW__ = 0;
    invoke_viii(332,($336|0),($446|0),($447|0));
    $448 = __THREW__; __THREW__ = 0;
    $449 = $448&1;
    if ($449) {
     label = 14;
    } else {
     $308 = $336;
     $450 = $308;
     $307 = $450;
     $451 = $307;
     $306 = $451;
     $452 = $306;
     $305 = $452;
     $453 = $305;
     $304 = $453;
     $454 = $304;
     $303 = $454;
     $455 = $303;
     $456 = HEAP8[$455>>0]|0;
     $457 = $456&255;
     $458 = $457 & 1;
     $459 = ($458|0)!=(0);
     if ($459) {
      $297 = $452;
      $460 = $297;
      $296 = $460;
      $461 = $296;
      $295 = $461;
      $462 = $295;
      $463 = ((($462)) + 8|0);
      $464 = HEAP32[$463>>2]|0;
      $471 = $464;
     } else {
      $302 = $452;
      $465 = $302;
      $301 = $465;
      $466 = $301;
      $300 = $466;
      $467 = $300;
      $468 = ((($467)) + 1|0);
      $299 = $468;
      $469 = $299;
      $298 = $469;
      $470 = $298;
      $471 = $470;
     }
     $294 = $471;
     $472 = $294;
     __THREW__ = 0;
     invoke_viii(330,($445|0),(9539|0),($472|0));
     $473 = __THREW__; __THREW__ = 0;
     $474 = $473&1;
     if ($474) {
      $501 = ___cxa_find_matching_catch()|0;
      $502 = tempRet0;
      $334 = $501;
      $335 = $502;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($336);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($336);
     $475 = $childEle;
     $293 = $valStr;
     $476 = $293;
     $292 = $476;
     $477 = $292;
     $291 = $477;
     $478 = $291;
     $290 = $478;
     $479 = $290;
     $289 = $479;
     $480 = $289;
     $288 = $480;
     $481 = $288;
     $482 = HEAP8[$481>>0]|0;
     $483 = $482&255;
     $484 = $483 & 1;
     $485 = ($484|0)!=(0);
     if ($485) {
      $282 = $478;
      $486 = $282;
      $281 = $486;
      $487 = $281;
      $280 = $487;
      $488 = $280;
      $489 = ((($488)) + 8|0);
      $490 = HEAP32[$489>>2]|0;
      $497 = $490;
     } else {
      $287 = $478;
      $491 = $287;
      $286 = $491;
      $492 = $286;
      $285 = $492;
      $493 = $285;
      $494 = ((($493)) + 1|0);
      $284 = $494;
      $495 = $284;
      $283 = $495;
      $496 = $283;
      $497 = $496;
     }
     $279 = $497;
     $498 = $279;
     __THREW__ = 0;
     invoke_viii(330,($475|0),(9550|0),($498|0));
     $499 = __THREW__; __THREW__ = 0;
     $500 = $499&1;
     if ($500) {
      label = 14;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   $435 = ___cxa_find_matching_catch()|0;
   $436 = tempRet0;
   $334 = $435;
   $335 = $436;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr);
  $1258 = $334;
  $1259 = $335;
  ___resumeException($1258|0);
  // unreachable;
 }
 $503 = $kernelType;
 $504 = ($503|0)==(2);
 if ($504) {
  $505 = $valueLen;
  $506 = ($505|0)==(1);
  if ($506) {
   $507 = $childEle;
   $508 = $kernelType;
   __Z17kerneltype2string11e_dx_type_ti($337,$508,1);
   $278 = $337;
   $509 = $278;
   $277 = $509;
   $510 = $277;
   $276 = $510;
   $511 = $276;
   $275 = $511;
   $512 = $275;
   $274 = $512;
   $513 = $274;
   $273 = $513;
   $514 = $273;
   $515 = HEAP8[$514>>0]|0;
   $516 = $515&255;
   $517 = $516 & 1;
   $518 = ($517|0)!=(0);
   if ($518) {
    $267 = $511;
    $519 = $267;
    $266 = $519;
    $520 = $266;
    $265 = $520;
    $521 = $265;
    $522 = ((($521)) + 8|0);
    $523 = HEAP32[$522>>2]|0;
    $530 = $523;
   } else {
    $272 = $511;
    $524 = $272;
    $271 = $524;
    $525 = $271;
    $270 = $525;
    $526 = $270;
    $527 = ((($526)) + 1|0);
    $269 = $527;
    $528 = $269;
    $268 = $528;
    $529 = $268;
    $530 = $529;
   }
   $264 = $530;
   $531 = $264;
   __THREW__ = 0;
   invoke_viii(330,($507|0),(9539|0),($531|0));
   $532 = __THREW__; __THREW__ = 0;
   $533 = $532&1;
   if ($533) {
    $538 = ___cxa_find_matching_catch()|0;
    $539 = tempRet0;
    $334 = $538;
    $335 = $539;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($337);
    $1258 = $334;
    $1259 = $335;
    ___resumeException($1258|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($337);
    $534 = $childEle;
    $535 = ((($ce)) + 12|0);
    $536 = HEAP32[$535>>2]|0;
    $537 = +HEAPF64[$536>>3];
    __ZN8tinyxml210XMLElement12SetAttributeEPKcd($534,9550,$537);
    STACKTOP = sp;return;
   }
  }
  $540 = $valueLen;
  $541 = ($540|0)>(1);
  if (!($541)) {
   STACKTOP = sp;return;
  }
  $262 = $valStr1;
  $263 = 9392;
  $542 = $262;
  $261 = $542;
  $543 = $261;
  $260 = $543;
  $544 = $260;
  $259 = $544;
  $545 = $263;
  $546 = $263;
  $547 = (__ZNSt3__111char_traitsIcE6lengthEPKc($546)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($542,$545,$547);
  $iVal2 = 0;
  while(1) {
   $548 = $iVal2;
   $549 = $valueLen;
   $550 = ($548|0)<($549|0);
   if (!($550)) {
    label = 47;
    break;
   }
   $551 = $iVal2;
   $552 = $valueLen;
   $553 = (($552) - 1)|0;
   $554 = ($551|0)!=($553|0);
   $555 = $iVal2;
   $556 = ((($ce)) + 12|0);
   $557 = HEAP32[$556>>2]|0;
   $558 = (($557) + ($555<<3)|0);
   $559 = +HEAPF64[$558>>3];
   __THREW__ = 0;
   if ($554) {
    HEAPF64[$vararg_buffer9>>3] = $559;
    (_sprintf($tempValChar3,9564,$vararg_buffer9)|0);
    $560 = __THREW__; __THREW__ = 0;
    $561 = $560&1;
    if ($561) {
     label = 43;
     break;
    }
   } else {
    HEAPF64[$vararg_buffer12>>3] = $559;
    (_sprintf($tempValChar3,9570,$vararg_buffer12)|0);
    $564 = __THREW__; __THREW__ = 0;
    $565 = $564&1;
    if ($565) {
     label = 43;
     break;
    }
   }
   $257 = $valStr1;
   $258 = $tempValChar3;
   $566 = $257;
   $567 = $258;
   __THREW__ = 0;
   (invoke_iii(331,($566|0),($567|0))|0);
   $568 = __THREW__; __THREW__ = 0;
   $569 = $568&1;
   if ($569) {
    label = 43;
    break;
   }
   $570 = $iVal2;
   $571 = (($570) + 1)|0;
   $iVal2 = $571;
  }
  do {
   if ((label|0) == 47) {
    $572 = $childEle;
    $573 = $kernelType;
    $574 = $valueLen;
    __THREW__ = 0;
    invoke_viii(332,($338|0),($573|0),($574|0));
    $575 = __THREW__; __THREW__ = 0;
    $576 = $575&1;
    if ($576) {
     label = 43;
    } else {
     $256 = $338;
     $577 = $256;
     $255 = $577;
     $578 = $255;
     $254 = $578;
     $579 = $254;
     $253 = $579;
     $580 = $253;
     $252 = $580;
     $581 = $252;
     $251 = $581;
     $582 = $251;
     $583 = HEAP8[$582>>0]|0;
     $584 = $583&255;
     $585 = $584 & 1;
     $586 = ($585|0)!=(0);
     if ($586) {
      $245 = $579;
      $587 = $245;
      $244 = $587;
      $588 = $244;
      $243 = $588;
      $589 = $243;
      $590 = ((($589)) + 8|0);
      $591 = HEAP32[$590>>2]|0;
      $598 = $591;
     } else {
      $250 = $579;
      $592 = $250;
      $249 = $592;
      $593 = $249;
      $248 = $593;
      $594 = $248;
      $595 = ((($594)) + 1|0);
      $247 = $595;
      $596 = $247;
      $246 = $596;
      $597 = $246;
      $598 = $597;
     }
     $242 = $598;
     $599 = $242;
     __THREW__ = 0;
     invoke_viii(330,($572|0),(9539|0),($599|0));
     $600 = __THREW__; __THREW__ = 0;
     $601 = $600&1;
     if ($601) {
      $628 = ___cxa_find_matching_catch()|0;
      $629 = tempRet0;
      $334 = $628;
      $335 = $629;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($338);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($338);
     $602 = $childEle;
     $241 = $valStr1;
     $603 = $241;
     $240 = $603;
     $604 = $240;
     $239 = $604;
     $605 = $239;
     $238 = $605;
     $606 = $238;
     $237 = $606;
     $607 = $237;
     $236 = $607;
     $608 = $236;
     $609 = HEAP8[$608>>0]|0;
     $610 = $609&255;
     $611 = $610 & 1;
     $612 = ($611|0)!=(0);
     if ($612) {
      $230 = $605;
      $613 = $230;
      $229 = $613;
      $614 = $229;
      $228 = $614;
      $615 = $228;
      $616 = ((($615)) + 8|0);
      $617 = HEAP32[$616>>2]|0;
      $624 = $617;
     } else {
      $235 = $605;
      $618 = $235;
      $234 = $618;
      $619 = $234;
      $233 = $619;
      $620 = $233;
      $621 = ((($620)) + 1|0);
      $232 = $621;
      $622 = $232;
      $231 = $622;
      $623 = $231;
      $624 = $623;
     }
     $227 = $624;
     $625 = $227;
     __THREW__ = 0;
     invoke_viii(330,($602|0),(9550|0),($625|0));
     $626 = __THREW__; __THREW__ = 0;
     $627 = $626&1;
     if ($627) {
      label = 43;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr1);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 43) {
   $562 = ___cxa_find_matching_catch()|0;
   $563 = tempRet0;
   $334 = $562;
   $335 = $563;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr1);
  $1258 = $334;
  $1259 = $335;
  ___resumeException($1258|0);
  // unreachable;
 }
 $630 = $kernelType;
 $631 = ($630|0)==(6);
 if ($631) {
  $632 = $valueLen;
  $633 = ($632|0)==(1);
  if ($633) {
   $634 = $childEle;
   $635 = $kernelType;
   __Z17kerneltype2string11e_dx_type_ti($339,$635,1);
   $226 = $339;
   $636 = $226;
   $225 = $636;
   $637 = $225;
   $224 = $637;
   $638 = $224;
   $223 = $638;
   $639 = $223;
   $222 = $639;
   $640 = $222;
   $221 = $640;
   $641 = $221;
   $642 = HEAP8[$641>>0]|0;
   $643 = $642&255;
   $644 = $643 & 1;
   $645 = ($644|0)!=(0);
   if ($645) {
    $215 = $638;
    $646 = $215;
    $214 = $646;
    $647 = $214;
    $213 = $647;
    $648 = $213;
    $649 = ((($648)) + 8|0);
    $650 = HEAP32[$649>>2]|0;
    $657 = $650;
   } else {
    $220 = $638;
    $651 = $220;
    $219 = $651;
    $652 = $219;
    $218 = $652;
    $653 = $218;
    $654 = ((($653)) + 1|0);
    $217 = $654;
    $655 = $217;
    $216 = $655;
    $656 = $216;
    $657 = $656;
   }
   $212 = $657;
   $658 = $212;
   __THREW__ = 0;
   invoke_viii(330,($634|0),(9539|0),($658|0));
   $659 = __THREW__; __THREW__ = 0;
   $660 = $659&1;
   if ($660) {
    $664 = ___cxa_find_matching_catch()|0;
    $665 = tempRet0;
    $334 = $664;
    $335 = $665;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($339);
    $1258 = $334;
    $1259 = $335;
    ___resumeException($1258|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($339);
    $661 = $childEle;
    $662 = ((($ce)) + 12|0);
    $663 = HEAP32[$662>>2]|0;
    __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($661,9550,$663);
    STACKTOP = sp;return;
   }
  }
  $666 = $valueLen;
  $667 = ($666|0)>(1);
  if (!($667)) {
   STACKTOP = sp;return;
  }
  $195 = $valStr4;
  $196 = 9392;
  $668 = $195;
  $194 = $668;
  $669 = $194;
  $193 = $669;
  $670 = $193;
  $192 = $670;
  $671 = $196;
  $672 = $196;
  $673 = (__ZNSt3__111char_traitsIcE6lengthEPKc($672)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($668,$671,$673);
  $iVal5 = 0;
  while(1) {
   $674 = $iVal5;
   $675 = $valueLen;
   $676 = ($674|0)<($675|0);
   if (!($676)) {
    label = 76;
    break;
   }
   $677 = $iVal5;
   $678 = $valueLen;
   $679 = (($678) - 1)|0;
   $680 = ($677|0)!=($679|0);
   $681 = $iVal5;
   $682 = ((($ce)) + 12|0);
   $683 = HEAP32[$682>>2]|0;
   $684 = (($683) + ($681<<2)|0);
   $685 = HEAP32[$684>>2]|0;
   if ($680) {
    $190 = $valStr4;
    $191 = $685;
    $686 = $190;
    $687 = $191;
    __THREW__ = 0;
    (invoke_iii(331,($686|0),($687|0))|0);
    $688 = __THREW__; __THREW__ = 0;
    $689 = $688&1;
    if ($689) {
     label = 73;
     break;
    }
    $188 = $valStr4;
    $189 = 9574;
    $690 = $188;
    $691 = $189;
    __THREW__ = 0;
    (invoke_iii(331,($690|0),($691|0))|0);
    $692 = __THREW__; __THREW__ = 0;
    $693 = $692&1;
    if ($693) {
     label = 73;
     break;
    }
   } else {
    $186 = $valStr4;
    $187 = $685;
    $696 = $186;
    $697 = $187;
    __THREW__ = 0;
    (invoke_iii(331,($696|0),($697|0))|0);
    $698 = __THREW__; __THREW__ = 0;
    $699 = $698&1;
    if ($699) {
     label = 73;
     break;
    }
   }
   $700 = $iVal5;
   $701 = (($700) + 1)|0;
   $iVal5 = $701;
  }
  do {
   if ((label|0) == 76) {
    $702 = $childEle;
    $703 = $kernelType;
    $704 = $valueLen;
    __THREW__ = 0;
    invoke_viii(332,($340|0),($703|0),($704|0));
    $705 = __THREW__; __THREW__ = 0;
    $706 = $705&1;
    if ($706) {
     label = 73;
    } else {
     $185 = $340;
     $707 = $185;
     $184 = $707;
     $708 = $184;
     $183 = $708;
     $709 = $183;
     $182 = $709;
     $710 = $182;
     $181 = $710;
     $711 = $181;
     $180 = $711;
     $712 = $180;
     $713 = HEAP8[$712>>0]|0;
     $714 = $713&255;
     $715 = $714 & 1;
     $716 = ($715|0)!=(0);
     if ($716) {
      $174 = $709;
      $717 = $174;
      $173 = $717;
      $718 = $173;
      $172 = $718;
      $719 = $172;
      $720 = ((($719)) + 8|0);
      $721 = HEAP32[$720>>2]|0;
      $728 = $721;
     } else {
      $179 = $709;
      $722 = $179;
      $178 = $722;
      $723 = $178;
      $177 = $723;
      $724 = $177;
      $725 = ((($724)) + 1|0);
      $176 = $725;
      $726 = $176;
      $175 = $726;
      $727 = $175;
      $728 = $727;
     }
     $171 = $728;
     $729 = $171;
     __THREW__ = 0;
     invoke_viii(330,($702|0),(9539|0),($729|0));
     $730 = __THREW__; __THREW__ = 0;
     $731 = $730&1;
     if ($731) {
      $758 = ___cxa_find_matching_catch()|0;
      $759 = tempRet0;
      $334 = $758;
      $335 = $759;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($340);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($340);
     $732 = $childEle;
     $170 = $valStr4;
     $733 = $170;
     $169 = $733;
     $734 = $169;
     $168 = $734;
     $735 = $168;
     $167 = $735;
     $736 = $167;
     $166 = $736;
     $737 = $166;
     $165 = $737;
     $738 = $165;
     $739 = HEAP8[$738>>0]|0;
     $740 = $739&255;
     $741 = $740 & 1;
     $742 = ($741|0)!=(0);
     if ($742) {
      $159 = $735;
      $743 = $159;
      $158 = $743;
      $744 = $158;
      $157 = $744;
      $745 = $157;
      $746 = ((($745)) + 8|0);
      $747 = HEAP32[$746>>2]|0;
      $754 = $747;
     } else {
      $164 = $735;
      $748 = $164;
      $163 = $748;
      $749 = $163;
      $162 = $749;
      $750 = $162;
      $751 = ((($750)) + 1|0);
      $161 = $751;
      $752 = $161;
      $160 = $752;
      $753 = $160;
      $754 = $753;
     }
     $156 = $754;
     $755 = $156;
     __THREW__ = 0;
     invoke_viii(330,($732|0),(9550|0),($755|0));
     $756 = __THREW__; __THREW__ = 0;
     $757 = $756&1;
     if ($757) {
      label = 73;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr4);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 73) {
   $694 = ___cxa_find_matching_catch()|0;
   $695 = tempRet0;
   $334 = $694;
   $335 = $695;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr4);
  $1258 = $334;
  $1259 = $335;
  ___resumeException($1258|0);
  // unreachable;
 }
 $760 = $kernelType;
 $761 = ($760|0)==(3);
 if ($761) {
  $762 = $valueLen;
  $763 = ($762|0)==(1);
  if ($763) {
   $764 = ((($ce)) + 12|0);
   $765 = HEAP32[$764>>2]|0;
   $766 = +HEAPF64[$765>>3];
   $767 = ((($ce)) + 12|0);
   $768 = HEAP32[$767>>2]|0;
   $769 = ((($768)) + 8|0);
   $770 = +HEAPF64[$769>>3];
   HEAPF64[$vararg_buffer15>>3] = $766;
   $vararg_ptr18 = ((($vararg_buffer15)) + 8|0);
   HEAPF64[$vararg_ptr18>>3] = $770;
   (_sprintf($vector2dStr,9577,$vararg_buffer15)|0);
   $771 = $childEle;
   $772 = $kernelType;
   __Z17kerneltype2string11e_dx_type_ti($341,$772,1);
   $155 = $341;
   $773 = $155;
   $154 = $773;
   $774 = $154;
   $153 = $774;
   $775 = $153;
   $152 = $775;
   $776 = $152;
   $151 = $776;
   $777 = $151;
   $150 = $777;
   $778 = $150;
   $779 = HEAP8[$778>>0]|0;
   $780 = $779&255;
   $781 = $780 & 1;
   $782 = ($781|0)!=(0);
   if ($782) {
    $144 = $775;
    $783 = $144;
    $143 = $783;
    $784 = $143;
    $142 = $784;
    $785 = $142;
    $786 = ((($785)) + 8|0);
    $787 = HEAP32[$786>>2]|0;
    $794 = $787;
   } else {
    $149 = $775;
    $788 = $149;
    $148 = $788;
    $789 = $148;
    $147 = $789;
    $790 = $147;
    $791 = ((($790)) + 1|0);
    $146 = $791;
    $792 = $146;
    $145 = $792;
    $793 = $145;
    $794 = $793;
   }
   $141 = $794;
   $795 = $141;
   __THREW__ = 0;
   invoke_viii(330,($771|0),(9539|0),($795|0));
   $796 = __THREW__; __THREW__ = 0;
   $797 = $796&1;
   if ($797) {
    $799 = ___cxa_find_matching_catch()|0;
    $800 = tempRet0;
    $334 = $799;
    $335 = $800;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($341);
    $1258 = $334;
    $1259 = $335;
    ___resumeException($1258|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($341);
    $798 = $childEle;
    __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($798,9550,$vector2dStr);
    STACKTOP = sp;return;
   }
  }
  $801 = $valueLen;
  $802 = ($801|0)>(1);
  if (!($802)) {
   STACKTOP = sp;return;
  }
  $124 = $valStr7;
  $125 = 9392;
  $803 = $124;
  $123 = $803;
  $804 = $123;
  $122 = $804;
  $805 = $122;
  $121 = $805;
  $806 = $125;
  $807 = $125;
  $808 = (__ZNSt3__111char_traitsIcE6lengthEPKc($807)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($803,$806,$808);
  $iVal8 = 0;
  while(1) {
   $809 = $iVal8;
   $810 = $valueLen;
   $811 = ($809|0)<($810|0);
   if (!($811)) {
    label = 105;
    break;
   }
   $812 = $iVal8;
   $813 = $valueLen;
   $814 = (($813) - 1)|0;
   $815 = ($812|0)!=($814|0);
   $816 = $iVal8;
   $817 = ((($ce)) + 12|0);
   $818 = HEAP32[$817>>2]|0;
   $819 = (($818) + ($816<<4)|0);
   $820 = +HEAPF64[$819>>3];
   $821 = $iVal8;
   $822 = ((($ce)) + 12|0);
   $823 = HEAP32[$822>>2]|0;
   $824 = (($823) + ($821<<4)|0);
   $825 = ((($824)) + 8|0);
   $826 = +HEAPF64[$825>>3];
   __THREW__ = 0;
   if ($815) {
    HEAPF64[$vararg_buffer19>>3] = $820;
    $vararg_ptr22 = ((($vararg_buffer19)) + 8|0);
    HEAPF64[$vararg_ptr22>>3] = $826;
    (_sprintf($tempValChar9,9585,$vararg_buffer19)|0);
    $827 = __THREW__; __THREW__ = 0;
    $828 = $827&1;
    if ($828) {
     label = 101;
     break;
    }
   } else {
    HEAPF64[$vararg_buffer23>>3] = $820;
    $vararg_ptr26 = ((($vararg_buffer23)) + 8|0);
    HEAPF64[$vararg_ptr26>>3] = $826;
    (_sprintf($tempValChar9,9577,$vararg_buffer23)|0);
    $831 = __THREW__; __THREW__ = 0;
    $832 = $831&1;
    if ($832) {
     label = 101;
     break;
    }
   }
   $119 = $valStr7;
   $120 = $tempValChar9;
   $833 = $119;
   $834 = $120;
   __THREW__ = 0;
   (invoke_iii(331,($833|0),($834|0))|0);
   $835 = __THREW__; __THREW__ = 0;
   $836 = $835&1;
   if ($836) {
    label = 101;
    break;
   }
   $837 = $iVal8;
   $838 = (($837) + 1)|0;
   $iVal8 = $838;
  }
  do {
   if ((label|0) == 105) {
    $839 = $childEle;
    $840 = $kernelType;
    $841 = $valueLen;
    __THREW__ = 0;
    invoke_viii(332,($342|0),($840|0),($841|0));
    $842 = __THREW__; __THREW__ = 0;
    $843 = $842&1;
    if ($843) {
     label = 101;
    } else {
     $118 = $342;
     $844 = $118;
     $117 = $844;
     $845 = $117;
     $116 = $845;
     $846 = $116;
     $115 = $846;
     $847 = $115;
     $114 = $847;
     $848 = $114;
     $113 = $848;
     $849 = $113;
     $850 = HEAP8[$849>>0]|0;
     $851 = $850&255;
     $852 = $851 & 1;
     $853 = ($852|0)!=(0);
     if ($853) {
      $107 = $846;
      $854 = $107;
      $106 = $854;
      $855 = $106;
      $105 = $855;
      $856 = $105;
      $857 = ((($856)) + 8|0);
      $858 = HEAP32[$857>>2]|0;
      $865 = $858;
     } else {
      $112 = $846;
      $859 = $112;
      $111 = $859;
      $860 = $111;
      $110 = $860;
      $861 = $110;
      $862 = ((($861)) + 1|0);
      $109 = $862;
      $863 = $109;
      $108 = $863;
      $864 = $108;
      $865 = $864;
     }
     $104 = $865;
     $866 = $104;
     __THREW__ = 0;
     invoke_viii(330,($839|0),(9539|0),($866|0));
     $867 = __THREW__; __THREW__ = 0;
     $868 = $867&1;
     if ($868) {
      $895 = ___cxa_find_matching_catch()|0;
      $896 = tempRet0;
      $334 = $895;
      $335 = $896;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($342);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($342);
     $869 = $childEle;
     $103 = $valStr7;
     $870 = $103;
     $102 = $870;
     $871 = $102;
     $101 = $871;
     $872 = $101;
     $100 = $872;
     $873 = $100;
     $99 = $873;
     $874 = $99;
     $98 = $874;
     $875 = $98;
     $876 = HEAP8[$875>>0]|0;
     $877 = $876&255;
     $878 = $877 & 1;
     $879 = ($878|0)!=(0);
     if ($879) {
      $92 = $872;
      $880 = $92;
      $91 = $880;
      $881 = $91;
      $90 = $881;
      $882 = $90;
      $883 = ((($882)) + 8|0);
      $884 = HEAP32[$883>>2]|0;
      $891 = $884;
     } else {
      $97 = $872;
      $885 = $97;
      $96 = $885;
      $886 = $96;
      $95 = $886;
      $887 = $95;
      $888 = ((($887)) + 1|0);
      $94 = $888;
      $889 = $94;
      $93 = $889;
      $890 = $93;
      $891 = $890;
     }
     $89 = $891;
     $892 = $89;
     __THREW__ = 0;
     invoke_viii(330,($869|0),(9550|0),($892|0));
     $893 = __THREW__; __THREW__ = 0;
     $894 = $893&1;
     if ($894) {
      label = 101;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr7);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 101) {
   $829 = ___cxa_find_matching_catch()|0;
   $830 = tempRet0;
   $334 = $829;
   $335 = $830;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr7);
  $1258 = $334;
  $1259 = $335;
  ___resumeException($1258|0);
  // unreachable;
 }
 $897 = $kernelType;
 $898 = ($897|0)==(4);
 if ($898) {
  $899 = $valueLen;
  $900 = ($899|0)==(1);
  if ($900) {
   $901 = ((($ce)) + 12|0);
   $902 = HEAP32[$901>>2]|0;
   $903 = +HEAPF64[$902>>3];
   $904 = ((($ce)) + 12|0);
   $905 = HEAP32[$904>>2]|0;
   $906 = ((($905)) + 8|0);
   $907 = +HEAPF64[$906>>3];
   $908 = ((($ce)) + 12|0);
   $909 = HEAP32[$908>>2]|0;
   $910 = ((($909)) + 16|0);
   $911 = +HEAPF64[$910>>3];
   HEAPF64[$vararg_buffer27>>3] = $903;
   $vararg_ptr30 = ((($vararg_buffer27)) + 8|0);
   HEAPF64[$vararg_ptr30>>3] = $907;
   $vararg_ptr31 = ((($vararg_buffer27)) + 16|0);
   HEAPF64[$vararg_ptr31>>3] = $911;
   (_sprintf($vector3dStr,9595,$vararg_buffer27)|0);
   $912 = $childEle;
   $913 = $kernelType;
   __Z17kerneltype2string11e_dx_type_ti($343,$913,1);
   $73 = $343;
   $914 = $73;
   $72 = $914;
   $915 = $72;
   $71 = $915;
   $916 = $71;
   $70 = $916;
   $917 = $70;
   $69 = $917;
   $918 = $69;
   $68 = $918;
   $919 = $68;
   $920 = HEAP8[$919>>0]|0;
   $921 = $920&255;
   $922 = $921 & 1;
   $923 = ($922|0)!=(0);
   if ($923) {
    $62 = $916;
    $924 = $62;
    $61 = $924;
    $925 = $61;
    $60 = $925;
    $926 = $60;
    $927 = ((($926)) + 8|0);
    $928 = HEAP32[$927>>2]|0;
    $935 = $928;
   } else {
    $67 = $916;
    $929 = $67;
    $66 = $929;
    $930 = $66;
    $65 = $930;
    $931 = $65;
    $932 = ((($931)) + 1|0);
    $64 = $932;
    $933 = $64;
    $63 = $933;
    $934 = $63;
    $935 = $934;
   }
   $59 = $935;
   $936 = $59;
   __THREW__ = 0;
   invoke_viii(330,($912|0),(9539|0),($936|0));
   $937 = __THREW__; __THREW__ = 0;
   $938 = $937&1;
   if ($938) {
    $940 = ___cxa_find_matching_catch()|0;
    $941 = tempRet0;
    $334 = $940;
    $335 = $941;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($343);
    $1258 = $334;
    $1259 = $335;
    ___resumeException($1258|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($343);
    $939 = $childEle;
    __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($939,9550,$vector3dStr);
    STACKTOP = sp;return;
   }
  }
  $942 = $valueLen;
  $943 = ($942|0)>(1);
  if (!($943)) {
   STACKTOP = sp;return;
  }
  $55 = $valStr10;
  $56 = 9392;
  $944 = $55;
  $54 = $944;
  $945 = $54;
  $53 = $945;
  $946 = $53;
  $52 = $946;
  $947 = $56;
  $948 = $56;
  $949 = (__ZNSt3__111char_traitsIcE6lengthEPKc($948)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($944,$947,$949);
  $iVal11 = 0;
  while(1) {
   $950 = $iVal11;
   $951 = $valueLen;
   $952 = ($950|0)<($951|0);
   if (!($952)) {
    label = 134;
    break;
   }
   $953 = $iVal11;
   $954 = $valueLen;
   $955 = (($954) - 1)|0;
   $956 = ($953|0)!=($955|0);
   $957 = $iVal11;
   $958 = ((($ce)) + 12|0);
   $959 = HEAP32[$958>>2]|0;
   $960 = (($959) + (($957*24)|0)|0);
   $961 = +HEAPF64[$960>>3];
   $962 = $iVal11;
   $963 = ((($ce)) + 12|0);
   $964 = HEAP32[$963>>2]|0;
   $965 = (($964) + (($962*24)|0)|0);
   $966 = ((($965)) + 8|0);
   $967 = +HEAPF64[$966>>3];
   $968 = $iVal11;
   $969 = ((($ce)) + 12|0);
   $970 = HEAP32[$969>>2]|0;
   $971 = (($970) + (($968*24)|0)|0);
   $972 = ((($971)) + 16|0);
   $973 = +HEAPF64[$972>>3];
   __THREW__ = 0;
   if ($956) {
    HEAPF64[$vararg_buffer32>>3] = $961;
    $vararg_ptr35 = ((($vararg_buffer32)) + 8|0);
    HEAPF64[$vararg_ptr35>>3] = $967;
    $vararg_ptr36 = ((($vararg_buffer32)) + 16|0);
    HEAPF64[$vararg_ptr36>>3] = $973;
    (_sprintf($tempValChar12,9604,$vararg_buffer32)|0);
    $974 = __THREW__; __THREW__ = 0;
    $975 = $974&1;
    if ($975) {
     label = 130;
     break;
    }
   } else {
    HEAPF64[$vararg_buffer37>>3] = $961;
    $vararg_ptr40 = ((($vararg_buffer37)) + 8|0);
    HEAPF64[$vararg_ptr40>>3] = $967;
    $vararg_ptr41 = ((($vararg_buffer37)) + 16|0);
    HEAPF64[$vararg_ptr41>>3] = $973;
    (_sprintf($tempValChar12,9618,$vararg_buffer37)|0);
    $978 = __THREW__; __THREW__ = 0;
    $979 = $978&1;
    if ($979) {
     label = 130;
     break;
    }
   }
   $50 = $valStr10;
   $51 = $tempValChar12;
   $980 = $50;
   $981 = $51;
   __THREW__ = 0;
   (invoke_iii(331,($980|0),($981|0))|0);
   $982 = __THREW__; __THREW__ = 0;
   $983 = $982&1;
   if ($983) {
    label = 130;
    break;
   }
   $984 = $iVal11;
   $985 = (($984) + 1)|0;
   $iVal11 = $985;
  }
  do {
   if ((label|0) == 134) {
    $986 = $childEle;
    $987 = $kernelType;
    $988 = $valueLen;
    __THREW__ = 0;
    invoke_viii(332,($344|0),($987|0),($988|0));
    $989 = __THREW__; __THREW__ = 0;
    $990 = $989&1;
    if ($990) {
     label = 130;
    } else {
     $49 = $344;
     $991 = $49;
     $48 = $991;
     $992 = $48;
     $47 = $992;
     $993 = $47;
     $46 = $993;
     $994 = $46;
     $45 = $994;
     $995 = $45;
     $44 = $995;
     $996 = $44;
     $997 = HEAP8[$996>>0]|0;
     $998 = $997&255;
     $999 = $998 & 1;
     $1000 = ($999|0)!=(0);
     if ($1000) {
      $38 = $993;
      $1001 = $38;
      $37 = $1001;
      $1002 = $37;
      $36 = $1002;
      $1003 = $36;
      $1004 = ((($1003)) + 8|0);
      $1005 = HEAP32[$1004>>2]|0;
      $1012 = $1005;
     } else {
      $43 = $993;
      $1006 = $43;
      $42 = $1006;
      $1007 = $42;
      $41 = $1007;
      $1008 = $41;
      $1009 = ((($1008)) + 1|0);
      $40 = $1009;
      $1010 = $40;
      $39 = $1010;
      $1011 = $39;
      $1012 = $1011;
     }
     $35 = $1012;
     $1013 = $35;
     __THREW__ = 0;
     invoke_viii(330,($986|0),(9539|0),($1013|0));
     $1014 = __THREW__; __THREW__ = 0;
     $1015 = $1014&1;
     if ($1015) {
      $1042 = ___cxa_find_matching_catch()|0;
      $1043 = tempRet0;
      $334 = $1042;
      $335 = $1043;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($344);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($344);
     $1016 = $childEle;
     $34 = $valStr10;
     $1017 = $34;
     $33 = $1017;
     $1018 = $33;
     $32 = $1018;
     $1019 = $32;
     $31 = $1019;
     $1020 = $31;
     $30 = $1020;
     $1021 = $30;
     $29 = $1021;
     $1022 = $29;
     $1023 = HEAP8[$1022>>0]|0;
     $1024 = $1023&255;
     $1025 = $1024 & 1;
     $1026 = ($1025|0)!=(0);
     if ($1026) {
      $23 = $1019;
      $1027 = $23;
      $22 = $1027;
      $1028 = $22;
      $21 = $1028;
      $1029 = $21;
      $1030 = ((($1029)) + 8|0);
      $1031 = HEAP32[$1030>>2]|0;
      $1038 = $1031;
     } else {
      $28 = $1019;
      $1032 = $28;
      $27 = $1032;
      $1033 = $27;
      $26 = $1033;
      $1034 = $26;
      $1035 = ((($1034)) + 1|0);
      $25 = $1035;
      $1036 = $25;
      $24 = $1036;
      $1037 = $24;
      $1038 = $1037;
     }
     $20 = $1038;
     $1039 = $20;
     __THREW__ = 0;
     invoke_viii(330,($1016|0),(9550|0),($1039|0));
     $1040 = __THREW__; __THREW__ = 0;
     $1041 = $1040&1;
     if ($1041) {
      label = 130;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr10);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 130) {
   $976 = ___cxa_find_matching_catch()|0;
   $977 = tempRet0;
   $334 = $976;
   $335 = $977;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr10);
  $1258 = $334;
  $1259 = $335;
  ___resumeException($1258|0);
  // unreachable;
 }
 $1044 = $kernelType;
 $1045 = ($1044|0)==(5);
 if (!($1045)) {
  $1201 = $kernelType;
  $1202 = ($1201|0)==(8);
  $1203 = $kernelType;
  $1204 = ($1203|0)==(9);
  $or$cond = $1202 | $1204;
  $1205 = $kernelType;
  $1206 = ($1205|0)==(10);
  $or$cond3 = $or$cond | $1206;
  $1207 = $kernelType;
  $1208 = ($1207|0)==(11);
  $or$cond5 = $or$cond3 | $1208;
  if (!($or$cond5)) {
   STACKTOP = sp;return;
  }
  $1209 = $childEle;
  $1210 = $kernelType;
  __Z17kerneltype2string11e_dx_type_ti($347,$1210,1);
  $211 = $347;
  $1211 = $211;
  $210 = $1211;
  $1212 = $210;
  $209 = $1212;
  $1213 = $209;
  $208 = $1213;
  $1214 = $208;
  $207 = $1214;
  $1215 = $207;
  $206 = $1215;
  $1216 = $206;
  $1217 = HEAP8[$1216>>0]|0;
  $1218 = $1217&255;
  $1219 = $1218 & 1;
  $1220 = ($1219|0)!=(0);
  if ($1220) {
   $200 = $1213;
   $1221 = $200;
   $199 = $1221;
   $1222 = $199;
   $198 = $1222;
   $1223 = $198;
   $1224 = ((($1223)) + 8|0);
   $1225 = HEAP32[$1224>>2]|0;
   $1232 = $1225;
  } else {
   $205 = $1213;
   $1226 = $205;
   $204 = $1226;
   $1227 = $204;
   $203 = $1227;
   $1228 = $203;
   $1229 = ((($1228)) + 1|0);
   $202 = $1229;
   $1230 = $202;
   $201 = $1230;
   $1231 = $201;
   $1232 = $1231;
  }
  $197 = $1232;
  $1233 = $197;
  __THREW__ = 0;
  invoke_viii(330,($1209|0),(9539|0),($1233|0));
  $1234 = __THREW__; __THREW__ = 0;
  $1235 = $1234&1;
  if ($1235) {
   $1256 = ___cxa_find_matching_catch()|0;
   $1257 = tempRet0;
   $334 = $1256;
   $335 = $1257;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($347);
   $1258 = $334;
   $1259 = $335;
   ___resumeException($1258|0);
   // unreachable;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($347);
  $1236 = $dx;
  $1237 = HEAP32[$1236>>2]|0;
  $1238 = ((($1237)) + 8|0);
  $1239 = HEAP32[$1238>>2]|0;
  $1240 = $331;
  $1241 = (FUNCTION_TABLE_ii[$1239 & 511]($1240)|0);
  $count = $1241;
  $iNode = 0;
  while(1) {
   $1242 = $iNode;
   $1243 = $count;
   $1244 = ($1242|0)<($1243|0);
   if (!($1244)) {
    break;
   }
   $1245 = $dx;
   $1246 = HEAP32[$1245>>2]|0;
   $1247 = ((($1246)) + 16|0);
   $1248 = HEAP32[$1247>>2]|0;
   $1249 = $331;
   $1250 = $iNode;
   $1251 = (FUNCTION_TABLE_iii[$1248 & 511]($1249,$1250)|0);
   $tempNode = $1251;
   $1252 = $tempNode;
   $1253 = $childEle;
   __Z9FormatXDOP7dx_nodePN8tinyxml210XMLElementE($1252,$1253);
   $1254 = $iNode;
   $1255 = (($1254) + 1)|0;
   $iNode = $1255;
  }
  STACKTOP = sp;return;
 }
 $1046 = $valueLen;
 $1047 = ($1046|0)==(1);
 if ($1047) {
  $1048 = ((($ce)) + 12|0);
  $1049 = HEAP32[$1048>>2]|0;
  $1050 = +HEAPF64[$1049>>3];
  $1051 = ((($ce)) + 12|0);
  $1052 = HEAP32[$1051>>2]|0;
  $1053 = ((($1052)) + 8|0);
  $1054 = +HEAPF64[$1053>>3];
  $1055 = ((($ce)) + 12|0);
  $1056 = HEAP32[$1055>>2]|0;
  $1057 = ((($1056)) + 16|0);
  $1058 = +HEAPF64[$1057>>3];
  $1059 = ((($ce)) + 12|0);
  $1060 = HEAP32[$1059>>2]|0;
  $1061 = ((($1060)) + 24|0);
  $1062 = +HEAPF64[$1061>>3];
  HEAPF64[$vararg_buffer42>>3] = $1050;
  $vararg_ptr45 = ((($vararg_buffer42)) + 8|0);
  HEAPF64[$vararg_ptr45>>3] = $1054;
  $vararg_ptr46 = ((($vararg_buffer42)) + 16|0);
  HEAPF64[$vararg_ptr46>>3] = $1058;
  $vararg_ptr47 = ((($vararg_buffer42)) + 24|0);
  HEAPF64[$vararg_ptr47>>3] = $1062;
  (_sprintf($vector4dStr,9630,$vararg_buffer42)|0);
  $1063 = $childEle;
  $1064 = $kernelType;
  __Z17kerneltype2string11e_dx_type_ti($345,$1064,1);
  $14 = $345;
  $1065 = $14;
  $13 = $1065;
  $1066 = $13;
  $12 = $1066;
  $1067 = $12;
  $11 = $1067;
  $1068 = $11;
  $10 = $1068;
  $1069 = $10;
  $9 = $1069;
  $1070 = $9;
  $1071 = HEAP8[$1070>>0]|0;
  $1072 = $1071&255;
  $1073 = $1072 & 1;
  $1074 = ($1073|0)!=(0);
  if ($1074) {
   $3 = $1067;
   $1075 = $3;
   $2 = $1075;
   $1076 = $2;
   $1 = $1076;
   $1077 = $1;
   $1078 = ((($1077)) + 8|0);
   $1079 = HEAP32[$1078>>2]|0;
   $1086 = $1079;
  } else {
   $8 = $1067;
   $1080 = $8;
   $7 = $1080;
   $1081 = $7;
   $6 = $1081;
   $1082 = $6;
   $1083 = ((($1082)) + 1|0);
   $5 = $1083;
   $1084 = $5;
   $4 = $1084;
   $1085 = $4;
   $1086 = $1085;
  }
  $0 = $1086;
  $1087 = $0;
  __THREW__ = 0;
  invoke_viii(330,($1063|0),(9539|0),($1087|0));
  $1088 = __THREW__; __THREW__ = 0;
  $1089 = $1088&1;
  if ($1089) {
   $1091 = ___cxa_find_matching_catch()|0;
   $1092 = tempRet0;
   $334 = $1091;
   $335 = $1092;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($345);
   $1258 = $334;
   $1259 = $335;
   ___resumeException($1258|0);
   // unreachable;
  } else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($345);
   $1090 = $childEle;
   __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_($1090,9550,$vector4dStr);
   STACKTOP = sp;return;
  }
 }
 $1093 = $valueLen;
 $1094 = ($1093|0)>(1);
 if (!($1094)) {
  STACKTOP = sp;return;
 }
 $18 = $valStr13;
 $19 = 9392;
 $1095 = $18;
 $17 = $1095;
 $1096 = $17;
 $16 = $1096;
 $1097 = $16;
 $15 = $1097;
 $1098 = $19;
 $1099 = $19;
 $1100 = (__ZNSt3__111char_traitsIcE6lengthEPKc($1099)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1095,$1098,$1100);
 $iVal14 = 0;
 while(1) {
  $1101 = $iVal14;
  $1102 = $valueLen;
  $1103 = ($1101|0)<($1102|0);
  if (!($1103)) {
   label = 163;
   break;
  }
  $1104 = $iVal14;
  $1105 = $valueLen;
  $1106 = (($1105) - 1)|0;
  $1107 = ($1104|0)!=($1106|0);
  $1108 = $iVal14;
  $1109 = ((($ce)) + 12|0);
  $1110 = HEAP32[$1109>>2]|0;
  $1111 = (($1110) + ($1108<<5)|0);
  $1112 = +HEAPF64[$1111>>3];
  $1113 = $iVal14;
  $1114 = ((($ce)) + 12|0);
  $1115 = HEAP32[$1114>>2]|0;
  $1116 = (($1115) + ($1113<<5)|0);
  $1117 = ((($1116)) + 8|0);
  $1118 = +HEAPF64[$1117>>3];
  $1119 = $iVal14;
  $1120 = ((($ce)) + 12|0);
  $1121 = HEAP32[$1120>>2]|0;
  $1122 = (($1121) + ($1119<<5)|0);
  $1123 = ((($1122)) + 16|0);
  $1124 = +HEAPF64[$1123>>3];
  $1125 = $iVal14;
  $1126 = ((($ce)) + 12|0);
  $1127 = HEAP32[$1126>>2]|0;
  $1128 = (($1127) + ($1125<<5)|0);
  $1129 = ((($1128)) + 24|0);
  $1130 = +HEAPF64[$1129>>3];
  __THREW__ = 0;
  if ($1107) {
   HEAPF64[$vararg_buffer48>>3] = $1112;
   $vararg_ptr51 = ((($vararg_buffer48)) + 8|0);
   HEAPF64[$vararg_ptr51>>3] = $1118;
   $vararg_ptr52 = ((($vararg_buffer48)) + 16|0);
   HEAPF64[$vararg_ptr52>>3] = $1124;
   $vararg_ptr53 = ((($vararg_buffer48)) + 24|0);
   HEAPF64[$vararg_ptr53>>3] = $1130;
   (_sprintf($tempValChar15,9642,$vararg_buffer48)|0);
   $1131 = __THREW__; __THREW__ = 0;
   $1132 = $1131&1;
   if ($1132) {
    label = 159;
    break;
   }
  } else {
   HEAPF64[$vararg_buffer54>>3] = $1112;
   $vararg_ptr57 = ((($vararg_buffer54)) + 8|0);
   HEAPF64[$vararg_ptr57>>3] = $1118;
   $vararg_ptr58 = ((($vararg_buffer54)) + 16|0);
   HEAPF64[$vararg_ptr58>>3] = $1124;
   $vararg_ptr59 = ((($vararg_buffer54)) + 24|0);
   HEAPF64[$vararg_ptr59>>3] = $1130;
   (_sprintf($tempValChar15,9660,$vararg_buffer54)|0);
   $1135 = __THREW__; __THREW__ = 0;
   $1136 = $1135&1;
   if ($1136) {
    label = 159;
    break;
   }
  }
  $57 = $valStr13;
  $58 = $tempValChar15;
  $1137 = $57;
  $1138 = $58;
  __THREW__ = 0;
  (invoke_iii(331,($1137|0),($1138|0))|0);
  $1139 = __THREW__; __THREW__ = 0;
  $1140 = $1139&1;
  if ($1140) {
   label = 159;
   break;
  }
  $1141 = $iVal14;
  $1142 = (($1141) + 1)|0;
  $iVal14 = $1142;
 }
 do {
  if ((label|0) == 163) {
   $1143 = $childEle;
   $1144 = $kernelType;
   $1145 = $valueLen;
   __THREW__ = 0;
   invoke_viii(332,($346|0),($1144|0),($1145|0));
   $1146 = __THREW__; __THREW__ = 0;
   $1147 = $1146&1;
   if ($1147) {
    label = 159;
   } else {
    $88 = $346;
    $1148 = $88;
    $87 = $1148;
    $1149 = $87;
    $86 = $1149;
    $1150 = $86;
    $85 = $1150;
    $1151 = $85;
    $84 = $1151;
    $1152 = $84;
    $83 = $1152;
    $1153 = $83;
    $1154 = HEAP8[$1153>>0]|0;
    $1155 = $1154&255;
    $1156 = $1155 & 1;
    $1157 = ($1156|0)!=(0);
    if ($1157) {
     $77 = $1150;
     $1158 = $77;
     $76 = $1158;
     $1159 = $76;
     $75 = $1159;
     $1160 = $75;
     $1161 = ((($1160)) + 8|0);
     $1162 = HEAP32[$1161>>2]|0;
     $1169 = $1162;
    } else {
     $82 = $1150;
     $1163 = $82;
     $81 = $1163;
     $1164 = $81;
     $80 = $1164;
     $1165 = $80;
     $1166 = ((($1165)) + 1|0);
     $79 = $1166;
     $1167 = $79;
     $78 = $1167;
     $1168 = $78;
     $1169 = $1168;
    }
    $74 = $1169;
    $1170 = $74;
    __THREW__ = 0;
    invoke_viii(330,($1143|0),(9539|0),($1170|0));
    $1171 = __THREW__; __THREW__ = 0;
    $1172 = $1171&1;
    if ($1172) {
     $1199 = ___cxa_find_matching_catch()|0;
     $1200 = tempRet0;
     $334 = $1199;
     $335 = $1200;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($346);
     break;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($346);
    $1173 = $childEle;
    $140 = $valStr13;
    $1174 = $140;
    $139 = $1174;
    $1175 = $139;
    $138 = $1175;
    $1176 = $138;
    $137 = $1176;
    $1177 = $137;
    $136 = $1177;
    $1178 = $136;
    $135 = $1178;
    $1179 = $135;
    $1180 = HEAP8[$1179>>0]|0;
    $1181 = $1180&255;
    $1182 = $1181 & 1;
    $1183 = ($1182|0)!=(0);
    if ($1183) {
     $129 = $1176;
     $1184 = $129;
     $128 = $1184;
     $1185 = $128;
     $127 = $1185;
     $1186 = $127;
     $1187 = ((($1186)) + 8|0);
     $1188 = HEAP32[$1187>>2]|0;
     $1195 = $1188;
    } else {
     $134 = $1176;
     $1189 = $134;
     $133 = $1189;
     $1190 = $133;
     $132 = $1190;
     $1191 = $132;
     $1192 = ((($1191)) + 1|0);
     $131 = $1192;
     $1193 = $131;
     $130 = $1193;
     $1194 = $130;
     $1195 = $1194;
    }
    $126 = $1195;
    $1196 = $126;
    __THREW__ = 0;
    invoke_viii(330,($1173|0),(9550|0),($1196|0));
    $1197 = __THREW__; __THREW__ = 0;
    $1198 = $1197&1;
    if ($1198) {
     label = 159;
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr13);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 159) {
  $1133 = ___cxa_find_matching_catch()|0;
  $1134 = tempRet0;
  $334 = $1133;
  $335 = $1134;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr13);
 $1258 = $334;
 $1259 = $335;
 ___resumeException($1258|0);
 // unreachable;
}
function __Z15formatToXmlFilei($agg$result,$dxObj) {
 $agg$result = $agg$result|0;
 $dxObj = $dxObj|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $count = 0, $doc = 0, $element = 0, $iNode = 0, $printer = 0;
 var $realDx = 0, $tempNode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $doc = sp + 272|0;
 $printer = sp + 8|0;
 $8 = sp + 676|0;
 $5 = $dxObj;
 $10 = $5;
 $11 = $10;
 $realDx = $11;
 __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($doc,1,0);
 __THREW__ = 0;
 $12 = (invoke_iii(333,($doc|0),(9676|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 L1: do {
  if (!($14)) {
   $element = $12;
   $15 = $element;
   __THREW__ = 0;
   (invoke_iii(334,($doc|0),($15|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    $18 = $realDx;
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $realDx;
    $23 = ((($22)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    __THREW__ = 0;
    $25 = (invoke_ii($21|0,($24|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if (!($27)) {
     $count = $25;
     $iNode = 0;
     while(1) {
      $28 = $iNode;
      $29 = $count;
      $30 = ($28|0)<($29|0);
      if (!($30)) {
       break;
      }
      $31 = $realDx;
      $32 = HEAP32[$31>>2]|0;
      $33 = ((($32)) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = $realDx;
      $36 = ((($35)) + 4|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $iNode;
      __THREW__ = 0;
      $39 = (invoke_iii($34|0,($37|0),($38|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break L1;
      }
      $tempNode = $39;
      $42 = $tempNode;
      $43 = $element;
      __THREW__ = 0;
      invoke_vii(335,($42|0),($43|0));
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       break L1;
      }
      $46 = $iNode;
      $47 = (($46) + 1)|0;
      $iNode = $47;
     }
     __THREW__ = 0;
     invoke_viiii(336,($printer|0),(0|0),0,0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if (!($51)) {
      __THREW__ = 0;
      invoke_vii(337,($doc|0),($printer|0));
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if (!($53)) {
       $$expand_i1_val = 0;
       HEAP8[$8>>0] = $$expand_i1_val;
       __THREW__ = 0;
       $54 = (invoke_ii(338,($printer|0))|0);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if (!($56)) {
        $3 = $agg$result;
        $4 = $54;
        $57 = $3;
        $2 = $57;
        $58 = $2;
        $1 = $58;
        $59 = $1;
        $0 = $59;
        $60 = $4;
        $61 = $4;
        __THREW__ = 0;
        $62 = (invoke_ii(270,($61|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if (!($64)) {
         __THREW__ = 0;
         invoke_viii(271,($57|0),($60|0),($62|0));
         $65 = __THREW__; __THREW__ = 0;
         $66 = $65&1;
         if (!($66)) {
          $$expand_i1_val2 = 1;
          HEAP8[$8>>0] = $$expand_i1_val2;
          $9 = 1;
          $$pre_trunc = HEAP8[$8>>0]|0;
          $67 = $$pre_trunc&1;
          if ($67) {
           __ZN8tinyxml210XMLPrinterD2Ev($printer);
           __ZN8tinyxml211XMLDocumentD2Ev($doc);
           STACKTOP = sp;return;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
          __ZN8tinyxml210XMLPrinterD2Ev($printer);
          __ZN8tinyxml211XMLDocumentD2Ev($doc);
          STACKTOP = sp;return;
         }
        }
       }
      }
      $68 = ___cxa_find_matching_catch()|0;
      $69 = tempRet0;
      $6 = $68;
      $7 = $69;
      __ZN8tinyxml210XMLPrinterD2Ev($printer);
      __ZN8tinyxml211XMLDocumentD2Ev($doc);
      $70 = $6;
      $71 = $7;
      ___resumeException($70|0);
      // unreachable;
     }
    }
   }
  }
 } while(0);
 $48 = ___cxa_find_matching_catch()|0;
 $49 = tempRet0;
 $6 = $48;
 $7 = $49;
 __ZN8tinyxml211XMLDocumentD2Ev($doc);
 $70 = $6;
 $71 = $7;
 ___resumeException($70|0);
 // unreachable;
}
function __Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_PNS_6vectorIS5_NS3_IS5_EEEE($s,$delim,$ret) {
 $s = $s|0;
 $delim = $delim|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0, $__a$i$i$i$i$i$i7 = 0, $__annotator$i = 0;
 var $__annotator$i9 = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i$i$i$i8 = 0, $__r$i$i = 0, $__r$i$i1 = 0, $index = 0, $last = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 8|0;
 $20 = sp + 827|0;
 $__annotator$i9 = sp + 826|0;
 $109 = sp;
 $114 = sp + 825|0;
 $__annotator$i = sp + 824|0;
 $191 = sp + 32|0;
 $194 = sp + 12|0;
 $188 = $s;
 $189 = $delim;
 $190 = $ret;
 $last = 0;
 $195 = $188;
 $196 = $189;
 $197 = $last;
 $185 = $195;
 $186 = $196;
 $187 = $197;
 $198 = $185;
 $184 = $198;
 $199 = $184;
 $183 = $199;
 $200 = $183;
 $182 = $200;
 $201 = $182;
 $181 = $201;
 $202 = $181;
 $180 = $202;
 $203 = $180;
 $204 = HEAP8[$203>>0]|0;
 $205 = $204&255;
 $206 = $205 & 1;
 $207 = ($206|0)!=(0);
 if ($207) {
  $174 = $200;
  $208 = $174;
  $173 = $208;
  $209 = $173;
  $172 = $209;
  $210 = $172;
  $211 = ((($210)) + 8|0);
  $212 = HEAP32[$211>>2]|0;
  $219 = $212;
 } else {
  $179 = $200;
  $213 = $179;
  $178 = $213;
  $214 = $178;
  $177 = $214;
  $215 = $177;
  $216 = ((($215)) + 1|0);
  $176 = $216;
  $217 = $176;
  $175 = $217;
  $218 = $175;
  $219 = $218;
 }
 $171 = $219;
 $220 = $171;
 $164 = $198;
 $221 = $164;
 $163 = $221;
 $222 = $163;
 $162 = $222;
 $223 = $162;
 $161 = $223;
 $224 = $161;
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 $227 = $226 & 1;
 $228 = ($227|0)!=(0);
 if ($228) {
  $157 = $221;
  $229 = $157;
  $156 = $229;
  $230 = $156;
  $155 = $230;
  $231 = $155;
  $232 = ((($231)) + 4|0);
  $233 = HEAP32[$232>>2]|0;
  $284 = $233;
 } else {
  $160 = $221;
  $234 = $160;
  $159 = $234;
  $235 = $159;
  $158 = $235;
  $236 = $158;
  $237 = HEAP8[$236>>0]|0;
  $238 = $237&255;
  $239 = $238 >> 1;
  $284 = $239;
 }
 $240 = $186;
 $154 = $240;
 $241 = $154;
 $153 = $241;
 $242 = $153;
 $152 = $242;
 $243 = $152;
 $151 = $243;
 $244 = $151;
 $150 = $244;
 $245 = $150;
 $246 = HEAP8[$245>>0]|0;
 $247 = $246&255;
 $248 = $247 & 1;
 $249 = ($248|0)!=(0);
 if ($249) {
  $144 = $242;
  $250 = $144;
  $143 = $250;
  $251 = $143;
  $142 = $251;
  $252 = $142;
  $253 = ((($252)) + 8|0);
  $254 = HEAP32[$253>>2]|0;
  $261 = $254;
 } else {
  $149 = $242;
  $255 = $149;
  $148 = $255;
  $256 = $148;
  $147 = $256;
  $257 = $147;
  $258 = ((($257)) + 1|0);
  $146 = $258;
  $259 = $146;
  $145 = $259;
  $260 = $145;
  $261 = $260;
 }
 $141 = $261;
 $262 = $141;
 $263 = $187;
 $264 = $186;
 $140 = $264;
 $265 = $140;
 $139 = $265;
 $266 = $139;
 $138 = $266;
 $267 = $138;
 $137 = $267;
 $268 = $137;
 $269 = HEAP8[$268>>0]|0;
 $270 = $269&255;
 $271 = $270 & 1;
 $272 = ($271|0)!=(0);
 if ($272) {
  $133 = $265;
  $273 = $133;
  $132 = $273;
  $274 = $132;
  $131 = $274;
  $275 = $131;
  $276 = ((($275)) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $285 = $277;
 } else {
  $136 = $265;
  $278 = $136;
  $135 = $278;
  $279 = $135;
  $134 = $279;
  $280 = $134;
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&255;
  $283 = $282 >> 1;
  $285 = $283;
 }
 $166 = $220;
 $167 = $284;
 $168 = $262;
 $169 = $263;
 $170 = $285;
 $286 = $169;
 $287 = $167;
 $288 = ($286>>>0)>=($287>>>0);
 $289 = $170;
 $290 = ($289|0)==(0);
 $or$cond = $288 | $290;
 do {
  if ($or$cond) {
   $165 = -1;
  } else {
   $291 = $166;
   $292 = $169;
   $293 = (($291) + ($292)|0);
   $294 = $166;
   $295 = $167;
   $296 = (($294) + ($295)|0);
   $297 = $168;
   $298 = $168;
   $299 = $170;
   $300 = (($298) + ($299)|0);
   __THREW__ = 0;
   $301 = (invoke_iiiiii(339,($293|0),($296|0),($297|0),($300|0),(340|0))|0);
   $302 = __THREW__; __THREW__ = 0;
   $303 = $302&1;
   if ($303) {
    $314 = ___cxa_find_matching_catch(0|0)|0;
    $315 = tempRet0;
    ___clang_call_terminate($314);
    // unreachable;
   }
   $__r$i$i = $301;
   $304 = $__r$i$i;
   $305 = $166;
   $306 = $167;
   $307 = (($305) + ($306)|0);
   $308 = ($304|0)==($307|0);
   if ($308) {
    $165 = -1;
    break;
   } else {
    $309 = $__r$i$i;
    $310 = $166;
    $311 = $309;
    $312 = $310;
    $313 = (($311) - ($312))|0;
    $165 = $313;
    break;
   }
  }
 } while(0);
 $316 = $165;
 $index = $316;
 L27: while(1) {
  $317 = $index;
  $318 = ($317|0)!=(-1);
  if (!($318)) {
   label = 49;
   break;
  }
  $319 = $190;
  $320 = $188;
  $321 = $last;
  $322 = $index;
  $323 = $last;
  $324 = (($322) - ($323))|0;
  $128 = $320;
  $129 = $321;
  $130 = $324;
  $325 = $128;
  $326 = $129;
  $327 = $130;
  $127 = $325;
  $328 = $127;
  $126 = $328;
  $329 = $126;
  $125 = $329;
  $330 = $125;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($191,$325,$326,$327,$330);
  $123 = $319;
  $124 = $191;
  $331 = $123;
  $332 = ((($331)) + 4|0);
  $333 = HEAP32[$332>>2]|0;
  $122 = $331;
  $334 = $122;
  $335 = ((($334)) + 8|0);
  $121 = $335;
  $336 = $121;
  $120 = $336;
  $337 = $120;
  $338 = HEAP32[$337>>2]|0;
  $339 = ($333>>>0)<($338>>>0);
  if ($339) {
   __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i,$331,1);
   $119 = $331;
   $340 = $119;
   $341 = ((($340)) + 8|0);
   $118 = $341;
   $342 = $118;
   $117 = $342;
   $343 = $117;
   $344 = ((($331)) + 4|0);
   $345 = HEAP32[$344>>2]|0;
   $115 = $345;
   $346 = $115;
   $347 = $124;
   $94 = $347;
   $348 = $94;
   $111 = $343;
   $112 = $346;
   $113 = $348;
   $349 = $111;
   $350 = $112;
   $351 = $113;
   $110 = $351;
   $352 = $110;
   ;HEAP8[$109>>0]=HEAP8[$114>>0]|0;
   $106 = $349;
   $107 = $350;
   $108 = $352;
   $353 = $106;
   $354 = $107;
   $355 = $108;
   $105 = $355;
   $356 = $105;
   $102 = $353;
   $103 = $354;
   $104 = $356;
   $357 = $103;
   $358 = $104;
   $101 = $358;
   $359 = $101;
   $99 = $357;
   $100 = $359;
   $360 = $99;
   $361 = $100;
   $98 = $361;
   $362 = $98;
   ;HEAP32[$360>>2]=HEAP32[$362>>2]|0;HEAP32[$360+4>>2]=HEAP32[$362+4>>2]|0;HEAP32[$360+8>>2]=HEAP32[$362+8>>2]|0;
   $363 = $100;
   $97 = $363;
   $364 = $97;
   $96 = $364;
   $365 = $96;
   $95 = $365;
   $366 = $95;
   $__a$i$i$i$i$i$i = $366;
   $__i$i$i$i$i$i$i = 0;
   while(1) {
    $367 = $__i$i$i$i$i$i$i;
    $368 = ($367>>>0)<(3);
    if (!($368)) {
     break;
    }
    $369 = $__i$i$i$i$i$i$i;
    $370 = $__a$i$i$i$i$i$i;
    $371 = (($370) + ($369<<2)|0);
    HEAP32[$371>>2] = 0;
    $372 = $__i$i$i$i$i$i$i;
    $373 = (($372) + 1)|0;
    $__i$i$i$i$i$i$i = $373;
   }
   __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $374 = ((($331)) + 4|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = ((($375)) + 12|0);
   HEAP32[$374>>2] = $376;
  } else {
   $377 = $124;
   $116 = $377;
   $378 = $116;
   __THREW__ = 0;
   invoke_vii(341,($331|0),($378|0));
   $379 = __THREW__; __THREW__ = 0;
   $380 = $379&1;
   if ($380) {
    label = 48;
    break;
   }
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($191);
  $381 = $index;
  $382 = (($381) + 1)|0;
  $last = $382;
  $383 = $188;
  $384 = $189;
  $385 = $last;
  $91 = $383;
  $92 = $384;
  $93 = $385;
  $386 = $91;
  $90 = $386;
  $387 = $90;
  $89 = $387;
  $388 = $89;
  $88 = $388;
  $389 = $88;
  $87 = $389;
  $390 = $87;
  $86 = $390;
  $391 = $86;
  $392 = HEAP8[$391>>0]|0;
  $393 = $392&255;
  $394 = $393 & 1;
  $395 = ($394|0)!=(0);
  if ($395) {
   $80 = $388;
   $396 = $80;
   $79 = $396;
   $397 = $79;
   $78 = $397;
   $398 = $78;
   $399 = ((($398)) + 8|0);
   $400 = HEAP32[$399>>2]|0;
   $407 = $400;
  } else {
   $85 = $388;
   $401 = $85;
   $84 = $401;
   $402 = $84;
   $83 = $402;
   $403 = $83;
   $404 = ((($403)) + 1|0);
   $82 = $404;
   $405 = $82;
   $81 = $405;
   $406 = $81;
   $407 = $406;
  }
  $77 = $407;
  $408 = $77;
  $70 = $386;
  $409 = $70;
  $69 = $409;
  $410 = $69;
  $68 = $410;
  $411 = $68;
  $67 = $411;
  $412 = $67;
  $413 = HEAP8[$412>>0]|0;
  $414 = $413&255;
  $415 = $414 & 1;
  $416 = ($415|0)!=(0);
  if ($416) {
   $63 = $409;
   $417 = $63;
   $62 = $417;
   $418 = $62;
   $61 = $418;
   $419 = $61;
   $420 = ((($419)) + 4|0);
   $421 = HEAP32[$420>>2]|0;
   $472 = $421;
  } else {
   $66 = $409;
   $422 = $66;
   $65 = $422;
   $423 = $65;
   $64 = $423;
   $424 = $64;
   $425 = HEAP8[$424>>0]|0;
   $426 = $425&255;
   $427 = $426 >> 1;
   $472 = $427;
  }
  $428 = $92;
  $60 = $428;
  $429 = $60;
  $59 = $429;
  $430 = $59;
  $58 = $430;
  $431 = $58;
  $57 = $431;
  $432 = $57;
  $56 = $432;
  $433 = $56;
  $434 = HEAP8[$433>>0]|0;
  $435 = $434&255;
  $436 = $435 & 1;
  $437 = ($436|0)!=(0);
  if ($437) {
   $50 = $430;
   $438 = $50;
   $49 = $438;
   $439 = $49;
   $48 = $439;
   $440 = $48;
   $441 = ((($440)) + 8|0);
   $442 = HEAP32[$441>>2]|0;
   $449 = $442;
  } else {
   $55 = $430;
   $443 = $55;
   $54 = $443;
   $444 = $54;
   $53 = $444;
   $445 = $53;
   $446 = ((($445)) + 1|0);
   $52 = $446;
   $447 = $52;
   $51 = $447;
   $448 = $51;
   $449 = $448;
  }
  $47 = $449;
  $450 = $47;
  $451 = $93;
  $452 = $92;
  $46 = $452;
  $453 = $46;
  $45 = $453;
  $454 = $45;
  $44 = $454;
  $455 = $44;
  $43 = $455;
  $456 = $43;
  $457 = HEAP8[$456>>0]|0;
  $458 = $457&255;
  $459 = $458 & 1;
  $460 = ($459|0)!=(0);
  if ($460) {
   $39 = $453;
   $461 = $39;
   $38 = $461;
   $462 = $38;
   $37 = $462;
   $463 = $37;
   $464 = ((($463)) + 4|0);
   $465 = HEAP32[$464>>2]|0;
   $473 = $465;
  } else {
   $42 = $453;
   $466 = $42;
   $41 = $466;
   $467 = $41;
   $40 = $467;
   $468 = $40;
   $469 = HEAP8[$468>>0]|0;
   $470 = $469&255;
   $471 = $470 >> 1;
   $473 = $471;
  }
  $72 = $408;
  $73 = $472;
  $74 = $450;
  $75 = $451;
  $76 = $473;
  $474 = $75;
  $475 = $73;
  $476 = ($474>>>0)>=($475>>>0);
  $477 = $76;
  $478 = ($477|0)==(0);
  $or$cond3 = $476 | $478;
  do {
   if ($or$cond3) {
    $71 = -1;
   } else {
    $479 = $72;
    $480 = $75;
    $481 = (($479) + ($480)|0);
    $482 = $72;
    $483 = $73;
    $484 = (($482) + ($483)|0);
    $485 = $74;
    $486 = $74;
    $487 = $76;
    $488 = (($486) + ($487)|0);
    __THREW__ = 0;
    $489 = (invoke_iiiiii(339,($481|0),($484|0),($485|0),($488|0),(340|0))|0);
    $490 = __THREW__; __THREW__ = 0;
    $491 = $490&1;
    if ($491) {
     label = 46;
     break L27;
    }
    $__r$i$i1 = $489;
    $492 = $__r$i$i1;
    $493 = $72;
    $494 = $73;
    $495 = (($493) + ($494)|0);
    $496 = ($492|0)==($495|0);
    if ($496) {
     $71 = -1;
     break;
    } else {
     $497 = $__r$i$i1;
     $498 = $72;
     $499 = $497;
     $500 = $498;
     $501 = (($499) - ($500))|0;
     $71 = $501;
     break;
    }
   }
  } while(0);
  $504 = $71;
  $index = $504;
 }
 if ((label|0) == 46) {
  $502 = ___cxa_find_matching_catch(0|0)|0;
  $503 = tempRet0;
  ___clang_call_terminate($502);
  // unreachable;
 }
 else if ((label|0) == 48) {
  $505 = ___cxa_find_matching_catch()|0;
  $506 = tempRet0;
  $192 = $505;
  $193 = $506;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($191);
  $575 = $192;
  $576 = $193;
  ___resumeException($575|0);
  // unreachable;
 }
 else if ((label|0) == 49) {
  $507 = $index;
  $508 = $last;
  $509 = (($507) - ($508))|0;
  $510 = ($509>>>0)>(0);
  if (!($510)) {
   STACKTOP = sp;return;
  }
  $511 = $190;
  $512 = $188;
  $513 = $last;
  $514 = $index;
  $515 = $last;
  $516 = (($514) - ($515))|0;
  $34 = $512;
  $35 = $513;
  $36 = $516;
  $517 = $34;
  $518 = $35;
  $519 = $36;
  $33 = $517;
  $520 = $33;
  $32 = $520;
  $521 = $32;
  $31 = $521;
  $522 = $31;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($194,$517,$518,$519,$522);
  $29 = $511;
  $30 = $194;
  $523 = $29;
  $524 = ((($523)) + 4|0);
  $525 = HEAP32[$524>>2]|0;
  $28 = $523;
  $526 = $28;
  $527 = ((($526)) + 8|0);
  $27 = $527;
  $528 = $27;
  $26 = $528;
  $529 = $26;
  $530 = HEAP32[$529>>2]|0;
  $531 = ($525>>>0)<($530>>>0);
  if ($531) {
   __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i9,$523,1);
   $25 = $523;
   $532 = $25;
   $533 = ((($532)) + 8|0);
   $24 = $533;
   $534 = $24;
   $23 = $534;
   $535 = $23;
   $536 = ((($523)) + 4|0);
   $537 = HEAP32[$536>>2]|0;
   $21 = $537;
   $538 = $21;
   $539 = $30;
   $0 = $539;
   $540 = $0;
   $17 = $535;
   $18 = $538;
   $19 = $540;
   $541 = $17;
   $542 = $18;
   $543 = $19;
   $16 = $543;
   $544 = $16;
   ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
   $12 = $541;
   $13 = $542;
   $14 = $544;
   $545 = $12;
   $546 = $13;
   $547 = $14;
   $11 = $547;
   $548 = $11;
   $8 = $545;
   $9 = $546;
   $10 = $548;
   $549 = $9;
   $550 = $10;
   $7 = $550;
   $551 = $7;
   $5 = $549;
   $6 = $551;
   $552 = $5;
   $553 = $6;
   $4 = $553;
   $554 = $4;
   ;HEAP32[$552>>2]=HEAP32[$554>>2]|0;HEAP32[$552+4>>2]=HEAP32[$554+4>>2]|0;HEAP32[$552+8>>2]=HEAP32[$554+8>>2]|0;
   $555 = $6;
   $3 = $555;
   $556 = $3;
   $2 = $556;
   $557 = $2;
   $1 = $557;
   $558 = $1;
   $__a$i$i$i$i$i$i7 = $558;
   $__i$i$i$i$i$i$i8 = 0;
   while(1) {
    $559 = $__i$i$i$i$i$i$i8;
    $560 = ($559>>>0)<(3);
    if (!($560)) {
     break;
    }
    $561 = $__i$i$i$i$i$i$i8;
    $562 = $__a$i$i$i$i$i$i7;
    $563 = (($562) + ($561<<2)|0);
    HEAP32[$563>>2] = 0;
    $564 = $__i$i$i$i$i$i$i8;
    $565 = (($564) + 1)|0;
    $__i$i$i$i$i$i$i8 = $565;
   }
   __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i9);
   $566 = ((($523)) + 4|0);
   $567 = HEAP32[$566>>2]|0;
   $568 = ((($567)) + 12|0);
   HEAP32[$566>>2] = $568;
  } else {
   $569 = $30;
   $22 = $569;
   $570 = $22;
   __THREW__ = 0;
   invoke_vii(341,($523|0),($570|0));
   $571 = __THREW__; __THREW__ = 0;
   $572 = $571&1;
   if ($572) {
    $573 = ___cxa_find_matching_catch()|0;
    $574 = tempRet0;
    $192 = $573;
    $193 = $574;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($194);
    $575 = $192;
    $576 = $193;
    ___resumeException($575|0);
    // unreachable;
   }
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($194);
  STACKTOP = sp;return;
 }
}
function __Z8ParseXDOP7dx_nodePN8tinyxml210XMLElementE($containerNode,$element) {
 $containerNode = $containerNode|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0.0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0.0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0.0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0.0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0.0, $1387 = 0, $1388 = 0, $1389 = 0.0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0.0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0.0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0.0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0.0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0.0, $1565 = 0, $1566 = 0, $1567 = 0.0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0.0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0.0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0.0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0.0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0.0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0.0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0.0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0.0, $653 = 0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0.0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0.0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cell = 0, $cell12 = 0, $cell18 = 0, $cell21 = 0;
 var $cell23 = 0, $cell28 = 0, $cell3 = 0, $cell30 = 0, $cell42 = 0, $cell46 = 0, $cell54 = 0, $cell59 = 0, $cell68 = 0, $cell7 = 0, $cell74 = 0, $childEle = 0, $count = 0, $count26 = 0, $count34 = 0, $count40 = 0, $count52 = 0, $count66 = 0, $dx = 0, $iVal = 0;
 var $iVal31 = 0, $iVal37 = 0, $iVal47 = 0, $iVal60 = 0, $iVal75 = 0, $kernelType = 0, $m = 0, $m72 = 0, $m79 = 0, $name = 0, $nx = 0, $nx11 = 0, $nx17 = 0, $nx2 = 0, $nx20 = 0, $nx22 = 0, $nx27 = 0, $nx29 = 0, $nx35 = 0, $nx36 = 0;
 var $nx41 = 0, $nx45 = 0, $nx5 = 0, $nx53 = 0, $nx58 = 0, $nx6 = 0, $nx67 = 0, $nx73 = 0, $nx80 = 0, $ret = 0, $ret25 = 0, $ret33 = 0, $ret39 = 0, $ret51 = 0, $ret65 = 0, $typeStr = 0, $val = 0, $val1 = 0.0, $val4 = 0, $valStr = 0;
 var $valStr13 = 0, $valStr19 = 0, $valStr24 = 0, $valStr32 = 0, $valStr38 = 0, $valStr50 = 0, $valStr64 = 0, $valStr8 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer37 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $x = 0, $x14 = 0, $x43 = 0, $x48 = 0, $x55 = 0;
 var $x61 = 0, $x69 = 0, $x76 = 0, $x9 = 0, $y = 0, $y10 = 0, $y15 = 0, $y44 = 0, $y49 = 0, $y56 = 0, $y62 = 0, $y70 = 0, $y77 = 0, $z = 0, $z16 = 0, $z57 = 0, $z63 = 0, $z71 = 0, $z78 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer37 = sp + 328|0;
 $vararg_buffer31 = sp + 312|0;
 $vararg_buffer26 = sp + 296|0;
 $vararg_buffer21 = sp + 280|0;
 $vararg_buffer17 = sp + 272|0;
 $vararg_buffer13 = sp + 264|0;
 $vararg_buffer7 = sp + 248|0;
 $vararg_buffer2 = sp + 232|0;
 $vararg_buffer = sp + 224|0;
 $25 = sp + 2488|0;
 $28 = sp + 2476|0;
 $70 = sp + 2308|0;
 $73 = sp + 2296|0;
 $140 = sp + 2028|0;
 $143 = sp + 2016|0;
 $216 = sp + 1724|0;
 $219 = sp + 1712|0;
 $279 = sp + 1472|0;
 $282 = sp + 1460|0;
 $336 = sp + 1244|0;
 $339 = sp + 1232|0;
 $typeStr = sp + 1020|0;
 $391 = sp + 992|0;
 $cell = sp + 968|0;
 $cell3 = sp + 944|0;
 $x = sp + 208|0;
 $y = sp + 200|0;
 $cell7 = sp + 912|0;
 $x9 = sp + 192|0;
 $y10 = sp + 184|0;
 $z = sp + 176|0;
 $cell12 = sp + 888|0;
 $x14 = sp + 168|0;
 $y15 = sp + 160|0;
 $z16 = sp + 152|0;
 $m = sp + 144|0;
 $cell18 = sp + 864|0;
 $valStr19 = sp + 848|0;
 $ret = sp + 836|0;
 $392 = sp + 824|0;
 $cell21 = sp + 800|0;
 $cell23 = sp + 776|0;
 $valStr24 = sp + 760|0;
 $ret25 = sp + 748|0;
 $393 = sp + 736|0;
 $cell28 = sp + 712|0;
 $cell30 = sp + 688|0;
 $valStr32 = sp + 668|0;
 $ret33 = sp + 656|0;
 $394 = sp + 644|0;
 $valStr38 = sp + 616|0;
 $ret39 = sp + 604|0;
 $395 = sp + 592|0;
 $cell42 = sp + 568|0;
 $x43 = sp + 136|0;
 $y44 = sp + 128|0;
 $cell46 = sp + 544|0;
 $x48 = sp + 120|0;
 $y49 = sp + 112|0;
 $ret51 = sp + 520|0;
 $396 = sp + 508|0;
 $397 = sp + 496|0;
 $cell54 = sp + 472|0;
 $x55 = sp + 104|0;
 $y56 = sp + 96|0;
 $z57 = sp + 88|0;
 $cell59 = sp + 448|0;
 $x61 = sp + 80|0;
 $y62 = sp + 72|0;
 $z63 = sp + 64|0;
 $valStr64 = sp + 432|0;
 $ret65 = sp + 420|0;
 $398 = sp + 408|0;
 $cell68 = sp + 384|0;
 $x69 = sp + 56|0;
 $y70 = sp + 48|0;
 $z71 = sp + 40|0;
 $m72 = sp + 32|0;
 $cell74 = sp + 360|0;
 $x76 = sp + 24|0;
 $y77 = sp + 16|0;
 $z78 = sp + 8|0;
 $m79 = sp;
 $387 = $containerNode;
 $388 = $element;
 $399 = $387;
 $400 = HEAP32[$399>>2]|0;
 $dx = $400;
 $401 = $388;
 $402 = (__ZNK8tinyxml210XMLElement9AttributeEPKcS2_($401,9539,0)|0);
 $385 = $typeStr;
 $386 = $402;
 $403 = $385;
 $384 = $403;
 $404 = $384;
 $383 = $404;
 $405 = $383;
 $382 = $405;
 $406 = $386;
 $407 = $386;
 $408 = (__ZNSt3__111char_traitsIcE6lengthEPKc($407)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($403,$406,$408);
 $409 = $388;
 __THREW__ = 0;
 $410 = (invoke_iiii(342,($409|0),(9534|0),(0|0))|0);
 $411 = __THREW__; __THREW__ = 0;
 $412 = $411&1;
 L1: do {
  if (!($412)) {
   $name = $410;
   $381 = $typeStr;
   $413 = $381;
   $380 = $413;
   $414 = $380;
   $379 = $414;
   $415 = $379;
   $378 = $415;
   $416 = $378;
   $377 = $416;
   $417 = $377;
   $376 = $417;
   $418 = $376;
   $419 = HEAP8[$418>>0]|0;
   $420 = $419&255;
   $421 = $420 & 1;
   $422 = ($421|0)!=(0);
   if ($422) {
    $370 = $415;
    $423 = $370;
    $369 = $423;
    $424 = $369;
    $368 = $424;
    $425 = $368;
    $426 = ((($425)) + 8|0);
    $427 = HEAP32[$426>>2]|0;
    $434 = $427;
   } else {
    $375 = $415;
    $428 = $375;
    $374 = $428;
    $429 = $374;
    $373 = $429;
    $430 = $373;
    $431 = ((($430)) + 1|0);
    $372 = $431;
    $432 = $372;
    $371 = $432;
    $433 = $371;
    $434 = $433;
   }
   $367 = $434;
   $435 = $367;
   $365 = $391;
   $366 = $435;
   $436 = $365;
   $364 = $436;
   $437 = $364;
   $363 = $437;
   $438 = $363;
   $362 = $438;
   $439 = $366;
   $440 = $366;
   __THREW__ = 0;
   $441 = (invoke_ii(270,($440|0))|0);
   $442 = __THREW__; __THREW__ = 0;
   $443 = $442&1;
   if (!($443)) {
    __THREW__ = 0;
    invoke_viii(271,($436|0),($439|0),($441|0));
    $444 = __THREW__; __THREW__ = 0;
    $445 = $444&1;
    if (!($445)) {
     __THREW__ = 0;
     $446 = (invoke_ii(343,($391|0))|0);
     $447 = __THREW__; __THREW__ = 0;
     $448 = $447&1;
     if ($448) {
      $481 = ___cxa_find_matching_catch()|0;
      $482 = tempRet0;
      $389 = $481;
      $390 = $482;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($391);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1694 = $389;
      $1695 = $390;
      ___resumeException($1694|0);
      // unreachable;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($391);
     $kernelType = $446;
     $360 = $typeStr;
     $361 = 12085;
     $449 = $360;
     $450 = $361;
     $451 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($449,$450)|0);
     $452 = ($451|0)==(0);
     if ($452) {
      $453 = $388;
      __THREW__ = 0;
      $454 = (invoke_iii(344,($453|0),(9550|0))|0);
      $455 = __THREW__; __THREW__ = 0;
      $456 = $455&1;
      if ($456) {
       break;
      }
      $val = $454;
      $457 = $dx;
      $458 = HEAP32[$457>>2]|0;
      $459 = ((($458)) + 20|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = $387;
      $462 = $name;
      __THREW__ = 0;
      $463 = (invoke_ii(345,($462|0))|0);
      $464 = __THREW__; __THREW__ = 0;
      $465 = $464&1;
      if ($465) {
       break;
      }
      __THREW__ = 0;
      $466 = (invoke_iiiii($460|0,($461|0),($463|0),1,1)|0);
      $467 = __THREW__; __THREW__ = 0;
      $468 = $467&1;
      if ($468) {
       break;
      }
      $nx = $466;
      $469 = $dx;
      $470 = HEAP32[$469>>2]|0;
      $471 = ((($470)) + 12|0);
      $472 = HEAP32[$471>>2]|0;
      $473 = $nx;
      __THREW__ = 0;
      invoke_vii($472|0,($cell|0),($473|0));
      $474 = __THREW__; __THREW__ = 0;
      $475 = $474&1;
      if ($475) {
       break;
      }
      $476 = $val;
      $477 = ((($cell)) + 12|0);
      $478 = HEAP32[$477>>2]|0;
      HEAP32[$478>>2] = $476;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $358 = $typeStr;
     $359 = 9403;
     $483 = $358;
     $484 = $359;
     $485 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($483,$484)|0);
     $486 = ($485|0)==(0);
     if ($486) {
      $487 = $388;
      __THREW__ = 0;
      $488 = (+invoke_dii(346,($487|0),(9550|0)));
      $489 = __THREW__; __THREW__ = 0;
      $490 = $489&1;
      if ($490) {
       break;
      }
      $val1 = $488;
      $491 = $dx;
      $492 = HEAP32[$491>>2]|0;
      $493 = ((($492)) + 20|0);
      $494 = HEAP32[$493>>2]|0;
      $495 = $387;
      $496 = $name;
      __THREW__ = 0;
      $497 = (invoke_ii(345,($496|0))|0);
      $498 = __THREW__; __THREW__ = 0;
      $499 = $498&1;
      if ($499) {
       break;
      }
      __THREW__ = 0;
      $500 = (invoke_iiiii($494|0,($495|0),($497|0),2,1)|0);
      $501 = __THREW__; __THREW__ = 0;
      $502 = $501&1;
      if ($502) {
       break;
      }
      $nx2 = $500;
      $503 = $dx;
      $504 = HEAP32[$503>>2]|0;
      $505 = ((($504)) + 12|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = $nx2;
      __THREW__ = 0;
      invoke_vii($506|0,($cell3|0),($507|0));
      $508 = __THREW__; __THREW__ = 0;
      $509 = $508&1;
      if ($509) {
       break;
      }
      $510 = $val1;
      $511 = ((($cell3)) + 12|0);
      $512 = HEAP32[$511>>2]|0;
      HEAPF64[$512>>3] = $510;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $356 = $typeStr;
     $357 = 9419;
     $513 = $356;
     $514 = $357;
     $515 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($513,$514)|0);
     $516 = ($515|0)==(0);
     if ($516) {
      $517 = $388;
      __THREW__ = 0;
      $518 = (invoke_iiii(342,($517|0),(9550|0),(0|0))|0);
      $519 = __THREW__; __THREW__ = 0;
      $520 = $519&1;
      if ($520) {
       break;
      }
      $val4 = $518;
      $521 = $dx;
      $522 = HEAP32[$521>>2]|0;
      $523 = ((($522)) + 20|0);
      $524 = HEAP32[$523>>2]|0;
      $525 = $387;
      $526 = $name;
      __THREW__ = 0;
      $527 = (invoke_ii(345,($526|0))|0);
      $528 = __THREW__; __THREW__ = 0;
      $529 = $528&1;
      if ($529) {
       break;
      }
      __THREW__ = 0;
      $530 = (invoke_iiiii($524|0,($525|0),($527|0),6,1)|0);
      $531 = __THREW__; __THREW__ = 0;
      $532 = $531&1;
      if ($532) {
       break;
      }
      $nx5 = $530;
      $533 = $dx;
      $534 = HEAP32[$533>>2]|0;
      $535 = ((($534)) + 52|0);
      $536 = HEAP32[$535>>2]|0;
      $537 = $nx5;
      $538 = $val4;
      __THREW__ = 0;
      invoke_viii($536|0,($537|0),($538|0),0);
      $539 = __THREW__; __THREW__ = 0;
      $540 = $539&1;
      if ($540) {
       break;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $354 = $typeStr;
     $355 = 9439;
     $541 = $354;
     $542 = $355;
     $543 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($541,$542)|0);
     $544 = ($543|0)==(0);
     if ($544) {
      $545 = $388;
      __THREW__ = 0;
      $546 = (invoke_iiii(342,($545|0),(9550|0),(0|0))|0);
      $547 = __THREW__; __THREW__ = 0;
      $548 = $547&1;
      if ($548) {
       break;
      }
      $valStr = $546;
      $549 = $valStr;
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = $x;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $y;
      (invoke_iiii(347,($549|0),(9577|0),($vararg_buffer|0))|0);
      $550 = __THREW__; __THREW__ = 0;
      $551 = $550&1;
      if ($551) {
       break;
      }
      $552 = $dx;
      $553 = HEAP32[$552>>2]|0;
      $554 = ((($553)) + 20|0);
      $555 = HEAP32[$554>>2]|0;
      $556 = $387;
      $557 = $name;
      __THREW__ = 0;
      $558 = (invoke_ii(345,($557|0))|0);
      $559 = __THREW__; __THREW__ = 0;
      $560 = $559&1;
      if ($560) {
       break;
      }
      __THREW__ = 0;
      $561 = (invoke_iiiii($555|0,($556|0),($558|0),3,1)|0);
      $562 = __THREW__; __THREW__ = 0;
      $563 = $562&1;
      if ($563) {
       break;
      }
      $nx6 = $561;
      $564 = $dx;
      $565 = HEAP32[$564>>2]|0;
      $566 = ((($565)) + 12|0);
      $567 = HEAP32[$566>>2]|0;
      $568 = $nx6;
      __THREW__ = 0;
      invoke_vii($567|0,($cell7|0),($568|0));
      $569 = __THREW__; __THREW__ = 0;
      $570 = $569&1;
      if ($570) {
       break;
      }
      $571 = +HEAPF64[$x>>3];
      $572 = ((($cell7)) + 12|0);
      $573 = HEAP32[$572>>2]|0;
      HEAPF64[$573>>3] = $571;
      $574 = +HEAPF64[$y>>3];
      $575 = ((($cell7)) + 12|0);
      $576 = HEAP32[$575>>2]|0;
      $577 = ((($576)) + 8|0);
      HEAPF64[$577>>3] = $574;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $352 = $typeStr;
     $353 = 9463;
     $578 = $352;
     $579 = $353;
     $580 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($578,$579)|0);
     $581 = ($580|0)==(0);
     if ($581) {
      $582 = $388;
      __THREW__ = 0;
      $583 = (invoke_iiii(342,($582|0),(9550|0),(0|0))|0);
      $584 = __THREW__; __THREW__ = 0;
      $585 = $584&1;
      if ($585) {
       break;
      }
      $valStr8 = $583;
      $586 = $valStr8;
      __THREW__ = 0;
      HEAP32[$vararg_buffer2>>2] = $x9;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $y10;
      $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
      HEAP32[$vararg_ptr6>>2] = $z;
      (invoke_iiii(347,($586|0),(9618|0),($vararg_buffer2|0))|0);
      $587 = __THREW__; __THREW__ = 0;
      $588 = $587&1;
      if ($588) {
       break;
      }
      $589 = $dx;
      $590 = HEAP32[$589>>2]|0;
      $591 = ((($590)) + 20|0);
      $592 = HEAP32[$591>>2]|0;
      $593 = $387;
      $594 = $name;
      __THREW__ = 0;
      $595 = (invoke_ii(345,($594|0))|0);
      $596 = __THREW__; __THREW__ = 0;
      $597 = $596&1;
      if ($597) {
       break;
      }
      __THREW__ = 0;
      $598 = (invoke_iiiii($592|0,($593|0),($595|0),4,1)|0);
      $599 = __THREW__; __THREW__ = 0;
      $600 = $599&1;
      if ($600) {
       break;
      }
      $nx11 = $598;
      $601 = $dx;
      $602 = HEAP32[$601>>2]|0;
      $603 = ((($602)) + 12|0);
      $604 = HEAP32[$603>>2]|0;
      $605 = $nx11;
      __THREW__ = 0;
      invoke_vii($604|0,($cell12|0),($605|0));
      $606 = __THREW__; __THREW__ = 0;
      $607 = $606&1;
      if ($607) {
       break;
      }
      $608 = +HEAPF64[$x9>>3];
      $609 = ((($cell12)) + 12|0);
      $610 = HEAP32[$609>>2]|0;
      HEAPF64[$610>>3] = $608;
      $611 = +HEAPF64[$y10>>3];
      $612 = ((($cell12)) + 12|0);
      $613 = HEAP32[$612>>2]|0;
      $614 = ((($613)) + 8|0);
      HEAPF64[$614>>3] = $611;
      $615 = +HEAPF64[$z>>3];
      $616 = ((($cell12)) + 12|0);
      $617 = HEAP32[$616>>2]|0;
      $618 = ((($617)) + 16|0);
      HEAPF64[$618>>3] = $615;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $350 = $typeStr;
     $351 = 9487;
     $619 = $350;
     $620 = $351;
     $621 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($619,$620)|0);
     $622 = ($621|0)==(0);
     if ($622) {
      $623 = $388;
      __THREW__ = 0;
      $624 = (invoke_iiii(342,($623|0),(9550|0),(0|0))|0);
      $625 = __THREW__; __THREW__ = 0;
      $626 = $625&1;
      if ($626) {
       break;
      }
      $valStr13 = $624;
      $627 = $valStr13;
      __THREW__ = 0;
      HEAP32[$vararg_buffer7>>2] = $x14;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $y15;
      $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
      HEAP32[$vararg_ptr11>>2] = $z16;
      $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
      HEAP32[$vararg_ptr12>>2] = $m;
      (invoke_iiii(347,($627|0),(9660|0),($vararg_buffer7|0))|0);
      $628 = __THREW__; __THREW__ = 0;
      $629 = $628&1;
      if ($629) {
       break;
      }
      $630 = $dx;
      $631 = HEAP32[$630>>2]|0;
      $632 = ((($631)) + 20|0);
      $633 = HEAP32[$632>>2]|0;
      $634 = $387;
      $635 = $name;
      __THREW__ = 0;
      $636 = (invoke_ii(345,($635|0))|0);
      $637 = __THREW__; __THREW__ = 0;
      $638 = $637&1;
      if ($638) {
       break;
      }
      __THREW__ = 0;
      $639 = (invoke_iiiii($633|0,($634|0),($636|0),5,1)|0);
      $640 = __THREW__; __THREW__ = 0;
      $641 = $640&1;
      if ($641) {
       break;
      }
      $nx17 = $639;
      $642 = $dx;
      $643 = HEAP32[$642>>2]|0;
      $644 = ((($643)) + 12|0);
      $645 = HEAP32[$644>>2]|0;
      $646 = $nx17;
      __THREW__ = 0;
      invoke_vii($645|0,($cell18|0),($646|0));
      $647 = __THREW__; __THREW__ = 0;
      $648 = $647&1;
      if ($648) {
       break;
      }
      $649 = +HEAPF64[$x14>>3];
      $650 = ((($cell18)) + 12|0);
      $651 = HEAP32[$650>>2]|0;
      HEAPF64[$651>>3] = $649;
      $652 = +HEAPF64[$y15>>3];
      $653 = ((($cell18)) + 12|0);
      $654 = HEAP32[$653>>2]|0;
      $655 = ((($654)) + 8|0);
      HEAPF64[$655>>3] = $652;
      $656 = +HEAPF64[$z16>>3];
      $657 = ((($cell18)) + 12|0);
      $658 = HEAP32[$657>>2]|0;
      $659 = ((($658)) + 16|0);
      HEAPF64[$659>>3] = $656;
      $660 = +HEAPF64[$m>>3];
      $661 = ((($cell18)) + 12|0);
      $662 = HEAP32[$661>>2]|0;
      $663 = ((($662)) + 24|0);
      HEAPF64[$663>>3] = $660;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $348 = $typeStr;
     $349 = 9393;
     $664 = $348;
     $665 = $349;
     $666 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($664,$665)|0);
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = $388;
      __THREW__ = 0;
      $669 = (invoke_iiii(342,($668|0),(9550|0),(0|0))|0);
      $670 = __THREW__; __THREW__ = 0;
      $671 = $670&1;
      if ($671) {
       break;
      }
      $346 = $valStr19;
      $347 = $669;
      $672 = $346;
      $345 = $672;
      $673 = $345;
      $344 = $673;
      $674 = $344;
      $343 = $674;
      $675 = $347;
      $676 = $347;
      __THREW__ = 0;
      $677 = (invoke_ii(270,($676|0))|0);
      $678 = __THREW__; __THREW__ = 0;
      $679 = $678&1;
      if ($679) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(271,($672|0),($675|0),($677|0));
      $680 = __THREW__; __THREW__ = 0;
      $681 = $680&1;
      if ($681) {
       break;
      }
      $342 = $ret;
      $682 = $342;
      $341 = $682;
      $683 = $341;
      $340 = $683;
      HEAP32[$683>>2] = 0;
      $684 = ((($683)) + 4|0);
      HEAP32[$684>>2] = 0;
      $685 = ((($683)) + 8|0);
      $338 = $685;
      HEAP32[$339>>2] = 0;
      $686 = $338;
      $337 = $339;
      $687 = $337;
      $688 = HEAP32[$687>>2]|0;
      $335 = $686;
      HEAP32[$336>>2] = $688;
      $689 = $335;
      $334 = $689;
      $333 = $336;
      $690 = $333;
      $691 = HEAP32[$690>>2]|0;
      HEAP32[$689>>2] = $691;
      $331 = $392;
      $332 = 9684;
      $692 = $331;
      $330 = $692;
      $693 = $330;
      $329 = $693;
      $694 = $329;
      $328 = $694;
      $695 = $332;
      $696 = $332;
      __THREW__ = 0;
      $697 = (invoke_ii(270,($696|0))|0);
      $698 = __THREW__; __THREW__ = 0;
      $699 = $698&1;
      L68: do {
       if ($699) {
        label = 64;
       } else {
        __THREW__ = 0;
        invoke_viii(271,($692|0),($695|0),($697|0));
        $700 = __THREW__; __THREW__ = 0;
        $701 = $700&1;
        if ($701) {
         label = 64;
        } else {
         __THREW__ = 0;
         invoke_viii(348,($valStr19|0),($392|0),($ret|0));
         $702 = __THREW__; __THREW__ = 0;
         $703 = $702&1;
         if ($703) {
          $767 = ___cxa_find_matching_catch()|0;
          $768 = tempRet0;
          $389 = $767;
          $390 = $768;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($392);
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($392);
         $327 = $ret;
         $704 = $327;
         $705 = ((($704)) + 4|0);
         $706 = HEAP32[$705>>2]|0;
         $707 = HEAP32[$704>>2]|0;
         $708 = $706;
         $709 = $707;
         $710 = (($708) - ($709))|0;
         $711 = (($710|0) / 12)&-1;
         $count = $711;
         $712 = $count;
         $713 = ($712|0)==(1);
         $714 = $dx;
         $715 = HEAP32[$714>>2]|0;
         $716 = ((($715)) + 20|0);
         $717 = HEAP32[$716>>2]|0;
         $718 = $387;
         $719 = $name;
         __THREW__ = 0;
         $720 = (invoke_ii(345,($719|0))|0);
         $721 = __THREW__; __THREW__ = 0;
         $722 = $721&1;
         L74: do {
          if ($713) {
           if ($722) {
            label = 64;
            break L68;
           }
           __THREW__ = 0;
           $723 = (invoke_iiiii($717|0,($718|0),($720|0),1,1)|0);
           $724 = __THREW__; __THREW__ = 0;
           $725 = $724&1;
           if ($725) {
            label = 64;
            break L68;
           }
           $nx20 = $723;
           $726 = $dx;
           $727 = HEAP32[$726>>2]|0;
           $728 = ((($727)) + 12|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = $nx20;
           __THREW__ = 0;
           invoke_vii($729|0,($cell21|0),($730|0));
           $731 = __THREW__; __THREW__ = 0;
           $732 = $731&1;
           if ($732) {
            label = 64;
            break L68;
           }
           $325 = $ret;
           $326 = 0;
           $733 = $325;
           $734 = $326;
           $735 = HEAP32[$733>>2]|0;
           $736 = (($735) + (($734*12)|0)|0);
           $324 = $736;
           $737 = $324;
           $323 = $737;
           $738 = $323;
           $322 = $738;
           $739 = $322;
           $321 = $739;
           $740 = $321;
           $320 = $740;
           $741 = $320;
           $319 = $741;
           $742 = $319;
           $743 = HEAP8[$742>>0]|0;
           $744 = $743&255;
           $745 = $744 & 1;
           $746 = ($745|0)!=(0);
           if ($746) {
            $313 = $739;
            $747 = $313;
            $312 = $747;
            $748 = $312;
            $311 = $748;
            $749 = $311;
            $750 = ((($749)) + 8|0);
            $751 = HEAP32[$750>>2]|0;
            $758 = $751;
           } else {
            $318 = $739;
            $752 = $318;
            $317 = $752;
            $753 = $317;
            $316 = $753;
            $754 = $316;
            $755 = ((($754)) + 1|0);
            $315 = $755;
            $756 = $315;
            $314 = $756;
            $757 = $314;
            $758 = $757;
           }
           $310 = $758;
           $759 = $310;
           __THREW__ = 0;
           $760 = (invoke_ii(349,($759|0))|0);
           $761 = __THREW__; __THREW__ = 0;
           $762 = $761&1;
           if ($762) {
            label = 64;
            break L68;
           }
           $763 = ((($cell21)) + 12|0);
           $764 = HEAP32[$763>>2]|0;
           HEAP32[$764>>2] = $760;
          } else {
           if ($722) {
            label = 64;
            break L68;
           }
           $769 = $count;
           __THREW__ = 0;
           $770 = (invoke_iiiii($717|0,($718|0),($720|0),1,($769|0))|0);
           $771 = __THREW__; __THREW__ = 0;
           $772 = $771&1;
           if ($772) {
            label = 64;
            break L68;
           }
           $nx22 = $770;
           $773 = $dx;
           $774 = HEAP32[$773>>2]|0;
           $775 = ((($774)) + 12|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = $nx22;
           __THREW__ = 0;
           invoke_vii($776|0,($cell23|0),($777|0));
           $778 = __THREW__; __THREW__ = 0;
           $779 = $778&1;
           if ($779) {
            label = 64;
            break L68;
           }
           $iVal = 0;
           while(1) {
            $780 = $iVal;
            $781 = $count;
            $782 = ($780|0)<($781|0);
            if (!($782)) {
             break L74;
            }
            $783 = $iVal;
            $308 = $ret;
            $309 = $783;
            $784 = $308;
            $785 = $309;
            $786 = HEAP32[$784>>2]|0;
            $787 = (($786) + (($785*12)|0)|0);
            $307 = $787;
            $788 = $307;
            $306 = $788;
            $789 = $306;
            $305 = $789;
            $790 = $305;
            $304 = $790;
            $791 = $304;
            $303 = $791;
            $792 = $303;
            $302 = $792;
            $793 = $302;
            $794 = HEAP8[$793>>0]|0;
            $795 = $794&255;
            $796 = $795 & 1;
            $797 = ($796|0)!=(0);
            if ($797) {
             $296 = $790;
             $798 = $296;
             $295 = $798;
             $799 = $295;
             $294 = $799;
             $800 = $294;
             $801 = ((($800)) + 8|0);
             $802 = HEAP32[$801>>2]|0;
             $809 = $802;
            } else {
             $301 = $790;
             $803 = $301;
             $300 = $803;
             $804 = $300;
             $299 = $804;
             $805 = $299;
             $806 = ((($805)) + 1|0);
             $298 = $806;
             $807 = $298;
             $297 = $807;
             $808 = $297;
             $809 = $808;
            }
            $293 = $809;
            $810 = $293;
            __THREW__ = 0;
            $811 = (invoke_ii(349,($810|0))|0);
            $812 = __THREW__; __THREW__ = 0;
            $813 = $812&1;
            if ($813) {
             label = 64;
             break L68;
            }
            $814 = $iVal;
            $815 = ((($cell23)) + 12|0);
            $816 = HEAP32[$815>>2]|0;
            $817 = (($816) + ($814<<2)|0);
            HEAP32[$817>>2] = $811;
            $818 = $iVal;
            $819 = (($818) + 1)|0;
            $iVal = $819;
           }
          }
         } while(0);
         __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr19);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
         STACKTOP = sp;return;
        }
       }
      } while(0);
      if ((label|0) == 64) {
       $765 = ___cxa_find_matching_catch()|0;
       $766 = tempRet0;
       $389 = $765;
       $390 = $766;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr19);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1694 = $389;
      $1695 = $390;
      ___resumeException($1694|0);
      // unreachable;
     }
     $291 = $typeStr;
     $292 = 9408;
     $820 = $291;
     $821 = $292;
     $822 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($820,$821)|0);
     $823 = ($822|0)==(0);
     if ($823) {
      $824 = $388;
      __THREW__ = 0;
      $825 = (invoke_iiii(342,($824|0),(9550|0),(0|0))|0);
      $826 = __THREW__; __THREW__ = 0;
      $827 = $826&1;
      if ($827) {
       break;
      }
      $289 = $valStr24;
      $290 = $825;
      $828 = $289;
      $288 = $828;
      $829 = $288;
      $287 = $829;
      $830 = $287;
      $286 = $830;
      $831 = $290;
      $832 = $290;
      __THREW__ = 0;
      $833 = (invoke_ii(270,($832|0))|0);
      $834 = __THREW__; __THREW__ = 0;
      $835 = $834&1;
      if ($835) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(271,($828|0),($831|0),($833|0));
      $836 = __THREW__; __THREW__ = 0;
      $837 = $836&1;
      if ($837) {
       break;
      }
      $285 = $ret25;
      $838 = $285;
      $284 = $838;
      $839 = $284;
      $283 = $839;
      HEAP32[$839>>2] = 0;
      $840 = ((($839)) + 4|0);
      HEAP32[$840>>2] = 0;
      $841 = ((($839)) + 8|0);
      $281 = $841;
      HEAP32[$282>>2] = 0;
      $842 = $281;
      $280 = $282;
      $843 = $280;
      $844 = HEAP32[$843>>2]|0;
      $278 = $842;
      HEAP32[$279>>2] = $844;
      $845 = $278;
      $277 = $845;
      $276 = $279;
      $846 = $276;
      $847 = HEAP32[$846>>2]|0;
      HEAP32[$845>>2] = $847;
      $274 = $393;
      $275 = 9684;
      $848 = $274;
      $273 = $848;
      $849 = $273;
      $272 = $849;
      $850 = $272;
      $271 = $850;
      $851 = $275;
      $852 = $275;
      __THREW__ = 0;
      $853 = (invoke_ii(270,($852|0))|0);
      $854 = __THREW__; __THREW__ = 0;
      $855 = $854&1;
      L108: do {
       if ($855) {
        label = 94;
       } else {
        __THREW__ = 0;
        invoke_viii(271,($848|0),($851|0),($853|0));
        $856 = __THREW__; __THREW__ = 0;
        $857 = $856&1;
        if ($857) {
         label = 94;
         break;
        }
        __THREW__ = 0;
        invoke_viii(348,($valStr24|0),($393|0),($ret25|0));
        $858 = __THREW__; __THREW__ = 0;
        $859 = $858&1;
        if ($859) {
         $923 = ___cxa_find_matching_catch()|0;
         $924 = tempRet0;
         $389 = $923;
         $390 = $924;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($393);
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($393);
        $270 = $ret25;
        $860 = $270;
        $861 = ((($860)) + 4|0);
        $862 = HEAP32[$861>>2]|0;
        $863 = HEAP32[$860>>2]|0;
        $864 = $862;
        $865 = $863;
        $866 = (($864) - ($865))|0;
        $867 = (($866|0) / 12)&-1;
        $count26 = $867;
        $868 = $count26;
        $869 = ($868|0)==(1);
        $870 = $dx;
        $871 = HEAP32[$870>>2]|0;
        $872 = ((($871)) + 20|0);
        $873 = HEAP32[$872>>2]|0;
        $874 = $387;
        $875 = $name;
        __THREW__ = 0;
        $876 = (invoke_ii(345,($875|0))|0);
        $877 = __THREW__; __THREW__ = 0;
        $878 = $877&1;
        L114: do {
         if ($869) {
          if ($878) {
           label = 94;
           break L108;
          }
          __THREW__ = 0;
          $879 = (invoke_iiiii($873|0,($874|0),($876|0),2,1)|0);
          $880 = __THREW__; __THREW__ = 0;
          $881 = $880&1;
          if ($881) {
           label = 94;
           break L108;
          }
          $nx27 = $879;
          $882 = $dx;
          $883 = HEAP32[$882>>2]|0;
          $884 = ((($883)) + 12|0);
          $885 = HEAP32[$884>>2]|0;
          $886 = $nx27;
          __THREW__ = 0;
          invoke_vii($885|0,($cell28|0),($886|0));
          $887 = __THREW__; __THREW__ = 0;
          $888 = $887&1;
          if ($888) {
           label = 94;
           break L108;
          }
          $268 = $ret25;
          $269 = 0;
          $889 = $268;
          $890 = $269;
          $891 = HEAP32[$889>>2]|0;
          $892 = (($891) + (($890*12)|0)|0);
          $267 = $892;
          $893 = $267;
          $266 = $893;
          $894 = $266;
          $265 = $894;
          $895 = $265;
          $264 = $895;
          $896 = $264;
          $263 = $896;
          $897 = $263;
          $262 = $897;
          $898 = $262;
          $899 = HEAP8[$898>>0]|0;
          $900 = $899&255;
          $901 = $900 & 1;
          $902 = ($901|0)!=(0);
          if ($902) {
           $256 = $895;
           $903 = $256;
           $255 = $903;
           $904 = $255;
           $254 = $904;
           $905 = $254;
           $906 = ((($905)) + 8|0);
           $907 = HEAP32[$906>>2]|0;
           $914 = $907;
          } else {
           $261 = $895;
           $908 = $261;
           $260 = $908;
           $909 = $260;
           $259 = $909;
           $910 = $259;
           $911 = ((($910)) + 1|0);
           $258 = $911;
           $912 = $258;
           $257 = $912;
           $913 = $257;
           $914 = $913;
          }
          $253 = $914;
          $915 = $253;
          __THREW__ = 0;
          $916 = (+invoke_di(350,($915|0)));
          $917 = __THREW__; __THREW__ = 0;
          $918 = $917&1;
          if ($918) {
           label = 94;
           break L108;
          }
          $919 = ((($cell28)) + 12|0);
          $920 = HEAP32[$919>>2]|0;
          HEAPF64[$920>>3] = $916;
         } else {
          if ($878) {
           label = 94;
           break L108;
          }
          $925 = $count26;
          __THREW__ = 0;
          $926 = (invoke_iiiii($873|0,($874|0),($876|0),2,($925|0))|0);
          $927 = __THREW__; __THREW__ = 0;
          $928 = $927&1;
          if ($928) {
           label = 94;
           break L108;
          }
          $nx29 = $926;
          $929 = $dx;
          $930 = HEAP32[$929>>2]|0;
          $931 = ((($930)) + 12|0);
          $932 = HEAP32[$931>>2]|0;
          $933 = $nx29;
          __THREW__ = 0;
          invoke_vii($932|0,($cell30|0),($933|0));
          $934 = __THREW__; __THREW__ = 0;
          $935 = $934&1;
          if ($935) {
           label = 94;
           break L108;
          }
          $iVal31 = 0;
          while(1) {
           $936 = $iVal31;
           $937 = $count26;
           $938 = ($936|0)<($937|0);
           if (!($938)) {
            break L114;
           }
           $939 = $iVal31;
           $249 = $ret25;
           $250 = $939;
           $940 = $249;
           $941 = $250;
           $942 = HEAP32[$940>>2]|0;
           $943 = (($942) + (($941*12)|0)|0);
           $246 = $943;
           $944 = $246;
           $245 = $944;
           $945 = $245;
           $244 = $945;
           $946 = $244;
           $243 = $946;
           $947 = $243;
           $242 = $947;
           $948 = $242;
           $241 = $948;
           $949 = $241;
           $950 = HEAP8[$949>>0]|0;
           $951 = $950&255;
           $952 = $951 & 1;
           $953 = ($952|0)!=(0);
           if ($953) {
            $235 = $946;
            $954 = $235;
            $234 = $954;
            $955 = $234;
            $233 = $955;
            $956 = $233;
            $957 = ((($956)) + 8|0);
            $958 = HEAP32[$957>>2]|0;
            $965 = $958;
           } else {
            $240 = $946;
            $959 = $240;
            $239 = $959;
            $960 = $239;
            $238 = $960;
            $961 = $238;
            $962 = ((($961)) + 1|0);
            $237 = $962;
            $963 = $237;
            $236 = $963;
            $964 = $236;
            $965 = $964;
           }
           $232 = $965;
           $966 = $232;
           __THREW__ = 0;
           $967 = (+invoke_di(350,($966|0)));
           $968 = __THREW__; __THREW__ = 0;
           $969 = $968&1;
           if ($969) {
            label = 94;
            break L108;
           }
           $970 = $iVal31;
           $971 = ((($cell30)) + 12|0);
           $972 = HEAP32[$971>>2]|0;
           $973 = (($972) + ($970<<3)|0);
           HEAPF64[$973>>3] = $967;
           $974 = $iVal31;
           $975 = (($974) + 1)|0;
           $iVal31 = $975;
          }
         }
        } while(0);
        __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret25);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr24);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
        STACKTOP = sp;return;
       }
      } while(0);
      if ((label|0) == 94) {
       $921 = ___cxa_find_matching_catch()|0;
       $922 = tempRet0;
       $389 = $921;
       $390 = $922;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret25);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr24);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1694 = $389;
      $1695 = $390;
      ___resumeException($1694|0);
      // unreachable;
     }
     $228 = $typeStr;
     $229 = 9426;
     $976 = $228;
     $977 = $229;
     $978 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($976,$977)|0);
     $979 = ($978|0)==(0);
     if ($979) {
      $980 = $388;
      __THREW__ = 0;
      $981 = (invoke_iiii(342,($980|0),(9550|0),(0|0))|0);
      $982 = __THREW__; __THREW__ = 0;
      $983 = $982&1;
      if ($983) {
       break;
      }
      $226 = $valStr32;
      $227 = $981;
      $984 = $226;
      $225 = $984;
      $985 = $225;
      $224 = $985;
      $986 = $224;
      $223 = $986;
      $987 = $227;
      $988 = $227;
      __THREW__ = 0;
      $989 = (invoke_ii(270,($988|0))|0);
      $990 = __THREW__; __THREW__ = 0;
      $991 = $990&1;
      if ($991) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(271,($984|0),($987|0),($989|0));
      $992 = __THREW__; __THREW__ = 0;
      $993 = $992&1;
      if ($993) {
       break;
      }
      $222 = $ret33;
      $994 = $222;
      $221 = $994;
      $995 = $221;
      $220 = $995;
      HEAP32[$995>>2] = 0;
      $996 = ((($995)) + 4|0);
      HEAP32[$996>>2] = 0;
      $997 = ((($995)) + 8|0);
      $218 = $997;
      HEAP32[$219>>2] = 0;
      $998 = $218;
      $217 = $219;
      $999 = $217;
      $1000 = HEAP32[$999>>2]|0;
      $215 = $998;
      HEAP32[$216>>2] = $1000;
      $1001 = $215;
      $214 = $1001;
      $213 = $216;
      $1002 = $213;
      $1003 = HEAP32[$1002>>2]|0;
      HEAP32[$1001>>2] = $1003;
      $211 = $394;
      $212 = 9686;
      $1004 = $211;
      $210 = $1004;
      $1005 = $210;
      $209 = $1005;
      $1006 = $209;
      $208 = $1006;
      $1007 = $212;
      $1008 = $212;
      __THREW__ = 0;
      $1009 = (invoke_ii(270,($1008|0))|0);
      $1010 = __THREW__; __THREW__ = 0;
      $1011 = $1010&1;
      L148: do {
       if ($1011) {
        label = 122;
       } else {
        __THREW__ = 0;
        invoke_viii(271,($1004|0),($1007|0),($1009|0));
        $1012 = __THREW__; __THREW__ = 0;
        $1013 = $1012&1;
        if ($1013) {
         label = 122;
         break;
        }
        __THREW__ = 0;
        invoke_viii(348,($valStr32|0),($394|0),($ret33|0));
        $1014 = __THREW__; __THREW__ = 0;
        $1015 = $1014&1;
        if ($1015) {
         $1074 = ___cxa_find_matching_catch()|0;
         $1075 = tempRet0;
         $389 = $1074;
         $390 = $1075;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($394);
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($394);
        $207 = $ret33;
        $1016 = $207;
        $1017 = ((($1016)) + 4|0);
        $1018 = HEAP32[$1017>>2]|0;
        $1019 = HEAP32[$1016>>2]|0;
        $1020 = $1018;
        $1021 = $1019;
        $1022 = (($1020) - ($1021))|0;
        $1023 = (($1022|0) / 12)&-1;
        $count34 = $1023;
        $1024 = $count34;
        $1025 = ($1024|0)==(1);
        $1026 = $dx;
        $1027 = HEAP32[$1026>>2]|0;
        $1028 = ((($1027)) + 20|0);
        $1029 = HEAP32[$1028>>2]|0;
        $1030 = $387;
        $1031 = $name;
        __THREW__ = 0;
        $1032 = (invoke_ii(345,($1031|0))|0);
        $1033 = __THREW__; __THREW__ = 0;
        $1034 = $1033&1;
        L154: do {
         if ($1025) {
          if ($1034) {
           label = 122;
           break L148;
          }
          __THREW__ = 0;
          $1035 = (invoke_iiiii($1029|0,($1030|0),($1032|0),6,1)|0);
          $1036 = __THREW__; __THREW__ = 0;
          $1037 = $1036&1;
          if ($1037) {
           label = 122;
           break L148;
          }
          $nx35 = $1035;
          $1038 = $dx;
          $1039 = HEAP32[$1038>>2]|0;
          $1040 = ((($1039)) + 52|0);
          $1041 = HEAP32[$1040>>2]|0;
          $1042 = $nx35;
          $205 = $ret33;
          $206 = 0;
          $1043 = $205;
          $1044 = $206;
          $1045 = HEAP32[$1043>>2]|0;
          $1046 = (($1045) + (($1044*12)|0)|0);
          $202 = $1046;
          $1047 = $202;
          $201 = $1047;
          $1048 = $201;
          $200 = $1048;
          $1049 = $200;
          $199 = $1049;
          $1050 = $199;
          $198 = $1050;
          $1051 = $198;
          $197 = $1051;
          $1052 = $197;
          $1053 = HEAP8[$1052>>0]|0;
          $1054 = $1053&255;
          $1055 = $1054 & 1;
          $1056 = ($1055|0)!=(0);
          if ($1056) {
           $191 = $1049;
           $1057 = $191;
           $190 = $1057;
           $1058 = $190;
           $189 = $1058;
           $1059 = $189;
           $1060 = ((($1059)) + 8|0);
           $1061 = HEAP32[$1060>>2]|0;
           $1068 = $1061;
          } else {
           $196 = $1049;
           $1062 = $196;
           $195 = $1062;
           $1063 = $195;
           $194 = $1063;
           $1064 = $194;
           $1065 = ((($1064)) + 1|0);
           $193 = $1065;
           $1066 = $193;
           $192 = $1066;
           $1067 = $192;
           $1068 = $1067;
          }
          $188 = $1068;
          $1069 = $188;
          __THREW__ = 0;
          invoke_viii($1041|0,($1042|0),($1069|0),0);
          $1070 = __THREW__; __THREW__ = 0;
          $1071 = $1070&1;
          if ($1071) {
           label = 122;
           break L148;
          }
         } else {
          if ($1034) {
           label = 122;
           break L148;
          }
          $1076 = $count34;
          __THREW__ = 0;
          $1077 = (invoke_iiiii($1029|0,($1030|0),($1032|0),6,($1076|0))|0);
          $1078 = __THREW__; __THREW__ = 0;
          $1079 = $1078&1;
          if ($1079) {
           label = 122;
           break L148;
          }
          $nx36 = $1077;
          $iVal37 = 0;
          while(1) {
           $1080 = $iVal37;
           $1081 = $count34;
           $1082 = ($1080|0)<($1081|0);
           if (!($1082)) {
            break L154;
           }
           $1083 = $dx;
           $1084 = HEAP32[$1083>>2]|0;
           $1085 = ((($1084)) + 52|0);
           $1086 = HEAP32[$1085>>2]|0;
           $1087 = $nx36;
           $1088 = $iVal37;
           $186 = $ret33;
           $187 = $1088;
           $1089 = $186;
           $1090 = $187;
           $1091 = HEAP32[$1089>>2]|0;
           $1092 = (($1091) + (($1090*12)|0)|0);
           $185 = $1092;
           $1093 = $185;
           $184 = $1093;
           $1094 = $184;
           $183 = $1094;
           $1095 = $183;
           $182 = $1095;
           $1096 = $182;
           $181 = $1096;
           $1097 = $181;
           $180 = $1097;
           $1098 = $180;
           $1099 = HEAP8[$1098>>0]|0;
           $1100 = $1099&255;
           $1101 = $1100 & 1;
           $1102 = ($1101|0)!=(0);
           if ($1102) {
            $174 = $1095;
            $1103 = $174;
            $173 = $1103;
            $1104 = $173;
            $172 = $1104;
            $1105 = $172;
            $1106 = ((($1105)) + 8|0);
            $1107 = HEAP32[$1106>>2]|0;
            $1114 = $1107;
           } else {
            $179 = $1095;
            $1108 = $179;
            $178 = $1108;
            $1109 = $178;
            $177 = $1109;
            $1110 = $177;
            $1111 = ((($1110)) + 1|0);
            $176 = $1111;
            $1112 = $176;
            $175 = $1112;
            $1113 = $175;
            $1114 = $1113;
           }
           $171 = $1114;
           $1115 = $171;
           $1116 = $iVal37;
           __THREW__ = 0;
           invoke_viii($1086|0,($1087|0),($1115|0),($1116|0));
           $1117 = __THREW__; __THREW__ = 0;
           $1118 = $1117&1;
           if ($1118) {
            label = 122;
            break L148;
           }
           $1119 = $iVal37;
           $1120 = (($1119) + 1)|0;
           $iVal37 = $1120;
          }
         }
        } while(0);
        __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret33);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr32);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
        STACKTOP = sp;return;
       }
      } while(0);
      if ((label|0) == 122) {
       $1072 = ___cxa_find_matching_catch()|0;
       $1073 = tempRet0;
       $389 = $1072;
       $390 = $1073;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret33);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr32);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1694 = $389;
      $1695 = $390;
      ___resumeException($1694|0);
      // unreachable;
     }
     $152 = $typeStr;
     $153 = 9448;
     $1121 = $152;
     $1122 = $153;
     $1123 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1121,$1122)|0);
     $1124 = ($1123|0)==(0);
     if ($1124) {
      $1125 = $388;
      __THREW__ = 0;
      $1126 = (invoke_iiii(342,($1125|0),(9550|0),(0|0))|0);
      $1127 = __THREW__; __THREW__ = 0;
      $1128 = $1127&1;
      if ($1128) {
       break;
      }
      $150 = $valStr38;
      $151 = $1126;
      $1129 = $150;
      $149 = $1129;
      $1130 = $149;
      $148 = $1130;
      $1131 = $148;
      $147 = $1131;
      $1132 = $151;
      $1133 = $151;
      __THREW__ = 0;
      $1134 = (invoke_ii(270,($1133|0))|0);
      $1135 = __THREW__; __THREW__ = 0;
      $1136 = $1135&1;
      if ($1136) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(271,($1129|0),($1132|0),($1134|0));
      $1137 = __THREW__; __THREW__ = 0;
      $1138 = $1137&1;
      if ($1138) {
       break;
      }
      $146 = $ret39;
      $1139 = $146;
      $145 = $1139;
      $1140 = $145;
      $144 = $1140;
      HEAP32[$1140>>2] = 0;
      $1141 = ((($1140)) + 4|0);
      HEAP32[$1141>>2] = 0;
      $1142 = ((($1140)) + 8|0);
      $142 = $1142;
      HEAP32[$143>>2] = 0;
      $1143 = $142;
      $141 = $143;
      $1144 = $141;
      $1145 = HEAP32[$1144>>2]|0;
      $139 = $1143;
      HEAP32[$140>>2] = $1145;
      $1146 = $139;
      $138 = $1146;
      $137 = $140;
      $1147 = $137;
      $1148 = HEAP32[$1147>>2]|0;
      HEAP32[$1146>>2] = $1148;
      $135 = $395;
      $136 = 9686;
      $1149 = $135;
      $134 = $1149;
      $1150 = $134;
      $133 = $1150;
      $1151 = $133;
      $132 = $1151;
      $1152 = $136;
      $1153 = $136;
      __THREW__ = 0;
      $1154 = (invoke_ii(270,($1153|0))|0);
      $1155 = __THREW__; __THREW__ = 0;
      $1156 = $1155&1;
      L185: do {
       if ($1156) {
        label = 151;
       } else {
        __THREW__ = 0;
        invoke_viii(271,($1149|0),($1152|0),($1154|0));
        $1157 = __THREW__; __THREW__ = 0;
        $1158 = $1157&1;
        if ($1158) {
         label = 151;
         break;
        }
        __THREW__ = 0;
        invoke_viii(348,($valStr38|0),($395|0),($ret39|0));
        $1159 = __THREW__; __THREW__ = 0;
        $1160 = $1159&1;
        if ($1160) {
         $1228 = ___cxa_find_matching_catch()|0;
         $1229 = tempRet0;
         $389 = $1228;
         $390 = $1229;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($395);
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($395);
        $131 = $ret39;
        $1161 = $131;
        $1162 = ((($1161)) + 4|0);
        $1163 = HEAP32[$1162>>2]|0;
        $1164 = HEAP32[$1161>>2]|0;
        $1165 = $1163;
        $1166 = $1164;
        $1167 = (($1165) - ($1166))|0;
        $1168 = (($1167|0) / 12)&-1;
        $count40 = $1168;
        $1169 = $count40;
        $1170 = ($1169|0)==(1);
        $1171 = $dx;
        $1172 = HEAP32[$1171>>2]|0;
        $1173 = ((($1172)) + 20|0);
        $1174 = HEAP32[$1173>>2]|0;
        $1175 = $387;
        $1176 = $name;
        __THREW__ = 0;
        $1177 = (invoke_ii(345,($1176|0))|0);
        $1178 = __THREW__; __THREW__ = 0;
        $1179 = $1178&1;
        L191: do {
         if ($1170) {
          if ($1179) {
           label = 151;
           break L185;
          }
          __THREW__ = 0;
          $1180 = (invoke_iiiii($1174|0,($1175|0),($1177|0),3,1)|0);
          $1181 = __THREW__; __THREW__ = 0;
          $1182 = $1181&1;
          if ($1182) {
           label = 151;
           break L185;
          }
          $nx41 = $1180;
          $1183 = $dx;
          $1184 = HEAP32[$1183>>2]|0;
          $1185 = ((($1184)) + 12|0);
          $1186 = HEAP32[$1185>>2]|0;
          $1187 = $nx41;
          __THREW__ = 0;
          invoke_vii($1186|0,($cell42|0),($1187|0));
          $1188 = __THREW__; __THREW__ = 0;
          $1189 = $1188&1;
          if ($1189) {
           label = 151;
           break L185;
          }
          $129 = $ret39;
          $130 = 0;
          $1190 = $129;
          $1191 = $130;
          $1192 = HEAP32[$1190>>2]|0;
          $1193 = (($1192) + (($1191*12)|0)|0);
          $128 = $1193;
          $1194 = $128;
          $127 = $1194;
          $1195 = $127;
          $126 = $1195;
          $1196 = $126;
          $125 = $1196;
          $1197 = $125;
          $124 = $1197;
          $1198 = $124;
          $123 = $1198;
          $1199 = $123;
          $1200 = HEAP8[$1199>>0]|0;
          $1201 = $1200&255;
          $1202 = $1201 & 1;
          $1203 = ($1202|0)!=(0);
          if ($1203) {
           $117 = $1196;
           $1204 = $117;
           $116 = $1204;
           $1205 = $116;
           $115 = $1205;
           $1206 = $115;
           $1207 = ((($1206)) + 8|0);
           $1208 = HEAP32[$1207>>2]|0;
           $1215 = $1208;
          } else {
           $122 = $1196;
           $1209 = $122;
           $121 = $1209;
           $1210 = $121;
           $120 = $1210;
           $1211 = $120;
           $1212 = ((($1211)) + 1|0);
           $119 = $1212;
           $1213 = $119;
           $118 = $1213;
           $1214 = $118;
           $1215 = $1214;
          }
          $114 = $1215;
          $1216 = $114;
          __THREW__ = 0;
          HEAP32[$vararg_buffer13>>2] = $x43;
          $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
          HEAP32[$vararg_ptr16>>2] = $y44;
          (invoke_iiii(347,($1216|0),(9577|0),($vararg_buffer13|0))|0);
          $1217 = __THREW__; __THREW__ = 0;
          $1218 = $1217&1;
          if ($1218) {
           label = 151;
           break L185;
          }
          $1219 = +HEAPF64[$x43>>3];
          $1220 = ((($cell42)) + 12|0);
          $1221 = HEAP32[$1220>>2]|0;
          HEAPF64[$1221>>3] = $1219;
          $1222 = +HEAPF64[$y44>>3];
          $1223 = ((($cell42)) + 12|0);
          $1224 = HEAP32[$1223>>2]|0;
          $1225 = ((($1224)) + 8|0);
          HEAPF64[$1225>>3] = $1222;
         } else {
          if ($1179) {
           label = 151;
           break L185;
          }
          $1230 = $count40;
          __THREW__ = 0;
          $1231 = (invoke_iiiii($1174|0,($1175|0),($1177|0),3,($1230|0))|0);
          $1232 = __THREW__; __THREW__ = 0;
          $1233 = $1232&1;
          if ($1233) {
           label = 151;
           break L185;
          }
          $nx45 = $1231;
          $1234 = $dx;
          $1235 = HEAP32[$1234>>2]|0;
          $1236 = ((($1235)) + 12|0);
          $1237 = HEAP32[$1236>>2]|0;
          $1238 = $nx45;
          __THREW__ = 0;
          invoke_vii($1237|0,($cell46|0),($1238|0));
          $1239 = __THREW__; __THREW__ = 0;
          $1240 = $1239&1;
          if ($1240) {
           label = 151;
           break L185;
          }
          $iVal47 = 0;
          while(1) {
           $1241 = $iVal47;
           $1242 = $count40;
           $1243 = ($1241|0)<($1242|0);
           if (!($1243)) {
            break L191;
           }
           $1244 = $iVal47;
           $95 = $ret39;
           $96 = $1244;
           $1245 = $95;
           $1246 = $96;
           $1247 = HEAP32[$1245>>2]|0;
           $1248 = (($1247) + (($1246*12)|0)|0);
           $94 = $1248;
           $1249 = $94;
           $93 = $1249;
           $1250 = $93;
           $92 = $1250;
           $1251 = $92;
           $91 = $1251;
           $1252 = $91;
           $90 = $1252;
           $1253 = $90;
           $89 = $1253;
           $1254 = $89;
           $1255 = HEAP8[$1254>>0]|0;
           $1256 = $1255&255;
           $1257 = $1256 & 1;
           $1258 = ($1257|0)!=(0);
           if ($1258) {
            $83 = $1251;
            $1259 = $83;
            $82 = $1259;
            $1260 = $82;
            $81 = $1260;
            $1261 = $81;
            $1262 = ((($1261)) + 8|0);
            $1263 = HEAP32[$1262>>2]|0;
            $1270 = $1263;
           } else {
            $88 = $1251;
            $1264 = $88;
            $87 = $1264;
            $1265 = $87;
            $86 = $1265;
            $1266 = $86;
            $1267 = ((($1266)) + 1|0);
            $85 = $1267;
            $1268 = $85;
            $84 = $1268;
            $1269 = $84;
            $1270 = $1269;
           }
           $80 = $1270;
           $1271 = $80;
           __THREW__ = 0;
           HEAP32[$vararg_buffer17>>2] = $x48;
           $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
           HEAP32[$vararg_ptr20>>2] = $y49;
           (invoke_iiii(347,($1271|0),(9577|0),($vararg_buffer17|0))|0);
           $1272 = __THREW__; __THREW__ = 0;
           $1273 = $1272&1;
           if ($1273) {
            label = 151;
            break L185;
           }
           $1274 = +HEAPF64[$x48>>3];
           $1275 = $iVal47;
           $1276 = ((($cell46)) + 12|0);
           $1277 = HEAP32[$1276>>2]|0;
           $1278 = (($1277) + ($1275<<4)|0);
           HEAPF64[$1278>>3] = $1274;
           $1279 = +HEAPF64[$y49>>3];
           $1280 = $iVal47;
           $1281 = ((($cell46)) + 12|0);
           $1282 = HEAP32[$1281>>2]|0;
           $1283 = (($1282) + ($1280<<4)|0);
           $1284 = ((($1283)) + 8|0);
           HEAPF64[$1284>>3] = $1279;
           $1285 = $iVal47;
           $1286 = (($1285) + 1)|0;
           $iVal47 = $1286;
          }
         }
        } while(0);
        __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret39);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr38);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
        STACKTOP = sp;return;
       }
      } while(0);
      if ((label|0) == 151) {
       $1226 = ___cxa_find_matching_catch()|0;
       $1227 = tempRet0;
       $389 = $1226;
       $390 = $1227;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret39);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr38);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1694 = $389;
      $1695 = $390;
      ___resumeException($1694|0);
      // unreachable;
     }
     $77 = $typeStr;
     $78 = 9472;
     $1287 = $77;
     $1288 = $78;
     $1289 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1287,$1288)|0);
     $1290 = ($1289|0)==(0);
     if ($1290) {
      $1291 = $388;
      __THREW__ = 0;
      $1292 = (invoke_iiii(342,($1291|0),(9550|0),(0|0))|0);
      $1293 = __THREW__; __THREW__ = 0;
      $1294 = $1293&1;
      if ($1294) {
       break;
      }
      $valStr50 = $1292;
      $76 = $ret51;
      $1295 = $76;
      $75 = $1295;
      $1296 = $75;
      $74 = $1296;
      HEAP32[$1296>>2] = 0;
      $1297 = ((($1296)) + 4|0);
      HEAP32[$1297>>2] = 0;
      $1298 = ((($1296)) + 8|0);
      $72 = $1298;
      HEAP32[$73>>2] = 0;
      $1299 = $72;
      $71 = $73;
      $1300 = $71;
      $1301 = HEAP32[$1300>>2]|0;
      $69 = $1299;
      HEAP32[$70>>2] = $1301;
      $1302 = $69;
      $68 = $1302;
      $67 = $70;
      $1303 = $67;
      $1304 = HEAP32[$1303>>2]|0;
      HEAP32[$1302>>2] = $1304;
      $1305 = $valStr50;
      $60 = $396;
      $61 = $1305;
      $1306 = $60;
      $59 = $1306;
      $1307 = $59;
      $58 = $1307;
      $1308 = $58;
      $57 = $1308;
      $1309 = $61;
      $1310 = $61;
      __THREW__ = 0;
      $1311 = (invoke_ii(270,($1310|0))|0);
      $1312 = __THREW__; __THREW__ = 0;
      $1313 = $1312&1;
      L223: do {
       if ($1313) {
        label = 181;
       } else {
        __THREW__ = 0;
        invoke_viii(271,($1306|0),($1309|0),($1311|0));
        $1314 = __THREW__; __THREW__ = 0;
        $1315 = $1314&1;
        if ($1315) {
         label = 181;
         break;
        }
        $55 = $397;
        $56 = 9686;
        $1316 = $55;
        $54 = $1316;
        $1317 = $54;
        $53 = $1317;
        $1318 = $53;
        $52 = $1318;
        $1319 = $56;
        $1320 = $56;
        __THREW__ = 0;
        $1321 = (invoke_ii(270,($1320|0))|0);
        $1322 = __THREW__; __THREW__ = 0;
        $1323 = $1322&1;
        do {
         if ($1323) {
          label = 182;
         } else {
          __THREW__ = 0;
          invoke_viii(271,($1316|0),($1319|0),($1321|0));
          $1324 = __THREW__; __THREW__ = 0;
          $1325 = $1324&1;
          if ($1325) {
           label = 182;
           break;
          }
          __THREW__ = 0;
          invoke_viii(348,($396|0),($397|0),($ret51|0));
          $1326 = __THREW__; __THREW__ = 0;
          $1327 = $1326&1;
          if ($1327) {
           $1401 = ___cxa_find_matching_catch()|0;
           $1402 = tempRet0;
           $389 = $1401;
           $390 = $1402;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($397);
           break;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($397);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($396);
          $51 = $ret51;
          $1328 = $51;
          $1329 = ((($1328)) + 4|0);
          $1330 = HEAP32[$1329>>2]|0;
          $1331 = HEAP32[$1328>>2]|0;
          $1332 = $1330;
          $1333 = $1331;
          $1334 = (($1332) - ($1333))|0;
          $1335 = (($1334|0) / 12)&-1;
          $count52 = $1335;
          $1336 = $count52;
          $1337 = ($1336|0)==(1);
          $1338 = $dx;
          $1339 = HEAP32[$1338>>2]|0;
          $1340 = ((($1339)) + 20|0);
          $1341 = HEAP32[$1340>>2]|0;
          $1342 = $387;
          $1343 = $name;
          __THREW__ = 0;
          $1344 = (invoke_ii(345,($1343|0))|0);
          $1345 = __THREW__; __THREW__ = 0;
          $1346 = $1345&1;
          L232: do {
           if ($1337) {
            if ($1346) {
             label = 181;
             break L223;
            }
            __THREW__ = 0;
            $1347 = (invoke_iiiii($1341|0,($1342|0),($1344|0),4,1)|0);
            $1348 = __THREW__; __THREW__ = 0;
            $1349 = $1348&1;
            if ($1349) {
             label = 181;
             break L223;
            }
            $nx53 = $1347;
            $1350 = $dx;
            $1351 = HEAP32[$1350>>2]|0;
            $1352 = ((($1351)) + 12|0);
            $1353 = HEAP32[$1352>>2]|0;
            $1354 = $nx53;
            __THREW__ = 0;
            invoke_vii($1353|0,($cell54|0),($1354|0));
            $1355 = __THREW__; __THREW__ = 0;
            $1356 = $1355&1;
            if ($1356) {
             label = 181;
             break L223;
            }
            $49 = $ret51;
            $50 = 0;
            $1357 = $49;
            $1358 = $50;
            $1359 = HEAP32[$1357>>2]|0;
            $1360 = (($1359) + (($1358*12)|0)|0);
            $48 = $1360;
            $1361 = $48;
            $47 = $1361;
            $1362 = $47;
            $46 = $1362;
            $1363 = $46;
            $45 = $1363;
            $1364 = $45;
            $44 = $1364;
            $1365 = $44;
            $43 = $1365;
            $1366 = $43;
            $1367 = HEAP8[$1366>>0]|0;
            $1368 = $1367&255;
            $1369 = $1368 & 1;
            $1370 = ($1369|0)!=(0);
            if ($1370) {
             $37 = $1363;
             $1371 = $37;
             $36 = $1371;
             $1372 = $36;
             $35 = $1372;
             $1373 = $35;
             $1374 = ((($1373)) + 8|0);
             $1375 = HEAP32[$1374>>2]|0;
             $1382 = $1375;
            } else {
             $42 = $1363;
             $1376 = $42;
             $41 = $1376;
             $1377 = $41;
             $40 = $1377;
             $1378 = $40;
             $1379 = ((($1378)) + 1|0);
             $39 = $1379;
             $1380 = $39;
             $38 = $1380;
             $1381 = $38;
             $1382 = $1381;
            }
            $34 = $1382;
            $1383 = $34;
            __THREW__ = 0;
            HEAP32[$vararg_buffer21>>2] = $x55;
            $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
            HEAP32[$vararg_ptr24>>2] = $y56;
            $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
            HEAP32[$vararg_ptr25>>2] = $z57;
            (invoke_iiii(347,($1383|0),(9618|0),($vararg_buffer21|0))|0);
            $1384 = __THREW__; __THREW__ = 0;
            $1385 = $1384&1;
            if ($1385) {
             label = 181;
             break L223;
            }
            $1386 = +HEAPF64[$x55>>3];
            $1387 = ((($cell54)) + 12|0);
            $1388 = HEAP32[$1387>>2]|0;
            HEAPF64[$1388>>3] = $1386;
            $1389 = +HEAPF64[$y56>>3];
            $1390 = ((($cell54)) + 12|0);
            $1391 = HEAP32[$1390>>2]|0;
            $1392 = ((($1391)) + 8|0);
            HEAPF64[$1392>>3] = $1389;
            $1393 = +HEAPF64[$z57>>3];
            $1394 = ((($cell54)) + 12|0);
            $1395 = HEAP32[$1394>>2]|0;
            $1396 = ((($1395)) + 16|0);
            HEAPF64[$1396>>3] = $1393;
           } else {
            if ($1346) {
             label = 181;
             break L223;
            }
            $1403 = $count52;
            __THREW__ = 0;
            $1404 = (invoke_iiiii($1341|0,($1342|0),($1344|0),4,($1403|0))|0);
            $1405 = __THREW__; __THREW__ = 0;
            $1406 = $1405&1;
            if ($1406) {
             label = 181;
             break L223;
            }
            $nx58 = $1404;
            $1407 = $dx;
            $1408 = HEAP32[$1407>>2]|0;
            $1409 = ((($1408)) + 12|0);
            $1410 = HEAP32[$1409>>2]|0;
            $1411 = $nx58;
            __THREW__ = 0;
            invoke_vii($1410|0,($cell59|0),($1411|0));
            $1412 = __THREW__; __THREW__ = 0;
            $1413 = $1412&1;
            if ($1413) {
             label = 181;
             break L223;
            }
            $iVal60 = 0;
            while(1) {
             $1414 = $iVal60;
             $1415 = $count52;
             $1416 = ($1414|0)<($1415|0);
             if (!($1416)) {
              break L232;
             }
             $1417 = $iVal60;
             $32 = $ret51;
             $33 = $1417;
             $1418 = $32;
             $1419 = $33;
             $1420 = HEAP32[$1418>>2]|0;
             $1421 = (($1420) + (($1419*12)|0)|0);
             $16 = $1421;
             $1422 = $16;
             $15 = $1422;
             $1423 = $15;
             $14 = $1423;
             $1424 = $14;
             $13 = $1424;
             $1425 = $13;
             $12 = $1425;
             $1426 = $12;
             $11 = $1426;
             $1427 = $11;
             $1428 = HEAP8[$1427>>0]|0;
             $1429 = $1428&255;
             $1430 = $1429 & 1;
             $1431 = ($1430|0)!=(0);
             if ($1431) {
              $5 = $1424;
              $1432 = $5;
              $4 = $1432;
              $1433 = $4;
              $3 = $1433;
              $1434 = $3;
              $1435 = ((($1434)) + 8|0);
              $1436 = HEAP32[$1435>>2]|0;
              $1443 = $1436;
             } else {
              $10 = $1424;
              $1437 = $10;
              $9 = $1437;
              $1438 = $9;
              $8 = $1438;
              $1439 = $8;
              $1440 = ((($1439)) + 1|0);
              $7 = $1440;
              $1441 = $7;
              $6 = $1441;
              $1442 = $6;
              $1443 = $1442;
             }
             $2 = $1443;
             $1444 = $2;
             __THREW__ = 0;
             HEAP32[$vararg_buffer26>>2] = $x61;
             $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
             HEAP32[$vararg_ptr29>>2] = $y62;
             $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
             HEAP32[$vararg_ptr30>>2] = $z63;
             (invoke_iiii(347,($1444|0),(9618|0),($vararg_buffer26|0))|0);
             $1445 = __THREW__; __THREW__ = 0;
             $1446 = $1445&1;
             if ($1446) {
              label = 181;
              break L223;
             }
             $1447 = +HEAPF64[$x61>>3];
             $1448 = $iVal60;
             $1449 = ((($cell59)) + 12|0);
             $1450 = HEAP32[$1449>>2]|0;
             $1451 = (($1450) + (($1448*24)|0)|0);
             HEAPF64[$1451>>3] = $1447;
             $1452 = +HEAPF64[$y62>>3];
             $1453 = $iVal60;
             $1454 = ((($cell59)) + 12|0);
             $1455 = HEAP32[$1454>>2]|0;
             $1456 = (($1455) + (($1453*24)|0)|0);
             $1457 = ((($1456)) + 8|0);
             HEAPF64[$1457>>3] = $1452;
             $1458 = +HEAPF64[$z63>>3];
             $1459 = $iVal60;
             $1460 = ((($cell59)) + 12|0);
             $1461 = HEAP32[$1460>>2]|0;
             $1462 = (($1461) + (($1459*24)|0)|0);
             $1463 = ((($1462)) + 16|0);
             HEAPF64[$1463>>3] = $1458;
             $1464 = $iVal60;
             $1465 = (($1464) + 1)|0;
             $iVal60 = $1465;
            }
           }
          } while(0);
          __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret51);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
          STACKTOP = sp;return;
         }
        } while(0);
        if ((label|0) == 182) {
         $1399 = ___cxa_find_matching_catch()|0;
         $1400 = tempRet0;
         $389 = $1399;
         $390 = $1400;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($396);
       }
      } while(0);
      if ((label|0) == 181) {
       $1397 = ___cxa_find_matching_catch()|0;
       $1398 = tempRet0;
       $389 = $1397;
       $390 = $1398;
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret51);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      $1694 = $389;
      $1695 = $390;
      ___resumeException($1694|0);
      // unreachable;
     }
     $0 = $typeStr;
     $1 = 9496;
     $1466 = $0;
     $1467 = $1;
     $1468 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1466,$1467)|0);
     $1469 = ($1468|0)==(0);
     if (!($1469)) {
      $203 = $typeStr;
      $204 = 9511;
      $1651 = $203;
      $1652 = $204;
      $1653 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1651,$1652)|0);
      $1654 = ($1653|0)==(0);
      do {
       if (!($1654)) {
        $230 = $typeStr;
        $231 = 9515;
        $1655 = $230;
        $1656 = $231;
        $1657 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1655,$1656)|0);
        $1658 = ($1657|0)==(0);
        if ($1658) {
         break;
        }
        $247 = $typeStr;
        $248 = 9520;
        $1659 = $247;
        $1660 = $248;
        $1661 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1659,$1660)|0);
        $1662 = ($1661|0)==(0);
        if ($1662) {
         break;
        }
        $251 = $typeStr;
        $252 = 9524;
        $1663 = $251;
        $1664 = $252;
        $1665 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1663,$1664)|0);
        $1666 = ($1665|0)==(0);
        if ($1666) {
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
        STACKTOP = sp;return;
       }
      } while(0);
      $1667 = $dx;
      $1668 = HEAP32[$1667>>2]|0;
      $1669 = ((($1668)) + 20|0);
      $1670 = HEAP32[$1669>>2]|0;
      $1671 = $387;
      $1672 = $name;
      __THREW__ = 0;
      $1673 = (invoke_ii(345,($1672|0))|0);
      $1674 = __THREW__; __THREW__ = 0;
      $1675 = $1674&1;
      if ($1675) {
       break;
      }
      $1676 = $kernelType;
      __THREW__ = 0;
      $1677 = (invoke_iiiii($1670|0,($1671|0),($1673|0),($1676|0),1)|0);
      $1678 = __THREW__; __THREW__ = 0;
      $1679 = $1678&1;
      if ($1679) {
       break;
      }
      $nx80 = $1677;
      $1680 = $388;
      __THREW__ = 0;
      $1681 = (invoke_iii(351,($1680|0),(0|0))|0);
      $1682 = __THREW__; __THREW__ = 0;
      $1683 = $1682&1;
      if ($1683) {
       break;
      }
      $childEle = $1681;
      while(1) {
       $1684 = $childEle;
       $1685 = ($1684|0)!=(0|0);
       if (!($1685)) {
        break;
       }
       $1686 = $nx80;
       $1687 = $childEle;
       __THREW__ = 0;
       invoke_vii(352,($1686|0),($1687|0));
       $1688 = __THREW__; __THREW__ = 0;
       $1689 = $1688&1;
       if ($1689) {
        break L1;
       }
       $1690 = $childEle;
       __THREW__ = 0;
       $1691 = (invoke_iii(353,($1690|0),(0|0))|0);
       $1692 = __THREW__; __THREW__ = 0;
       $1693 = $1692&1;
       if ($1693) {
        break L1;
       }
       $childEle = $1691;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
      STACKTOP = sp;return;
     }
     $1470 = $388;
     __THREW__ = 0;
     $1471 = (invoke_iiii(342,($1470|0),(9550|0),(0|0))|0);
     $1472 = __THREW__; __THREW__ = 0;
     $1473 = $1472&1;
     if (!($1473)) {
      $20 = $valStr64;
      $21 = $1471;
      $1474 = $20;
      $19 = $1474;
      $1475 = $19;
      $18 = $1475;
      $1476 = $18;
      $17 = $1476;
      $1477 = $21;
      $1478 = $21;
      __THREW__ = 0;
      $1479 = (invoke_ii(270,($1478|0))|0);
      $1480 = __THREW__; __THREW__ = 0;
      $1481 = $1480&1;
      if (!($1481)) {
       __THREW__ = 0;
       invoke_viii(271,($1474|0),($1477|0),($1479|0));
       $1482 = __THREW__; __THREW__ = 0;
       $1483 = $1482&1;
       if ($1483) {
        break;
       }
       $31 = $ret65;
       $1484 = $31;
       $30 = $1484;
       $1485 = $30;
       $29 = $1485;
       HEAP32[$1485>>2] = 0;
       $1486 = ((($1485)) + 4|0);
       HEAP32[$1486>>2] = 0;
       $1487 = ((($1485)) + 8|0);
       $27 = $1487;
       HEAP32[$28>>2] = 0;
       $1488 = $27;
       $26 = $28;
       $1489 = $26;
       $1490 = HEAP32[$1489>>2]|0;
       $24 = $1488;
       HEAP32[$25>>2] = $1490;
       $1491 = $24;
       $23 = $1491;
       $22 = $25;
       $1492 = $22;
       $1493 = HEAP32[$1492>>2]|0;
       HEAP32[$1491>>2] = $1493;
       $65 = $398;
       $66 = 9686;
       $1494 = $65;
       $64 = $1494;
       $1495 = $64;
       $63 = $1495;
       $1496 = $63;
       $62 = $1496;
       $1497 = $66;
       $1498 = $66;
       __THREW__ = 0;
       $1499 = (invoke_ii(270,($1498|0))|0);
       $1500 = __THREW__; __THREW__ = 0;
       $1501 = $1500&1;
       L285: do {
        if ($1501) {
         label = 213;
        } else {
         __THREW__ = 0;
         invoke_viii(271,($1494|0),($1497|0),($1499|0));
         $1502 = __THREW__; __THREW__ = 0;
         $1503 = $1502&1;
         if ($1503) {
          label = 213;
          break;
         }
         __THREW__ = 0;
         invoke_viii(348,($valStr64|0),($398|0),($ret65|0));
         $1504 = __THREW__; __THREW__ = 0;
         $1505 = $1504&1;
         if ($1505) {
          $1581 = ___cxa_find_matching_catch()|0;
          $1582 = tempRet0;
          $389 = $1581;
          $390 = $1582;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($398);
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($398);
         $79 = $ret65;
         $1506 = $79;
         $1507 = ((($1506)) + 4|0);
         $1508 = HEAP32[$1507>>2]|0;
         $1509 = HEAP32[$1506>>2]|0;
         $1510 = $1508;
         $1511 = $1509;
         $1512 = (($1510) - ($1511))|0;
         $1513 = (($1512|0) / 12)&-1;
         $count66 = $1513;
         $1514 = $count66;
         $1515 = ($1514|0)==(1);
         $1516 = $dx;
         $1517 = HEAP32[$1516>>2]|0;
         $1518 = ((($1517)) + 20|0);
         $1519 = HEAP32[$1518>>2]|0;
         $1520 = $387;
         $1521 = $name;
         __THREW__ = 0;
         $1522 = (invoke_ii(345,($1521|0))|0);
         $1523 = __THREW__; __THREW__ = 0;
         $1524 = $1523&1;
         L291: do {
          if ($1515) {
           if ($1524) {
            label = 213;
            break L285;
           }
           __THREW__ = 0;
           $1525 = (invoke_iiiii($1519|0,($1520|0),($1522|0),5,1)|0);
           $1526 = __THREW__; __THREW__ = 0;
           $1527 = $1526&1;
           if ($1527) {
            label = 213;
            break L285;
           }
           $nx67 = $1525;
           $1528 = $dx;
           $1529 = HEAP32[$1528>>2]|0;
           $1530 = ((($1529)) + 12|0);
           $1531 = HEAP32[$1530>>2]|0;
           $1532 = $nx67;
           __THREW__ = 0;
           invoke_vii($1531|0,($cell68|0),($1532|0));
           $1533 = __THREW__; __THREW__ = 0;
           $1534 = $1533&1;
           if ($1534) {
            label = 213;
            break L285;
           }
           $97 = $ret65;
           $98 = 0;
           $1535 = $97;
           $1536 = $98;
           $1537 = HEAP32[$1535>>2]|0;
           $1538 = (($1537) + (($1536*12)|0)|0);
           $113 = $1538;
           $1539 = $113;
           $112 = $1539;
           $1540 = $112;
           $111 = $1540;
           $1541 = $111;
           $110 = $1541;
           $1542 = $110;
           $109 = $1542;
           $1543 = $109;
           $108 = $1543;
           $1544 = $108;
           $1545 = HEAP8[$1544>>0]|0;
           $1546 = $1545&255;
           $1547 = $1546 & 1;
           $1548 = ($1547|0)!=(0);
           if ($1548) {
            $102 = $1541;
            $1549 = $102;
            $101 = $1549;
            $1550 = $101;
            $100 = $1550;
            $1551 = $100;
            $1552 = ((($1551)) + 8|0);
            $1553 = HEAP32[$1552>>2]|0;
            $1560 = $1553;
           } else {
            $107 = $1541;
            $1554 = $107;
            $106 = $1554;
            $1555 = $106;
            $105 = $1555;
            $1556 = $105;
            $1557 = ((($1556)) + 1|0);
            $104 = $1557;
            $1558 = $104;
            $103 = $1558;
            $1559 = $103;
            $1560 = $1559;
           }
           $99 = $1560;
           $1561 = $99;
           __THREW__ = 0;
           HEAP32[$vararg_buffer31>>2] = $x69;
           $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
           HEAP32[$vararg_ptr34>>2] = $y70;
           $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
           HEAP32[$vararg_ptr35>>2] = $z71;
           $vararg_ptr36 = ((($vararg_buffer31)) + 12|0);
           HEAP32[$vararg_ptr36>>2] = $m72;
           (invoke_iiii(347,($1561|0),(9660|0),($vararg_buffer31|0))|0);
           $1562 = __THREW__; __THREW__ = 0;
           $1563 = $1562&1;
           if ($1563) {
            label = 213;
            break L285;
           }
           $1564 = +HEAPF64[$x69>>3];
           $1565 = ((($cell68)) + 12|0);
           $1566 = HEAP32[$1565>>2]|0;
           HEAPF64[$1566>>3] = $1564;
           $1567 = +HEAPF64[$y70>>3];
           $1568 = ((($cell68)) + 12|0);
           $1569 = HEAP32[$1568>>2]|0;
           $1570 = ((($1569)) + 8|0);
           HEAPF64[$1570>>3] = $1567;
           $1571 = +HEAPF64[$z71>>3];
           $1572 = ((($cell68)) + 12|0);
           $1573 = HEAP32[$1572>>2]|0;
           $1574 = ((($1573)) + 16|0);
           HEAPF64[$1574>>3] = $1571;
           $1575 = +HEAPF64[$m72>>3];
           $1576 = ((($cell68)) + 12|0);
           $1577 = HEAP32[$1576>>2]|0;
           $1578 = ((($1577)) + 24|0);
           HEAPF64[$1578>>3] = $1575;
          } else {
           if ($1524) {
            label = 213;
            break L285;
           }
           $1583 = $count66;
           __THREW__ = 0;
           $1584 = (invoke_iiiii($1519|0,($1520|0),($1522|0),5,($1583|0))|0);
           $1585 = __THREW__; __THREW__ = 0;
           $1586 = $1585&1;
           if ($1586) {
            label = 213;
            break L285;
           }
           $nx73 = $1584;
           $1587 = $dx;
           $1588 = HEAP32[$1587>>2]|0;
           $1589 = ((($1588)) + 12|0);
           $1590 = HEAP32[$1589>>2]|0;
           $1591 = $nx73;
           __THREW__ = 0;
           invoke_vii($1590|0,($cell74|0),($1591|0));
           $1592 = __THREW__; __THREW__ = 0;
           $1593 = $1592&1;
           if ($1593) {
            label = 213;
            break L285;
           }
           $iVal75 = 0;
           while(1) {
            $1594 = $iVal75;
            $1595 = $count66;
            $1596 = ($1594|0)<($1595|0);
            if (!($1596)) {
             break L291;
            }
            $154 = $ret65;
            $155 = 0;
            $1597 = $154;
            $1598 = $155;
            $1599 = HEAP32[$1597>>2]|0;
            $1600 = (($1599) + (($1598*12)|0)|0);
            $170 = $1600;
            $1601 = $170;
            $169 = $1601;
            $1602 = $169;
            $168 = $1602;
            $1603 = $168;
            $167 = $1603;
            $1604 = $167;
            $166 = $1604;
            $1605 = $166;
            $165 = $1605;
            $1606 = $165;
            $1607 = HEAP8[$1606>>0]|0;
            $1608 = $1607&255;
            $1609 = $1608 & 1;
            $1610 = ($1609|0)!=(0);
            if ($1610) {
             $159 = $1603;
             $1611 = $159;
             $158 = $1611;
             $1612 = $158;
             $157 = $1612;
             $1613 = $157;
             $1614 = ((($1613)) + 8|0);
             $1615 = HEAP32[$1614>>2]|0;
             $1622 = $1615;
            } else {
             $164 = $1603;
             $1616 = $164;
             $163 = $1616;
             $1617 = $163;
             $162 = $1617;
             $1618 = $162;
             $1619 = ((($1618)) + 1|0);
             $161 = $1619;
             $1620 = $161;
             $160 = $1620;
             $1621 = $160;
             $1622 = $1621;
            }
            $156 = $1622;
            $1623 = $156;
            __THREW__ = 0;
            HEAP32[$vararg_buffer37>>2] = $x76;
            $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
            HEAP32[$vararg_ptr40>>2] = $y77;
            $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
            HEAP32[$vararg_ptr41>>2] = $z78;
            $vararg_ptr42 = ((($vararg_buffer37)) + 12|0);
            HEAP32[$vararg_ptr42>>2] = $m79;
            (invoke_iiii(347,($1623|0),(9660|0),($vararg_buffer37|0))|0);
            $1624 = __THREW__; __THREW__ = 0;
            $1625 = $1624&1;
            if ($1625) {
             label = 213;
             break L285;
            }
            $1626 = +HEAPF64[$x76>>3];
            $1627 = $iVal75;
            $1628 = ((($cell74)) + 12|0);
            $1629 = HEAP32[$1628>>2]|0;
            $1630 = (($1629) + ($1627<<5)|0);
            HEAPF64[$1630>>3] = $1626;
            $1631 = +HEAPF64[$y77>>3];
            $1632 = $iVal75;
            $1633 = ((($cell74)) + 12|0);
            $1634 = HEAP32[$1633>>2]|0;
            $1635 = (($1634) + ($1632<<5)|0);
            $1636 = ((($1635)) + 8|0);
            HEAPF64[$1636>>3] = $1631;
            $1637 = +HEAPF64[$z78>>3];
            $1638 = $iVal75;
            $1639 = ((($cell74)) + 12|0);
            $1640 = HEAP32[$1639>>2]|0;
            $1641 = (($1640) + ($1638<<5)|0);
            $1642 = ((($1641)) + 16|0);
            HEAPF64[$1642>>3] = $1637;
            $1643 = +HEAPF64[$m79>>3];
            $1644 = $iVal75;
            $1645 = ((($cell74)) + 12|0);
            $1646 = HEAP32[$1645>>2]|0;
            $1647 = (($1646) + ($1644<<5)|0);
            $1648 = ((($1647)) + 24|0);
            HEAPF64[$1648>>3] = $1643;
            $1649 = $iVal75;
            $1650 = (($1649) + 1)|0;
            $iVal75 = $1650;
           }
          }
         } while(0);
         __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret65);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr64);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
         STACKTOP = sp;return;
        }
       } while(0);
       if ((label|0) == 213) {
        $1579 = ___cxa_find_matching_catch()|0;
        $1580 = tempRet0;
        $389 = $1579;
        $390 = $1580;
       }
       __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($ret65);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($valStr64);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
       $1694 = $389;
       $1695 = $390;
       ___resumeException($1694|0);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 $479 = ___cxa_find_matching_catch()|0;
 $480 = tempRet0;
 $389 = $479;
 $390 = $480;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($typeStr);
 $1694 = $389;
 $1695 = $390;
 ___resumeException($1694|0);
 // unreachable;
}
function __Z15loadFromXmlFileiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$dxObj,$xml_str) {
 $agg$result = $agg$result|0;
 $dxObj = $dxObj|0;
 $xml_str = $xml_str|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $doc = 0, $ele = 0, $error_info = 0, $realDx = 0, $rootEle = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $doc = sp + 24|0;
 $25 = $dxObj;
 $29 = $25;
 $30 = $29;
 $realDx = $30;
 __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE($doc,1,0);
 $24 = $xml_str;
 $31 = $24;
 $23 = $31;
 $32 = $23;
 $22 = $32;
 $33 = $22;
 $21 = $33;
 $34 = $21;
 $20 = $34;
 $35 = $20;
 $19 = $35;
 $36 = $19;
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38 & 1;
 $40 = ($39|0)!=(0);
 if ($40) {
  $13 = $33;
  $41 = $13;
  $12 = $41;
  $42 = $12;
  $11 = $42;
  $43 = $11;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $52 = $45;
 } else {
  $18 = $33;
  $46 = $18;
  $17 = $46;
  $47 = $17;
  $16 = $47;
  $48 = $16;
  $49 = ((($48)) + 1|0);
  $15 = $49;
  $50 = $15;
  $14 = $50;
  $51 = $14;
  $52 = $51;
 }
 $10 = $52;
 $53 = $10;
 __THREW__ = 0;
 $54 = (invoke_iiii(354,($doc|0),($53|0),-1)|0);
 $55 = __THREW__; __THREW__ = 0;
 $56 = $55&1;
 L5: do {
  if (!($56)) {
   $error_info = $54;
   __THREW__ = 0;
   $57 = (invoke_ii(355,($doc|0))|0);
   $58 = __THREW__; __THREW__ = 0;
   $59 = $58&1;
   if (!($59)) {
    $rootEle = $57;
    $60 = $rootEle;
    __THREW__ = 0;
    $61 = (invoke_iii(351,($60|0),(0|0))|0);
    $62 = __THREW__; __THREW__ = 0;
    $63 = $62&1;
    if (!($63)) {
     $ele = $61;
     while(1) {
      $64 = $ele;
      $65 = ($64|0)!=(0|0);
      if (!($65)) {
       break;
      }
      $66 = $realDx;
      $67 = ((($66)) + 4|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $ele;
      __THREW__ = 0;
      invoke_vii(352,($68|0),($69|0));
      $70 = __THREW__; __THREW__ = 0;
      $71 = $70&1;
      if ($71) {
       break L5;
      }
      $72 = $ele;
      __THREW__ = 0;
      $73 = (invoke_iii(353,($72|0),(0|0))|0);
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if ($75) {
       break L5;
      }
      $ele = $73;
     }
     $80 = $error_info;
     $81 = ($80|0)!=(0);
     if ($81) {
      $3 = $agg$result;
      $4 = 9688;
      $82 = $3;
      $2 = $82;
      $83 = $2;
      $1 = $83;
      $84 = $1;
      $0 = $84;
      $85 = $4;
      $86 = $4;
      __THREW__ = 0;
      $87 = (invoke_ii(270,($86|0))|0);
      $88 = __THREW__; __THREW__ = 0;
      $89 = $88&1;
      if ($89) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(271,($82|0),($85|0),($87|0));
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       break;
      }
      $28 = 1;
      __ZN8tinyxml211XMLDocumentD2Ev($doc);
      STACKTOP = sp;return;
     } else {
      $8 = $agg$result;
      $9 = 9704;
      $92 = $8;
      $7 = $92;
      $93 = $7;
      $6 = $93;
      $94 = $6;
      $5 = $94;
      $95 = $9;
      $96 = $9;
      __THREW__ = 0;
      $97 = (invoke_ii(270,($96|0))|0);
      $98 = __THREW__; __THREW__ = 0;
      $99 = $98&1;
      if ($99) {
       break;
      }
      __THREW__ = 0;
      invoke_viii(271,($92|0),($95|0),($97|0));
      $100 = __THREW__; __THREW__ = 0;
      $101 = $100&1;
      if ($101) {
       break;
      }
      $28 = 1;
      __ZN8tinyxml211XMLDocumentD2Ev($doc);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $76 = ___cxa_find_matching_catch()|0;
 $77 = tempRet0;
 $26 = $76;
 $27 = $77;
 __ZN8tinyxml211XMLDocumentD2Ev($doc);
 $78 = $26;
 $79 = $27;
 ___resumeException($78|0);
 // unreachable;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 15|0;
 $2 = sp + 14|0;
 $5 = sp + 13|0;
 $6 = sp + 12|0;
 $0 = $this;
 __ZN10emscripten5enum_I11e_dx_type_tEC2EPKc($1,9717);
 $7 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($1,9728,0)|0);
 $8 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($7,9735,1)|0);
 $9 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($8,9741,2)|0);
 $10 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($9,9748,3)|0);
 $11 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($10,9758,4)|0);
 $12 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($11,9768,5)|0);
 $13 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($12,9778,6)|0);
 $14 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($13,9787,7)|0);
 $15 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($14,9797,8)|0);
 $16 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($15,9804,9)|0);
 $17 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($16,9811,10)|0);
 $18 = (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($17,9817,11)|0);
 (__ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($18,9825,12)|0);
 __ZN10emscripten11value_arrayI8Vector2dEC2EPKc($2,9833);
 __THREW__ = 0;
 $19 = (invoke_iii(356,($2|0),0)|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if (!($21)) {
  __THREW__ = 0;
  (invoke_iii(356,($19|0),4)|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   __ZN10emscripten11value_arrayI8Vector2dED2Ev($2);
   __ZN10emscripten11value_arrayI8Vector3dEC2EPKc($5,9842);
   __THREW__ = 0;
   $24 = (invoke_iii(357,($5|0),0)|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    __THREW__ = 0;
    $27 = (invoke_iii(357,($24|0),4)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     (invoke_iii(357,($27|0),8)|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      __ZN10emscripten11value_arrayI8Vector3dED2Ev($5);
      __ZN10emscripten11value_arrayI8Vector4dEC2EPKc($6,9851);
      __THREW__ = 0;
      $32 = (invoke_iii(358,($6|0),0)|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if (!($34)) {
       __THREW__ = 0;
       $35 = (invoke_iii(358,($32|0),4)|0);
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if (!($37)) {
        __THREW__ = 0;
        $38 = (invoke_iii(358,($35|0),8)|0);
        $39 = __THREW__; __THREW__ = 0;
        $40 = $39&1;
        if (!($40)) {
         __THREW__ = 0;
         (invoke_iii(358,($38|0),12)|0);
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if (!($42)) {
          __ZN10emscripten11value_arrayI8Vector4dED2Ev($6);
          __ZN10emscripten8functionIfJEJEEEvPKcPFT_DpT0_EDpT1_(9860,359);
          __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_(9871,360);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9885,361);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9900,362);
          __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(9918,363);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(9931,364);
          __ZN10emscripten8functionI11e_dx_type_tJiEJEEEvPKcPFT_DpT0_EDpT1_(9943,365);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(9955,366);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJ11e_dx_type_tiEJEEEvPKcPFT_DpT0_EDpT1_(9969,332);
          __ZN10emscripten8functionI11e_dx_type_tJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(9987,343);
          __ZN10emscripten8functionIiJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE11e_dx_type_tiEJEEEvPKcPFT_DpT0_EDpT1_(10005,367);
          __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_(10018,368);
          __ZN10emscripten8functionIbJidEJEEEvPKcPFT_DpT0_EDpT1_(10034,369);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(10051,370);
          __ZN10emscripten8functionIbJiddEJEEEvPKcPFT_DpT0_EDpT1_(10070,371);
          __ZN10emscripten8functionIbJidddEJEEEvPKcPFT_DpT0_EDpT1_(10091,372);
          __ZN10emscripten8functionIbJiddddEJEEEvPKcPFT_DpT0_EDpT1_(10112,373);
          __ZN10emscripten8functionIbJiiiEJEEEvPKcPFT_DpT0_EDpT1_(10133,374);
          __ZN10emscripten8functionIbJidiEJEEEvPKcPFT_DpT0_EDpT1_(10149,375);
          __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiEJEEEvPKcPFT_DpT0_EDpT1_(10166,376);
          __ZN10emscripten8functionIbJiddiEJEEEvPKcPFT_DpT0_EDpT1_(10185,377);
          __ZN10emscripten8functionIbJidddiEJEEEvPKcPFT_DpT0_EDpT1_(10206,378);
          __ZN10emscripten8functionIbJiddddiEJEEEvPKcPFT_DpT0_EDpT1_(10227,379);
          __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(10248,380);
          __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(10264,381);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(10281,382);
          __ZN10emscripten8functionI8Vector2dJiEJEEEvPKcPFT_DpT0_EDpT1_(10300,383);
          __ZN10emscripten8functionI8Vector3dJiEJEEEvPKcPFT_DpT0_EDpT1_(10321,384);
          __ZN10emscripten8functionI8Vector4dJiEJEEEvPKcPFT_DpT0_EDpT1_(10342,385);
          __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(10363,386);
          __ZN10emscripten8functionIdJiiEJEEEvPKcPFT_DpT0_EDpT1_(10384,387);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiiEJEEEvPKcPFT_DpT0_EDpT1_(10406,388);
          __ZN10emscripten8functionI8Vector2dJiiEJEEEvPKcPFT_DpT0_EDpT1_(10430,389);
          __ZN10emscripten8functionI8Vector3dJiiEJEEEvPKcPFT_DpT0_EDpT1_(10456,390);
          __ZN10emscripten8functionI8Vector4dJiiEJEEEvPKcPFT_DpT0_EDpT1_(10482,391);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_(10508,392);
          __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiS7_EJEEEvPKcPFT_DpT0_EDpT1_(10524,393);
          STACKTOP = sp;return;
         }
        }
       }
      }
      $47 = ___cxa_find_matching_catch()|0;
      $48 = tempRet0;
      $3 = $47;
      $4 = $48;
      __ZN10emscripten11value_arrayI8Vector4dED2Ev($6);
      $49 = $3;
      $50 = $4;
      ___resumeException($49|0);
      // unreachable;
     }
    }
   }
   $45 = ___cxa_find_matching_catch()|0;
   $46 = tempRet0;
   $3 = $45;
   $4 = $46;
   __ZN10emscripten11value_arrayI8Vector3dED2Ev($5);
   $49 = $3;
   $50 = $4;
   ___resumeException($49|0);
   // unreachable;
  }
 }
 $43 = ___cxa_find_matching_catch()|0;
 $44 = tempRet0;
 $3 = $43;
 $4 = $44;
 __ZN10emscripten11value_arrayI8Vector2dED2Ev($2);
 $49 = $3;
 $50 = $4;
 ___resumeException($49|0);
 // unreachable;
}
function __GLOBAL__sub_I_nxdat_mini_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init518();
 return;
}
function __ZN2dx16c_dx_node_mini_tC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 32|0;
 $6 = sp + 20|0;
 $10 = $this;
 $11 = $name;
 $12 = $10;
 $13 = 5940;
 HEAP32[$12>>2] = $13;
 $14 = ((($12)) + 8|0);
 $15 = $11;
 HEAP32[$14>>2] = $15;
 $16 = ((($12)) + 12|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($12)) + 16|0);
 $9 = $17;
 $18 = $9;
 $8 = $18;
 $19 = $8;
 $7 = $19;
 HEAP32[$19>>2] = 0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 8|0);
 $5 = $21;
 HEAP32[$6>>2] = 0;
 $22 = $5;
 $4 = $6;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $2 = $22;
 HEAP32[$3>>2] = $24;
 $25 = $2;
 $1 = $25;
 $0 = $3;
 $26 = $0;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 $28 = ((($12)) + 4|0);
 HEAP32[$28>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx16c_dx_node_mini_tD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5940;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx11c_dx_cell_tC2EPKc($2,$3);
 $4 = 5888;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 28|0);
 ;HEAP32[$5>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx11c_dx_cell_tC2EPKc($2,$3);
 $4 = 5836;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 32|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx11c_dx_cell_tC2EPKc($2,$3);
 $4 = 5784;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 32|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx11c_dx_cell_tC2EPKc($2,$3);
 $4 = 5732;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 32|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx11c_dx_cell_tC2EPKc($2,$3);
 $4 = 5680;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 32|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;HEAP32[$5+24>>2]=0|0;HEAP32[$5+28>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = $this;
 $8 = $name;
 $9 = $7;
 $10 = $8;
 __ZN2dx11c_dx_cell_tC2EPKc($9,$10);
 $11 = 5628;
 HEAP32[$9>>2] = $11;
 $12 = ((($9)) + 28|0);
 $6 = $12;
 $13 = $6;
 $5 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $3 = $15;
 $2 = $13;
 $16 = $2;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $__a$i$i = $18;
 $__i$i$i = 0;
 while(1) {
  $19 = $__i$i$i;
  $20 = ($19>>>0)<(3);
  if (!($20)) {
   break;
  }
  $21 = $__i$i$i;
  $22 = $__a$i$i;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $__i$i$i;
  $25 = (($24) + 1)|0;
  $__i$i$i = $25;
 }
 STACKTOP = sp;return;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i = 0, $__i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = $this;
 $8 = $name;
 $9 = $7;
 $10 = $8;
 __ZN2dx11c_dx_cell_tC2EPKc($9,$10);
 $11 = 5576;
 HEAP32[$9>>2] = $11;
 $12 = ((($9)) + 28|0);
 $6 = $12;
 $13 = $6;
 $5 = $13;
 $14 = $5;
 $4 = $14;
 $15 = $4;
 $3 = $15;
 $2 = $13;
 $16 = $2;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $18 = $0;
 $__a$i$i = $18;
 $__i$i$i = 0;
 while(1) {
  $19 = $__i$i$i;
  $20 = ($19>>>0)<(3);
  if (!($20)) {
   break;
  }
  $21 = $__i$i$i;
  $22 = $__a$i$i;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $__i$i$i;
  $25 = (($24) + 1)|0;
  $__i$i$i = $25;
 }
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EEC2EPKci($this,$name,$len) {
 $this = $this|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 44|0;
 $6 = sp + 32|0;
 $10 = $this;
 $11 = $name;
 $12 = $len;
 $15 = $10;
 $16 = $11;
 __ZN2dx11c_dx_cell_tC2EPKc($15,$16);
 $17 = 5524;
 HEAP32[$15>>2] = $17;
 $18 = ((($15)) + 28|0);
 $9 = $18;
 $19 = $9;
 $8 = $19;
 $20 = $8;
 $7 = $20;
 HEAP32[$20>>2] = 0;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($20)) + 8|0);
 $5 = $22;
 HEAP32[$6>>2] = 0;
 $23 = $5;
 $4 = $6;
 $24 = $4;
 $25 = HEAP32[$24>>2]|0;
 $2 = $23;
 HEAP32[$3>>2] = $25;
 $26 = $2;
 $1 = $26;
 $0 = $3;
 $27 = $0;
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($15)) + 28|0);
 $30 = $12;
 __THREW__ = 0;
 invoke_vii(394,($29|0),($30|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $13 = $33;
  $14 = $34;
  __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($18);
  __ZN2dx11c_dx_cell_tD2Ev($15);
  $35 = $13;
  $36 = $14;
  ___resumeException($35|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EEC2EPKci($this,$name,$len) {
 $this = $this|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 44|0;
 $6 = sp + 32|0;
 $10 = $this;
 $11 = $name;
 $12 = $len;
 $15 = $10;
 $16 = $11;
 __ZN2dx11c_dx_cell_tC2EPKc($15,$16);
 $17 = 5472;
 HEAP32[$15>>2] = $17;
 $18 = ((($15)) + 28|0);
 $9 = $18;
 $19 = $9;
 $8 = $19;
 $20 = $8;
 $7 = $20;
 HEAP32[$20>>2] = 0;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($20)) + 8|0);
 $5 = $22;
 HEAP32[$6>>2] = 0;
 $23 = $5;
 $4 = $6;
 $24 = $4;
 $25 = HEAP32[$24>>2]|0;
 $2 = $23;
 HEAP32[$3>>2] = $25;
 $26 = $2;
 $1 = $26;
 $0 = $3;
 $27 = $0;
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($15)) + 28|0);
 $30 = $12;
 __THREW__ = 0;
 invoke_vii(395,($29|0),($30|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $13 = $33;
  $14 = $34;
  __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($18);
  __ZN2dx11c_dx_cell_tD2Ev($15);
  $35 = $13;
  $36 = $14;
  ___resumeException($35|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EEC2EPKci($this,$name,$len) {
 $this = $this|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 44|0;
 $6 = sp + 32|0;
 $10 = $this;
 $11 = $name;
 $12 = $len;
 $15 = $10;
 $16 = $11;
 __ZN2dx11c_dx_cell_tC2EPKc($15,$16);
 $17 = 5420;
 HEAP32[$15>>2] = $17;
 $18 = ((($15)) + 28|0);
 $9 = $18;
 $19 = $9;
 $8 = $19;
 $20 = $8;
 $7 = $20;
 HEAP32[$20>>2] = 0;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($20)) + 8|0);
 $5 = $22;
 HEAP32[$6>>2] = 0;
 $23 = $5;
 $4 = $6;
 $24 = $4;
 $25 = HEAP32[$24>>2]|0;
 $2 = $23;
 HEAP32[$3>>2] = $25;
 $26 = $2;
 $1 = $26;
 $0 = $3;
 $27 = $0;
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($15)) + 28|0);
 $30 = $12;
 __THREW__ = 0;
 invoke_vii(396,($29|0),($30|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $13 = $33;
  $14 = $34;
  __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEED2Ev($18);
  __ZN2dx11c_dx_cell_tD2Ev($15);
  $35 = $13;
  $36 = $14;
  ___resumeException($35|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EEC2EPKci($this,$name,$len) {
 $this = $this|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 44|0;
 $6 = sp + 32|0;
 $10 = $this;
 $11 = $name;
 $12 = $len;
 $15 = $10;
 $16 = $11;
 __ZN2dx11c_dx_cell_tC2EPKc($15,$16);
 $17 = 5368;
 HEAP32[$15>>2] = $17;
 $18 = ((($15)) + 28|0);
 $9 = $18;
 $19 = $9;
 $8 = $19;
 $20 = $8;
 $7 = $20;
 HEAP32[$20>>2] = 0;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($20)) + 8|0);
 $5 = $22;
 HEAP32[$6>>2] = 0;
 $23 = $5;
 $4 = $6;
 $24 = $4;
 $25 = HEAP32[$24>>2]|0;
 $2 = $23;
 HEAP32[$3>>2] = $25;
 $26 = $2;
 $1 = $26;
 $0 = $3;
 $27 = $0;
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($15)) + 28|0);
 $30 = $12;
 __THREW__ = 0;
 invoke_vii(397,($29|0),($30|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $13 = $33;
  $14 = $34;
  __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEED2Ev($18);
  __ZN2dx11c_dx_cell_tD2Ev($15);
  $35 = $13;
  $36 = $14;
  ___resumeException($35|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EEC2EPKci($this,$name,$len) {
 $this = $this|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 44|0;
 $6 = sp + 32|0;
 $10 = $this;
 $11 = $name;
 $12 = $len;
 $15 = $10;
 $16 = $11;
 __ZN2dx11c_dx_cell_tC2EPKc($15,$16);
 $17 = 5316;
 HEAP32[$15>>2] = $17;
 $18 = ((($15)) + 28|0);
 $9 = $18;
 $19 = $9;
 $8 = $19;
 $20 = $8;
 $7 = $20;
 HEAP32[$20>>2] = 0;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($20)) + 8|0);
 $5 = $22;
 HEAP32[$6>>2] = 0;
 $23 = $5;
 $4 = $6;
 $24 = $4;
 $25 = HEAP32[$24>>2]|0;
 $2 = $23;
 HEAP32[$3>>2] = $25;
 $26 = $2;
 $1 = $26;
 $0 = $3;
 $27 = $0;
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($15)) + 28|0);
 $30 = $12;
 __THREW__ = 0;
 invoke_vii(398,($29|0),($30|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  $13 = $33;
  $14 = $34;
  __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEED2Ev($18);
  __ZN2dx11c_dx_cell_tD2Ev($15);
  $35 = $13;
  $36 = $14;
  ___resumeException($35|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EEC2EPKci($this,$name,$len) {
 $this = $this|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 88|0;
 $6 = sp + 76|0;
 $13 = sp + 48|0;
 $16 = sp + 36|0;
 $25 = sp;
 $20 = $this;
 $21 = $name;
 $22 = $len;
 $26 = $20;
 $27 = $21;
 __ZN2dx11c_dx_cell_tC2EPKc($26,$27);
 $28 = 5264;
 HEAP32[$26>>2] = $28;
 $29 = ((($26)) + 28|0);
 $19 = $29;
 $30 = $19;
 $18 = $30;
 $31 = $18;
 $17 = $31;
 HEAP32[$31>>2] = 0;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($31)) + 8|0);
 $15 = $33;
 HEAP32[$16>>2] = 0;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 $12 = $34;
 HEAP32[$13>>2] = $36;
 $37 = $12;
 $11 = $37;
 $10 = $13;
 $38 = $10;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$37>>2] = $39;
 $40 = ((($26)) + 40|0);
 $9 = $40;
 $41 = $9;
 $8 = $41;
 $42 = $8;
 $7 = $42;
 HEAP32[$42>>2] = 0;
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($42)) + 8|0);
 $5 = $44;
 HEAP32[$6>>2] = 0;
 $45 = $5;
 $4 = $6;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $2 = $45;
 HEAP32[$3>>2] = $47;
 $48 = $2;
 $1 = $48;
 $0 = $3;
 $49 = $0;
 $50 = HEAP32[$49>>2]|0;
 HEAP32[$48>>2] = $50;
 $51 = ((($26)) + 28|0);
 $52 = $22;
 __THREW__ = 0;
 invoke_vii(399,($51|0),($52|0));
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if (!($54)) {
  $55 = ((($26)) + 40|0);
  $56 = $22;
  HEAP32[$25>>2] = 0;
  __THREW__ = 0;
  invoke_viii(400,($55|0),($56|0),($25|0));
  $57 = __THREW__; __THREW__ = 0;
  $58 = $57&1;
  if (!($58)) {
   STACKTOP = sp;return;
  }
 }
 $59 = ___cxa_find_matching_catch()|0;
 $60 = tempRet0;
 $23 = $59;
 $24 = $60;
 __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEED2Ev($40);
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($29);
 __ZN2dx11c_dx_cell_tD2Ev($26);
 $61 = $23;
 $62 = $24;
 ___resumeException($61|0);
 // unreachable;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EEC2EPKci($this,$name,$len) {
 $this = $this|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 88|0;
 $6 = sp + 76|0;
 $13 = sp + 48|0;
 $16 = sp + 36|0;
 $25 = sp;
 $20 = $this;
 $21 = $name;
 $22 = $len;
 $26 = $20;
 $27 = $21;
 __ZN2dx11c_dx_cell_tC2EPKc($26,$27);
 $28 = 5160;
 HEAP32[$26>>2] = $28;
 $29 = ((($26)) + 28|0);
 $19 = $29;
 $30 = $19;
 $18 = $30;
 $31 = $18;
 $17 = $31;
 HEAP32[$31>>2] = 0;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($31)) + 8|0);
 $15 = $33;
 HEAP32[$16>>2] = 0;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 $12 = $34;
 HEAP32[$13>>2] = $36;
 $37 = $12;
 $11 = $37;
 $10 = $13;
 $38 = $10;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$37>>2] = $39;
 $40 = ((($26)) + 40|0);
 $9 = $40;
 $41 = $9;
 $8 = $41;
 $42 = $8;
 $7 = $42;
 HEAP32[$42>>2] = 0;
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($42)) + 8|0);
 $5 = $44;
 HEAP32[$6>>2] = 0;
 $45 = $5;
 $4 = $6;
 $46 = $4;
 $47 = HEAP32[$46>>2]|0;
 $2 = $45;
 HEAP32[$3>>2] = $47;
 $48 = $2;
 $1 = $48;
 $0 = $3;
 $49 = $0;
 $50 = HEAP32[$49>>2]|0;
 HEAP32[$48>>2] = $50;
 $51 = ((($26)) + 28|0);
 $52 = $22;
 __THREW__ = 0;
 invoke_vii(401,($51|0),($52|0));
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if (!($54)) {
  $55 = ((($26)) + 40|0);
  $56 = $22;
  HEAP32[$25>>2] = 0;
  __THREW__ = 0;
  invoke_viii(402,($55|0),($56|0),($25|0));
  $57 = __THREW__; __THREW__ = 0;
  $58 = $57&1;
  if (!($58)) {
   STACKTOP = sp;return;
  }
 }
 $59 = ___cxa_find_matching_catch()|0;
 $60 = tempRet0;
 $23 = $59;
 $24 = $60;
 __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEED2Ev($40);
 __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEED2Ev($29);
 __ZN2dx11c_dx_cell_tD2Ev($26);
 $61 = $23;
 $62 = $24;
 ___resumeException($61|0);
 // unreachable;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t8EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx12c_dx_xnode_tC2EPKc($2,$3);
 $4 = 5108;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t9EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx12c_dx_xnode_tC2EPKc($2,$3);
 $4 = 5056;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t10EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx12c_dx_xnode_tC2EPKc($2,$3);
 $4 = 5004;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t11EEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx12c_dx_xnode_tC2EPKc($2,$3);
 $4 = 4952;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPN2dx16c_dx_node_mini_tERNS_9allocatorIS3_EEEC2EjjS6_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 4|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(403,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIPN2dx16c_dx_node_mini_tERNS_9allocatorIS3_EEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIPN2dx16c_dx_node_mini_tERNS_9allocatorIS3_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN2dx16c_dx_node_mini_t4nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN2dx25c_dx_node_iterator_mini_tC2EPNS_12c_dx_xnode_tE($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $7 = ((($5)) + 4|0);
 $8 = $6 ? 0 : $7;
 HEAP32[$2>>2] = $8;
 __ZN2dx25c_dx_node_iterator_mini_t6rewindEv($2);
 STACKTOP = sp;return;
}
function __ZN2dx25c_dx_node_iterator_mini_t4nextEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 511]($7)|0);
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)<=($13|0);
 if ($14) {
  $15 = ((($2)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iii[$19 & 511]($16,$21)|0);
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __ZN2dx25c_dx_node_iterator_mini_t6rewindEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = -1;
 STACKTOP = sp;return;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE10put_stringEPKc($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $str;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 $6 = $3;
 $0 = $5;
 $1 = $6;
 $7 = $0;
 $8 = $1;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($7,$8)|0);
 STACKTOP = sp;return;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE10put_stringEPKci($this,$str,$ix) {
 $this = $this|0;
 $str = $str|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = $this;
 $24 = $str;
 $25 = $ix;
 $26 = $23;
 $27 = ((($26)) + 28|0);
 $28 = $25;
 $21 = $27;
 $22 = $28;
 $29 = $21;
 $30 = $22;
 $31 = HEAP32[$29>>2]|0;
 $32 = (($31) + (($30*12)|0)|0);
 $33 = $24;
 $0 = $32;
 $1 = $33;
 $34 = $0;
 $35 = $1;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($34,$35)|0);
 $36 = ((($26)) + 28|0);
 $37 = $25;
 $2 = $36;
 $3 = $37;
 $38 = $2;
 $39 = $3;
 $40 = HEAP32[$38>>2]|0;
 $41 = (($40) + (($39*12)|0)|0);
 $18 = $41;
 $42 = $18;
 $17 = $42;
 $43 = $17;
 $16 = $43;
 $44 = $16;
 $15 = $44;
 $45 = $15;
 $14 = $45;
 $46 = $14;
 $13 = $46;
 $47 = $13;
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $49 & 1;
 $51 = ($50|0)!=(0);
 if ($51) {
  $7 = $44;
  $52 = $7;
  $6 = $52;
  $53 = $6;
  $5 = $53;
  $54 = $5;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $63 = $56;
  $4 = $63;
  $64 = $4;
  $65 = ((($26)) + 40|0);
  $66 = $25;
  $19 = $65;
  $20 = $66;
  $67 = $19;
  $68 = $20;
  $69 = HEAP32[$67>>2]|0;
  $70 = (($69) + ($68<<2)|0);
  HEAP32[$70>>2] = $64;
  STACKTOP = sp;return;
 } else {
  $12 = $44;
  $57 = $12;
  $11 = $57;
  $58 = $11;
  $10 = $58;
  $59 = $10;
  $60 = ((($59)) + 1|0);
  $9 = $60;
  $61 = $9;
  $8 = $61;
  $62 = $8;
  $63 = $62;
  $4 = $63;
  $64 = $4;
  $65 = ((($26)) + 40|0);
  $66 = $25;
  $19 = $65;
  $20 = $66;
  $67 = $19;
  $68 = $20;
  $69 = HEAP32[$67>>2]|0;
  $70 = (($69) + ($68<<2)|0);
  HEAP32[$70>>2] = $64;
  STACKTOP = sp;return;
 }
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE10put_stringEPKw($this,$str) {
 $this = $this|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $str;
 $4 = $2;
 $5 = ((($4)) + 28|0);
 $6 = $3;
 $0 = $5;
 $1 = $6;
 $7 = $0;
 $8 = $1;
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($7,$8)|0);
 STACKTOP = sp;return;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE10put_stringEPKwi($this,$str,$ix) {
 $this = $this|0;
 $str = $str|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $23 = $this;
 $24 = $str;
 $25 = $ix;
 $26 = $23;
 $27 = ((($26)) + 28|0);
 $28 = $25;
 $21 = $27;
 $22 = $28;
 $29 = $21;
 $30 = $22;
 $31 = HEAP32[$29>>2]|0;
 $32 = (($31) + (($30*12)|0)|0);
 $33 = $24;
 $0 = $32;
 $1 = $33;
 $34 = $0;
 $35 = $1;
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($34,$35)|0);
 $36 = ((($26)) + 28|0);
 $37 = $25;
 $2 = $36;
 $3 = $37;
 $38 = $2;
 $39 = $3;
 $40 = HEAP32[$38>>2]|0;
 $41 = (($40) + (($39*12)|0)|0);
 $18 = $41;
 $42 = $18;
 $17 = $42;
 $43 = $17;
 $16 = $43;
 $44 = $16;
 $15 = $44;
 $45 = $15;
 $14 = $45;
 $46 = $14;
 $13 = $46;
 $47 = $13;
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $49 & 1;
 $51 = ($50|0)!=(0);
 if ($51) {
  $7 = $44;
  $52 = $7;
  $6 = $52;
  $53 = $6;
  $5 = $53;
  $54 = $5;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $63 = $56;
  $4 = $63;
  $64 = $4;
  $65 = ((($26)) + 40|0);
  $66 = $25;
  $19 = $65;
  $20 = $66;
  $67 = $19;
  $68 = $20;
  $69 = HEAP32[$67>>2]|0;
  $70 = (($69) + ($68<<2)|0);
  HEAP32[$70>>2] = $64;
  STACKTOP = sp;return;
 } else {
  $12 = $44;
  $57 = $12;
  $11 = $57;
  $58 = $11;
  $10 = $58;
  $59 = $10;
  $60 = ((($59)) + 4|0);
  $9 = $60;
  $61 = $9;
  $8 = $61;
  $62 = $8;
  $63 = $62;
  $4 = $63;
  $64 = $4;
  $65 = ((($26)) + 40|0);
  $66 = $25;
  $19 = $65;
  $20 = $66;
  $67 = $19;
  $68 = $20;
  $69 = HEAP32[$67>>2]|0;
  $70 = (($69) + ($68<<2)|0);
  HEAP32[$70>>2] = $64;
  STACKTOP = sp;return;
 }
}
function __ZN8tinyxml27XMLNode12LinkEndChildEPS0_($this,$addThis) {
 $this = $this|0;
 $addThis = $addThis|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addThis;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN8tinyxml27XMLNode14InsertEndChildEPS0_($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml210XMLElement12SetAttributeEPKci($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc($3,$4)|0);
 $a = $5;
 $6 = $a;
 $7 = $2;
 __ZN8tinyxml212XMLAttribute12SetAttributeEi($6,$7);
 STACKTOP = sp;return;
}
function __ZN8tinyxml210XMLElement12SetAttributeEPKcd($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc($3,$4)|0);
 $a = $5;
 $6 = $a;
 $7 = $2;
 __ZN8tinyxml212XMLAttribute12SetAttributeEd($6,$7);
 STACKTOP = sp;return;
}
function __ZNK8tinyxml210XMLPrinter4CStrEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 208|0);
 $3 = (__ZNK8tinyxml28DynArrayIcLi20EE3MemEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__118__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_($__first1,$__last1,$__first2,$__last2,$__pred) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__first1;
 $2 = $__last1;
 $3 = $__first2;
 $4 = $__last2;
 $5 = $__pred;
 L1: while(1) {
  $6 = $1;
  $7 = $2;
  $8 = ($6|0)!=($7|0);
  if (!($8)) {
   label = 9;
   break;
  }
  $9 = $3;
  $__j = $9;
  while(1) {
   $10 = $__j;
   $11 = $4;
   $12 = ($10|0)!=($11|0);
   if (!($12)) {
    break;
   }
   $13 = $5;
   $14 = $1;
   $15 = HEAP8[$14>>0]|0;
   $16 = $__j;
   $17 = HEAP8[$16>>0]|0;
   $18 = (FUNCTION_TABLE_iii[$13 & 511]($15,$17)|0);
   if ($18) {
    label = 6;
    break L1;
   }
   $20 = $__j;
   $21 = ((($20)) + 1|0);
   $__j = $21;
  }
  $22 = $1;
  $23 = ((($22)) + 1|0);
  $1 = $23;
 }
 if ((label|0) == 6) {
  $19 = $1;
  $0 = $19;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 9) {
  $24 = $2;
  $0 = $24;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml210XMLElement12IntAttributeEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 HEAP32[$i>>2] = 0;
 $3 = $1;
 (__ZNK8tinyxml210XMLElement17QueryIntAttributeEPKcPi($2,$3,$i)|0);
 $4 = HEAP32[$i>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNK8tinyxml210XMLElement15DoubleAttributeEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $d = sp;
 $0 = $this;
 $1 = $name;
 $2 = $0;
 HEAPF64[$d>>3] = 0.0;
 $3 = $1;
 (__ZNK8tinyxml210XMLElement20QueryDoubleAttributeEPKcPd($2,$3,$d)|0);
 $4 = +HEAPF64[$d>>3];
 STACKTOP = sp;return (+$4);
}
function __ZN8tinyxml27XMLNode17FirstChildElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode17FirstChildElementEPKc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml27XMLNode18NextSiblingElementEPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK8tinyxml27XMLNode18NextSiblingElementEPKc($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN8tinyxml211XMLDocument11RootElementEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN8tinyxml27XMLNode17FirstChildElementEPKc($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten5enum_I11e_dx_type_tEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = (__ZN10emscripten8internal6TypeIDI11e_dx_type_tE3getEv()|0);
 $3 = $1;
 __embind_register_enum(($2|0),($3|0),4,0);
 STACKTOP = sp;return;
}
function __ZN10emscripten5enum_I11e_dx_type_tE5valueEPKcS1_($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $value;
 $3 = $0;
 $4 = (__ZN10emscripten8internal6TypeIDI11e_dx_type_tE3getEv()|0);
 $5 = $1;
 $6 = $2;
 __embind_register_enum_value(($4|0),($5|0),($6|0));
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten11value_arrayI8Vector2dEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $constructor = 0, $destructor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $name;
 $6 = $2;
 __ZN10emscripten8internal11noncopyableC2Ev($6);
 $constructor = 404;
 $destructor = 405;
 __THREW__ = 0;
 $7 = (invoke_i(406)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $3;
  $11 = $constructor;
  $1 = $11;
  $12 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
  $13 = $constructor;
  $14 = $destructor;
  $0 = $14;
  $15 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
  $16 = $destructor;
  __THREW__ = 0;
  invoke_viiiiii(407,($7|0),($10|0),($12|0),($13|0),($15|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $4 = $19;
 $5 = $20;
 __ZN10emscripten8internal11noncopyableD2Ev($6);
 $21 = $4;
 $22 = $5;
 ___resumeException($21|0);
 // unreachable;
}
function __ZN10emscripten11value_arrayI8Vector2dE7elementIS1_fEERS2_MT_T0_($this,$field) {
 $this = $this|0;
 $field = $field|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $getter = 0, $setter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $2 = $this;
 HEAP32[$3>>2] = $field;
 $4 = $2;
 $getter = 408;
 $setter = 409;
 $5 = (__ZN10emscripten8internal6TypeIDI8Vector2dE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $7 = $getter;
 $1 = $7;
 $8 = (__ZN10emscripten8internal19getGenericSignatureIJfiiEEEPKcv()|0);
 $9 = $getter;
 $10 = (__ZN10emscripten8internal10getContextIM8Vector2dfEEPT_RKS4_($3)|0);
 $11 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $12 = $setter;
 $0 = $12;
 $13 = (__ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv()|0);
 $14 = $setter;
 $15 = (__ZN10emscripten8internal10getContextIM8Vector2dfEEPT_RKS4_($3)|0);
 __embind_register_value_array_element(($5|0),($6|0),($8|0),($9|0),($10|0),($11|0),($13|0),($14|0),($15|0));
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten11value_arrayI8Vector2dED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 $4 = (invoke_i(406)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_vi(410,($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __ZN10emscripten8internal11noncopyableD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 $1 = $9;
 $2 = $10;
 __ZN10emscripten8internal11noncopyableD2Ev($3);
 $11 = $1;
 ___clang_call_terminate($11);
 // unreachable;
}
function __ZN10emscripten11value_arrayI8Vector3dEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $constructor = 0, $destructor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $name;
 $6 = $2;
 __ZN10emscripten8internal11noncopyableC2Ev($6);
 $constructor = 411;
 $destructor = 412;
 __THREW__ = 0;
 $7 = (invoke_i(413)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $3;
  $11 = $constructor;
  $1 = $11;
  $12 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
  $13 = $constructor;
  $14 = $destructor;
  $0 = $14;
  $15 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
  $16 = $destructor;
  __THREW__ = 0;
  invoke_viiiiii(407,($7|0),($10|0),($12|0),($13|0),($15|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $4 = $19;
 $5 = $20;
 __ZN10emscripten8internal11noncopyableD2Ev($6);
 $21 = $4;
 $22 = $5;
 ___resumeException($21|0);
 // unreachable;
}
function __ZN10emscripten11value_arrayI8Vector3dE7elementIS1_fEERS2_MT_T0_($this,$field) {
 $this = $this|0;
 $field = $field|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $getter = 0, $setter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $2 = $this;
 HEAP32[$3>>2] = $field;
 $4 = $2;
 $getter = 414;
 $setter = 415;
 $5 = (__ZN10emscripten8internal6TypeIDI8Vector3dE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $7 = $getter;
 $1 = $7;
 $8 = (__ZN10emscripten8internal19getGenericSignatureIJfiiEEEPKcv()|0);
 $9 = $getter;
 $10 = (__ZN10emscripten8internal10getContextIM8Vector3dfEEPT_RKS4_($3)|0);
 $11 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $12 = $setter;
 $0 = $12;
 $13 = (__ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv()|0);
 $14 = $setter;
 $15 = (__ZN10emscripten8internal10getContextIM8Vector3dfEEPT_RKS4_($3)|0);
 __embind_register_value_array_element(($5|0),($6|0),($8|0),($9|0),($10|0),($11|0),($13|0),($14|0),($15|0));
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten11value_arrayI8Vector3dED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 $4 = (invoke_i(413)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_vi(410,($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __ZN10emscripten8internal11noncopyableD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 $1 = $9;
 $2 = $10;
 __ZN10emscripten8internal11noncopyableD2Ev($3);
 $11 = $1;
 ___clang_call_terminate($11);
 // unreachable;
}
function __ZN10emscripten11value_arrayI8Vector4dEC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $constructor = 0, $destructor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $name;
 $6 = $2;
 __ZN10emscripten8internal11noncopyableC2Ev($6);
 $constructor = 416;
 $destructor = 417;
 __THREW__ = 0;
 $7 = (invoke_i(418)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $3;
  $11 = $constructor;
  $1 = $11;
  $12 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
  $13 = $constructor;
  $14 = $destructor;
  $0 = $14;
  $15 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
  $16 = $destructor;
  __THREW__ = 0;
  invoke_viiiiii(407,($7|0),($10|0),($12|0),($13|0),($15|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if (!($18)) {
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $4 = $19;
 $5 = $20;
 __ZN10emscripten8internal11noncopyableD2Ev($6);
 $21 = $4;
 $22 = $5;
 ___resumeException($21|0);
 // unreachable;
}
function __ZN10emscripten11value_arrayI8Vector4dE7elementIS1_fEERS2_MT_T0_($this,$field) {
 $this = $this|0;
 $field = $field|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $getter = 0, $setter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $2 = $this;
 HEAP32[$3>>2] = $field;
 $4 = $2;
 $getter = 419;
 $setter = 420;
 $5 = (__ZN10emscripten8internal6TypeIDI8Vector4dE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $7 = $getter;
 $1 = $7;
 $8 = (__ZN10emscripten8internal19getGenericSignatureIJfiiEEEPKcv()|0);
 $9 = $getter;
 $10 = (__ZN10emscripten8internal10getContextIM8Vector4dfEEPT_RKS4_($3)|0);
 $11 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $12 = $setter;
 $0 = $12;
 $13 = (__ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv()|0);
 $14 = $setter;
 $15 = (__ZN10emscripten8internal10getContextIM8Vector4dfEEPT_RKS4_($3)|0);
 __embind_register_value_array_element(($5|0),($6|0),($8|0),($9|0),($10|0),($11|0),($13|0),($14|0),($15|0));
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten11value_arrayI8Vector4dED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 $4 = (invoke_i(418)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_vi(410,($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   __ZN10emscripten8internal11noncopyableD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 $1 = $9;
 $2 = $10;
 __ZN10emscripten8internal11noncopyableD2Ev($3);
 $11 = $1;
 ___clang_call_terminate($11);
 // unreachable;
}
function __ZN10emscripten8functionIfJEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 421;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJfEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJfEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJfiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 422;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 423;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 424;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 425;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionI11e_dx_type_tJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 426;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ11e_dx_type_tiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ11e_dx_type_tiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJ11e_dx_type_tiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 427;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE11e_dx_type_tiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE11e_dx_type_tiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionI11e_dx_type_tJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 428;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ11e_dx_type_tNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ11e_dx_type_tNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIiJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE11e_dx_type_tiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 429;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE11e_dx_type_tiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE11e_dx_type_tiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 430;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJidEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 431;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 432;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiddEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 433;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiddEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJidddEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 434;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiidddEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiddddEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 435;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiddddEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 436;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJidiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 437;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiidiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 438;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiddiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 439;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiddiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJidddiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 440;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiidddiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIbJiddddiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 441;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiddddiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 442;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionI8Vector2dJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 443;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector2diEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector2diEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionI8Vector3dJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 444;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector3diEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector3diEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionI8Vector4dJiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 445;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector4diEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector4diEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIdJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 446;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJdiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 447;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionI8Vector2dJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 448;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector2diiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector2diiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionI8Vector3dJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 449;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector3diiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector3diiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionI8Vector4dJiiEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 450;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector4diiEE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector4diiEE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJiS7_EJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 16|0;
 $1 = $name;
 $2 = $fn;
 $invoker = 451;
 $3 = $1;
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiSA_EE8getCountEv($args)|0);
 $5 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiSA_EE8getTypesEv($args)|0);
 $6 = $invoker;
 $0 = $6;
 $7 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $8 = $invoker;
 $9 = $2;
 __embind_register_function(($3|0),($4|0),($5|0),($7|0),($8|0),($9|0));
 STACKTOP = sp;return;
}
function __ZN2dx16c_dx_node_mini_t7get_tagEi($this,$ix) {
 $this = $this|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $ix;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = $3;
 $0 = $5;
 $1 = $6;
 $7 = $0;
 $8 = $1;
 $9 = HEAP32[$7>>2]|0;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx16c_dx_node_mini_t13get_tag_countEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 4)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx16c_dx_node_mini_t7add_tagEPKc($this,$tag) {
 $this = $this|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 97|0;
 $__annotator$i = sp + 96|0;
 $24 = sp + 4|0;
 $23 = $this;
 HEAP32[$24>>2] = $tag;
 $25 = $23;
 $26 = ((($25)) + 16|0);
 $21 = $26;
 $22 = $24;
 $27 = $21;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $20 = $27;
 $30 = $20;
 $31 = ((($30)) + 8|0);
 $19 = $31;
 $32 = $19;
 $18 = $32;
 $33 = $18;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($29|0)!=($34|0);
 if ($35) {
  __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$27,1);
  $17 = $27;
  $36 = $17;
  $37 = ((($36)) + 8|0);
  $16 = $37;
  $38 = $16;
  $15 = $38;
  $39 = $15;
  $40 = ((($27)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $14 = $41;
  $42 = $14;
  $43 = $22;
  $10 = $39;
  $11 = $42;
  $12 = $43;
  $44 = $10;
  $45 = $11;
  $46 = $12;
  $9 = $46;
  $47 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $44;
  $6 = $45;
  $7 = $47;
  $48 = $5;
  $49 = $6;
  $50 = $7;
  $4 = $50;
  $51 = $4;
  $1 = $48;
  $2 = $49;
  $3 = $51;
  $52 = $2;
  $53 = $3;
  $0 = $53;
  $54 = $0;
  $55 = HEAP32[$54>>2]|0;
  HEAP32[$52>>2] = $55;
  __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $56 = ((($27)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 4|0);
  HEAP32[$56>>2] = $58;
  STACKTOP = sp;return;
 } else {
  $59 = $22;
  __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($27,$59);
  STACKTOP = sp;return;
 }
}
function __ZN2dx16c_dx_node_mini_t8get_metaEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN2dx16c_dx_node_mini_t8put_metaEPK12dx_node_meta($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 12|0);
 HEAP32[$4>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_object_mini_t19fn_dx_object_createEPKcS2_11e_dx_type_ti($uri,$name,$type,$length) {
 $uri = $uri|0;
 $name = $name|0;
 $type = $type|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dx = 0, $iid = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uri;
 $1 = $name;
 $2 = $type;
 $3 = $length;
 $6 = $0;
 $7 = (__Z4nxidPKc($6)|0);
 $iid = $7;
 $8 = (__Znwj(12)|0);
 __THREW__ = 0;
 invoke_vi(452,($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $4 = $16;
  $5 = $17;
  __ZdlPv($8);
  $18 = $4;
  $19 = $5;
  ___resumeException($18|0);
  // unreachable;
 } else {
  $dx = $8;
  $11 = $dx;
  $12 = $1;
  $13 = $2;
  $14 = $3;
  __ZN2dx18c_dx_object_mini_t18create_inline_nodeEPKc11e_dx_type_ti($11,$12,$13,$14);
  $15 = $dx;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZN2dx18c_dx_object_mini_t20fn_dx_object_create2EPKcPK12dx_node_metai($uri,$meta,$length) {
 $uri = $uri|0;
 $meta = $meta|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $uri;
 $1 = $meta;
 $2 = $length;
 $5 = (__Znwj(12)|0);
 __THREW__ = 0;
 invoke_vi(452,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $3 = $12;
  $4 = $13;
  __ZdlPv($5);
  $14 = $3;
  $15 = $4;
  ___resumeException($14|0);
  // unreachable;
 } else {
  $dx = $5;
  $8 = $dx;
  $9 = $1;
  $10 = $2;
  __ZN2dx18c_dx_object_mini_t19create_inline_node2EPK12dx_node_metai($8,$9,$10);
  $11 = $dx;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN2dx18c_dx_object_mini_t18fn_dx_object_usingEP9dx_object($dx) {
 $dx = $dx|0;
 var $0 = 0, $1 = 0, $2 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dx;
 $1 = $0;
 $impl = $1;
 $2 = $impl;
 __ZN2dx18c_dx_object_mini_t5uxingEv($2);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_object_mini_t20fn_dx_object_releaseEP9dx_object($dx) {
 $dx = $dx|0;
 var $0 = 0, $1 = 0, $2 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dx;
 $1 = $0;
 $impl = $1;
 $2 = $impl;
 __ZN2dx18c_dx_object_mini_t7releaseEv($2);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_object_mini_t7releaseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = ($1|0)==(0|0);
 $or$cond = $7 | $8;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 __ZN2dx18c_dx_object_mini_tD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_object_mini_tD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $impl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 $8 = ((($6)) + -4|0);
 $9 = $7 ? 0 : $8;
 $impl = $9;
 $10 = $impl;
 $11 = ($10|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$10>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vi[$14 & 511]($10);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_object_mini_t5uxingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_object_mini_tC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 1;
 HEAP32[$1>>2] = 4448;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_object_mini_t19create_inline_node2EPK12dx_node_metai($this,$meta,$length) {
 $this = $this|0;
 $meta = $meta|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $meta;
 $2 = $length;
 $3 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = $1;
 $11 = (__ZN2dx16create_node_implEPKc11e_dx_type_tiPK12dx_node_meta($5,$8,$9,$10)|0);
 $12 = ($11|0)==(0|0);
 $13 = ((($11)) + 4|0);
 $14 = $12 ? 0 : $13;
 $15 = ((($3)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($3)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$17>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_object_mini_t18create_inline_nodeEPKc11e_dx_type_ti($this,$name,$type,$length) {
 $this = $this|0;
 $name = $name|0;
 $type = $type|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $type;
 $3 = $length;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (__ZN2dx16create_node_implEPKc11e_dx_type_tiPK12dx_node_meta($5,$6,$7,0)|0);
 $9 = ($8|0)==(0|0);
 $10 = ((($8)) + 4|0);
 $11 = $9 ? 0 : $10;
 $12 = ((($4)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($4)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$14>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiS8_EE6invokeEPFS8_iS8_EiPNS0_11BindingTypeIS8_EUt_E($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 20|0;
 $4 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $7 = $0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($8)|0);
 $10 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$10);
 __THREW__ = 0;
 invoke_viii($7|0,($3|0),($9|0),($4|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $5 = $16;
  $6 = $17;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $20 = $5;
  $21 = $6;
  ___resumeException($20|0);
  // unreachable;
 }
 __THREW__ = 0;
 $13 = (invoke_ii(453,($3|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  STACKTOP = sp;return ($13|0);
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $5 = $18;
 $6 = $19;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 $20 = $5;
 $21 = $6;
 ___resumeException($20|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiSA_EE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiSA_EE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiS9_EEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10540|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiS9_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4540|0);
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $v;
 $7 = $6;
 $8 = ((($7)) + 4|0);
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $3 = $agg$result;
 $4 = $8;
 $5 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $4;
 $15 = $5;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($11,$14,$15);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $wt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = $v;
 $48 = $47;
 $46 = $48;
 $49 = $46;
 $45 = $49;
 $50 = $45;
 $44 = $50;
 $51 = $44;
 $43 = $51;
 $52 = $43;
 $42 = $52;
 $53 = $42;
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 1;
 $57 = ($56|0)!=(0);
 if ($57) {
  $38 = $50;
  $58 = $38;
  $37 = $58;
  $59 = $37;
  $36 = $59;
  $60 = $36;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $70 = $62;
 } else {
  $41 = $50;
  $63 = $41;
  $40 = $63;
  $64 = $40;
  $39 = $64;
  $65 = $39;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $67 >> 1;
  $70 = $68;
 }
 $69 = (4 + ($70))|0;
 $71 = (_malloc($69)|0);
 $wt = $71;
 $72 = $47;
 $10 = $72;
 $73 = $10;
 $9 = $73;
 $74 = $9;
 $8 = $74;
 $75 = $8;
 $7 = $75;
 $76 = $7;
 $6 = $76;
 $77 = $6;
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 & 1;
 $81 = ($80|0)!=(0);
 if ($81) {
  $2 = $74;
  $82 = $2;
  $1 = $82;
  $83 = $1;
  $0 = $83;
  $84 = $0;
  $85 = ((($84)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $94 = $86;
 } else {
  $5 = $74;
  $87 = $5;
  $4 = $87;
  $88 = $4;
  $3 = $88;
  $89 = $3;
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 >> 1;
  $94 = $92;
 }
 $93 = $wt;
 HEAP32[$93>>2] = $94;
 $95 = $wt;
 $96 = ((($95)) + 4|0);
 $97 = $47;
 $24 = $97;
 $98 = $24;
 $23 = $98;
 $99 = $23;
 $22 = $99;
 $100 = $22;
 $21 = $100;
 $101 = $21;
 $20 = $101;
 $102 = $20;
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $104 & 1;
 $106 = ($105|0)!=(0);
 if ($106) {
  $14 = $99;
  $107 = $14;
  $13 = $107;
  $108 = $13;
  $12 = $108;
  $109 = $12;
  $110 = ((($109)) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  $118 = $111;
 } else {
  $19 = $99;
  $112 = $19;
  $18 = $112;
  $113 = $18;
  $17 = $113;
  $114 = $17;
  $115 = ((($114)) + 1|0);
  $16 = $115;
  $116 = $16;
  $15 = $116;
  $117 = $15;
  $118 = $117;
 }
 $11 = $118;
 $119 = $11;
 $120 = $47;
 $35 = $120;
 $121 = $35;
 $34 = $121;
 $122 = $34;
 $33 = $122;
 $123 = $33;
 $32 = $123;
 $124 = $32;
 $31 = $124;
 $125 = $31;
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = $127 & 1;
 $129 = ($128|0)!=(0);
 if ($129) {
  $27 = $122;
  $130 = $27;
  $26 = $130;
  $131 = $26;
  $25 = $131;
  $132 = $25;
  $133 = ((($132)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $141 = $134;
  _memcpy(($96|0),($119|0),($141|0))|0;
  $142 = $wt;
  STACKTOP = sp;return ($142|0);
 } else {
  $30 = $122;
  $135 = $30;
  $29 = $135;
  $136 = $29;
  $28 = $136;
  $137 = $28;
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = $139 >> 1;
  $141 = $140;
  _memcpy(($96|0),($119|0),($141|0))|0;
  $142 = $wt;
  STACKTOP = sp;return ($142|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerI8Vector4dJiiEE6invokeEPFS2_iiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 FUNCTION_TABLE_viii[$4 & 511]($3,$6,$8);
 $9 = (__ZN10emscripten8internal18GenericBindingTypeI8Vector4dE10toWireTypeEOS2_($3)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector4diiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector4diiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector4diiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector4diiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4552|0);
}
function __ZN10emscripten8internal18GenericBindingTypeI8Vector4dE10toWireTypeEOS2_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = (__Znwj(16)|0);
 $3 = $1;
 $0 = $3;
 $4 = $0;
 ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;HEAP32[$2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$4+12>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal7InvokerI8Vector3dJiiEE6invokeEPFS2_iiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 FUNCTION_TABLE_viii[$4 & 511]($3,$6,$8);
 $9 = (__ZN10emscripten8internal18GenericBindingTypeI8Vector3dE10toWireTypeEOS2_($3)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector3diiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector3diiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector3diiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector3diiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4564|0);
}
function __ZN10emscripten8internal18GenericBindingTypeI8Vector3dE10toWireTypeEOS2_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = (__Znwj(12)|0);
 $3 = $1;
 $0 = $3;
 $4 = $0;
 ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;HEAP32[$2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$4+8>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal7InvokerI8Vector2dJiiEE6invokeEPFS2_iiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 FUNCTION_TABLE_viii[$4 & 511]($3,$6,$8);
 $9 = (__ZN10emscripten8internal18GenericBindingTypeI8Vector2dE10toWireTypeEOS2_($3)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector2diiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector2diiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector2diiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector2diiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4576|0);
}
function __ZN10emscripten8internal18GenericBindingTypeI8Vector2dE10toWireTypeEOS2_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = (__Znwj(8)|0);
 $3 = $1;
 $0 = $3;
 $4 = $0;
 ;HEAP32[$2>>2]=HEAP32[$4>>2]|0;HEAP32[$2+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiiEE6invokeEPFS8_iiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $2;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($9)|0);
 FUNCTION_TABLE_viii[$6 & 511]($3,$8,$10);
 __THREW__ = 0;
 $11 = (invoke_ii(453,($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4588|0);
}
function __ZN10emscripten8internal7InvokerIdJiiEE6invokeEPFdiiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = (+FUNCTION_TABLE_dii[$4 & 511]($6,$8));
 HEAPF64[$3>>3] = $9;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$10);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10676|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4600|0);
}
function __ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = +HEAPF64[$1>>3];
 STACKTOP = sp;return (+$2);
}
function __ZN10emscripten8internal7InvokerI8Vector4dJiEE6invokeEPFS2_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 FUNCTION_TABLE_vii[$3 & 511]($2,$5);
 $6 = (__ZN10emscripten8internal18GenericBindingTypeI8Vector4dE10toWireTypeEOS2_($2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector4diEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector4diEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector4diEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10681|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector4diEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4612|0);
}
function __ZN10emscripten8internal7InvokerI8Vector3dJiEE6invokeEPFS2_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 FUNCTION_TABLE_vii[$3 & 511]($2,$5);
 $6 = (__ZN10emscripten8internal18GenericBindingTypeI8Vector3dE10toWireTypeEOS2_($2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector3diEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector3diEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector3diEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector3diEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4620|0);
}
function __ZN10emscripten8internal7InvokerI8Vector2dJiEE6invokeEPFS2_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 FUNCTION_TABLE_vii[$3 & 511]($2,$5);
 $6 = (__ZN10emscripten8internal18GenericBindingTypeI8Vector2dE10toWireTypeEOS2_($2)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector2diEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ8Vector2diEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector2diEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ8Vector2diEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4628|0);
}
function __ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 $6 = (+FUNCTION_TABLE_di[$3 & 511]($5));
 HEAPF64[$2>>3] = $6;
 $7 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$7);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10685|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4636|0);
}
function __ZN10emscripten8internal7InvokerIbJiddddiEE6invokeEPFbiddddiEiddddi($fn,$args,$args1,$args2,$args3,$args4,$args5) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = +$args3;
 $args4 = +$args4;
 $args5 = $args5|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $args4;
 $6 = $args5;
 $7 = $0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($8)|0);
 $10 = $2;
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($10));
 $12 = $3;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($12));
 $14 = $4;
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($14));
 $16 = $5;
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($16));
 $18 = $6;
 $19 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($18)|0);
 $20 = (FUNCTION_TABLE_iiddddi[$7 & 511]($9,$11,$13,$15,$17,$19)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddddiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiddddiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10689|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddddiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4644|0);
}
function __ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($v) {
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return (+$1);
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $b&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal7InvokerIbJidddiEE6invokeEPFbidddiEidddi($fn,$args,$args1,$args2,$args3,$args4) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = +$args3;
 $args4 = $args4|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $args4;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $2;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($9));
 $11 = $3;
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($11));
 $13 = $4;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($13));
 $15 = $5;
 $16 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($15)|0);
 $17 = (FUNCTION_TABLE_iidddi[$6 & 511]($8,$10,$12,$14,$16)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidddiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidddiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10698|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidddiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4672|0);
}
function __ZN10emscripten8internal7InvokerIbJiddiEE6invokeEPFbiddiEiddi($fn,$args,$args1,$args2,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 $8 = $2;
 $9 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($8));
 $10 = $3;
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($10));
 $12 = $4;
 $13 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($12)|0);
 $14 = (FUNCTION_TABLE_iiddi[$5 & 511]($7,$9,$11,$13)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($14)|0);
 STACKTOP = sp;return ($15|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiddiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10706|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4696|0);
}
function __ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEiEE6invokeEPFbiS8_iEiPNS0_11BindingTypeIS8_EUt_Ei($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $7 = $0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($8)|0);
 $10 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$10);
 $11 = $3;
 __THREW__ = 0;
 $12 = (invoke_ii(454,($11|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  __THREW__ = 0;
  $15 = (invoke_iiii($7|0,($9|0),($4|0),($12|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __THREW__ = 0;
   $18 = (invoke_ii(455,($15|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    STACKTOP = sp;return ($18|0);
   }
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $5 = $21;
 $6 = $22;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 $23 = $5;
 $24 = $6;
 ___resumeException($23|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10713|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4716|0);
}
function __ZN10emscripten8internal7InvokerIbJidiEE6invokeEPFbidiEidi($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($7));
 $9 = $3;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($9)|0);
 $11 = (FUNCTION_TABLE_iidi[$4 & 511]($6,$8,$10)|0);
 $12 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10719|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4732|0);
}
function __ZN10emscripten8internal7InvokerIbJiiiEE6invokeEPFbiiiEiii($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $3;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($9)|0);
 $11 = (FUNCTION_TABLE_iiii[$4 & 511]($6,$8,$10)|0);
 $12 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4748|0);
}
function __ZN10emscripten8internal7InvokerIbJiddddEE6invokeEPFbiddddEidddd($fn,$args,$args1,$args2,$args3,$args4) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = +$args3;
 $args4 = +$args4;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $args4;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $2;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($9));
 $11 = $3;
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($11));
 $13 = $4;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($13));
 $15 = $5;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($15));
 $17 = (FUNCTION_TABLE_iidddd[$6 & 511]($8,$10,$12,$14,$16)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddddEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddddEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiddddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10725|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4764|0);
}
function __ZN10emscripten8internal7InvokerIbJidddEE6invokeEPFbidddEiddd($fn,$args,$args1,$args2,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 $args3 = +$args3;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 $8 = $2;
 $9 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($8));
 $10 = $3;
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($10));
 $12 = $4;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($12));
 $14 = (FUNCTION_TABLE_iiddd[$5 & 511]($7,$9,$11,$13)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($14)|0);
 STACKTOP = sp;return ($15|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidddEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidddEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10733|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4788|0);
}
function __ZN10emscripten8internal7InvokerIbJiddEE6invokeEPFbiddEidd($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 $args2 = +$args2;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($7));
 $9 = $3;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($9));
 $11 = (FUNCTION_TABLE_iidd[$4 & 511]($6,$8,$10)|0);
 $12 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiddEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10740|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4808|0);
}
function __ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbiS8_EiPNS0_11BindingTypeIS8_EUt_E($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($3,$9);
 __THREW__ = 0;
 $10 = (invoke_iii($6|0,($8|0),($3|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __THREW__ = 0;
  $13 = (invoke_ii(455,($10|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if (!($15)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   STACKTOP = sp;return ($13|0);
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $4 = $16;
 $5 = $17;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 $18 = $4;
 $19 = $5;
 ___resumeException($18|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4824|0);
}
function __ZN10emscripten8internal7InvokerIbJidEE6invokeEPFbidEid($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 $6 = $2;
 $7 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $8 = (FUNCTION_TABLE_iid[$3 & 511]($5,$7)|0);
 $9 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbidEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10746|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbidEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4836|0);
}
function __ZN10emscripten8internal7InvokerIbJiiEE6invokeEPFbiiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 $6 = $2;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 $8 = (FUNCTION_TABLE_iii[$3 & 511]($5,$7)|0);
 $9 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4848|0);
}
function __ZN10emscripten8internal7InvokerIiJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE11e_dx_type_tiEE6invokeEPFiiS8_S9_iEiPNS0_11BindingTypeIS8_EUt_ES9_i($fn,$args,$args1,$args2,$args3) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 20|0;
 $6 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $4 = $args3;
 $9 = $0;
 $10 = $1;
 $11 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($10)|0);
 $12 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($6,$12);
 $13 = $3;
 __THREW__ = 0;
 $14 = (invoke_ii(456,($13|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = $4;
  __THREW__ = 0;
  $18 = (invoke_ii(454,($17|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if (!($20)) {
   __THREW__ = 0;
   $21 = (invoke_iiiii($9|0,($11|0),($6|0),($14|0),($18|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    HEAP32[$5>>2] = $21;
    __THREW__ = 0;
    $24 = (invoke_ii(457,($5|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
     STACKTOP = sp;return ($24|0);
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $7 = $27;
 $8 = $28;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 $29 = $7;
 $30 = $8;
 ___resumeException($29|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE11e_dx_type_tiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE11e_dx_type_tiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE11e_dx_type_tiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10751|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE11e_dx_type_tiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4860|0);
}
function __ZN10emscripten8internal15EnumBindingTypeI11e_dx_type_tE12fromWireTypeES2_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal7InvokerI11e_dx_type_tJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeEPFS2_S9_EPNS0_11BindingTypeIS9_EUt_E($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $5 = $0;
 $6 = $1;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($2,$6);
 __THREW__ = 0;
 $7 = (invoke_ii($5|0,($2|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  $10 = (invoke_ii(458,($7|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
   STACKTOP = sp;return ($10|0);
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $3 = $13;
 $4 = $14;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 $15 = $3;
 $16 = $4;
 ___resumeException($15|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ11e_dx_type_tNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ11e_dx_type_tNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ11e_dx_type_tNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ11e_dx_type_tNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4880|0);
}
function __ZN10emscripten8internal15EnumBindingTypeI11e_dx_type_tE10toWireTypeES2_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJ11e_dx_type_tiEE6invokeEPFS8_S9_iES9_i($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal15EnumBindingTypeI11e_dx_type_tE12fromWireTypeES2_($7)|0);
 $9 = $2;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($9)|0);
 FUNCTION_TABLE_viii[$6 & 511]($3,$8,$10);
 __THREW__ = 0;
 $11 = (invoke_ii(453,($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE11e_dx_type_tiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE11e_dx_type_tiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE11e_dx_type_tiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE11e_dx_type_tiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4888|0);
}
function __ZN10emscripten8internal7InvokerI11e_dx_type_tJiEE6invokeEPFS2_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $5 = (FUNCTION_TABLE_ii[$2 & 511]($4)|0);
 $6 = (__ZN10emscripten8internal15EnumBindingTypeI11e_dx_type_tE10toWireTypeES2_($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ11e_dx_type_tiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ11e_dx_type_tiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ11e_dx_type_tiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ11e_dx_type_tiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4900|0);
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiEE6invokeEPFS8_iEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 FUNCTION_TABLE_vii[$5 & 511]($2,$7);
 __THREW__ = 0;
 $8 = (invoke_ii(453,($2|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4908|0);
}
function __ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $4 = $0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($7)|0);
 $9 = (FUNCTION_TABLE_iii[$4 & 511]($6,$8)|0);
 HEAP32[$3>>2] = $9;
 $10 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($3)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4916|0);
}
function __ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 $6 = (FUNCTION_TABLE_ii[$3 & 511]($5)|0);
 HEAP32[$2>>2] = $6;
 $7 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4928|0);
}
function __ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $fn;
 $2 = $0;
 $3 = (FUNCTION_TABLE_i[$2 & 511]()|0);
 HEAP32[$1>>2] = $3;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10772|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4936|0);
}
function __ZN10emscripten8internal7InvokerIfJEE6invokeEPFfvE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $fn;
 $2 = $0;
 $3 = (+FUNCTION_TABLE_d[$2 & 511]());
 HEAPF32[$1>>2] = $3;
 $4 = (+__ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($1));
 STACKTOP = sp;return (+$4);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJfEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJfEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJfEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJfiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10775|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJfEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4940|0);
}
function __ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 STACKTOP = sp;return (+$2);
}
function __ZN10emscripten8internal6TypeIDI8Vector4dE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI8Vector4dE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11noncopyableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11LightTypeIDI8Vector4dE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (352|0);
}
function __ZN10emscripten8internal12MemberAccessI8Vector4dfE7getWireIS2_EEfRKMS2_fRKT_($field,$ptr) {
 $field = $field|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 $6 = (+__ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($5));
 STACKTOP = sp;return (+$6);
}
function __ZN10emscripten8internal12MemberAccessI8Vector4dfE7setWireIS2_EEvRKMS2_fRT_f($field,$ptr,$value) {
 $field = $field|0;
 $ptr = $ptr|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $value;
 $3 = $2;
 $4 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($3));
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 HEAPF32[$8>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJfiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10783|0);
}
function __ZN10emscripten8internal10getContextIM8Vector4dfEEPT_RKS4_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10778|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (984|0);
}
function __ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($v) {
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return (+$1);
}
function __ZN10emscripten8internal11noncopyableC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal15raw_constructorI8Vector4dJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(16)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return ($0|0);
}
function __ZN10emscripten8internal14raw_destructorI8Vector4dEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10790|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10787|0);
}
function __ZN10emscripten8internal6TypeIDI8Vector3dE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI8Vector3dE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDI8Vector3dE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (360|0);
}
function __ZN10emscripten8internal12MemberAccessI8Vector3dfE7getWireIS2_EEfRKMS2_fRKT_($field,$ptr) {
 $field = $field|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 $6 = (+__ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($5));
 STACKTOP = sp;return (+$6);
}
function __ZN10emscripten8internal12MemberAccessI8Vector3dfE7setWireIS2_EEvRKMS2_fRT_f($field,$ptr,$value) {
 $field = $field|0;
 $ptr = $ptr|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $value;
 $3 = $2;
 $4 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($3));
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 HEAPF32[$8>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal10getContextIM8Vector3dfEEPT_RKS4_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal15raw_constructorI8Vector3dJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(12)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 return ($0|0);
}
function __ZN10emscripten8internal14raw_destructorI8Vector3dEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDI8Vector2dE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI8Vector2dE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDI8Vector2dE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (368|0);
}
function __ZN10emscripten8internal12MemberAccessI8Vector2dfE7getWireIS2_EEfRKMS2_fRKT_($field,$ptr) {
 $field = $field|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4)|0);
 $6 = (+__ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($5));
 STACKTOP = sp;return (+$6);
}
function __ZN10emscripten8internal12MemberAccessI8Vector2dfE7setWireIS2_EEvRKMS2_fRT_f($field,$ptr,$value) {
 $field = $field|0;
 $ptr = $ptr|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $field;
 $1 = $ptr;
 $2 = $value;
 $3 = $2;
 $4 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($3));
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 HEAPF32[$8>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal10getContextIM8Vector2dfEEPT_RKS4_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal15raw_constructorI8Vector2dJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(8)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;
 return ($0|0);
}
function __ZN10emscripten8internal14raw_destructorI8Vector2dEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDI11e_dx_type_tE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI11e_dx_type_tE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDI11e_dx_type_tE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (376|0);
}
function __ZNK8tinyxml210XMLElement20QueryDoubleAttributeEPKcPd($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $value;
 $4 = $1;
 $5 = $2;
 $6 = (__ZNK8tinyxml210XMLElement13FindAttributeEPKc($4,$5)|0);
 $a = $6;
 $7 = $a;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $a;
  $10 = $3;
  $11 = (__ZNK8tinyxml212XMLAttribute16QueryDoubleValueEPd($9,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml210XMLElement17QueryIntAttributeEPKcPi($this,$name,$value) {
 $this = $this|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $name;
 $3 = $value;
 $4 = $1;
 $5 = $2;
 $6 = (__ZNK8tinyxml210XMLElement13FindAttributeEPKc($4,$5)|0);
 $a = $6;
 $7 = $a;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $a;
  $10 = $3;
  $11 = (__ZNK8tinyxml212XMLAttribute13QueryIntValueEPi($9,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZNK8tinyxml28DynArrayIcLi20EE3MemEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIPN2dx16c_dx_node_mini_tERNS_9allocatorIS3_EEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN2dx16c_dx_node_mini_tERNS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t11EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx12c_dx_xnode_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t11EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t11EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t11EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 11;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t10EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx12c_dx_xnode_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t10EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t10EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t10EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 10;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t9EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx12c_dx_xnode_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t9EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t9EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t9EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 9;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t8EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx12c_dx_xnode_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t8EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t8EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t8EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 8;
}
function __ZN2dx11c_dx_cell_tC2EPKc($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $name;
 $2 = $0;
 $3 = $1;
 __ZN2dx16c_dx_node_mini_tC2EPKc($2,$3);
 $4 = 5212;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 12)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + (($39*12)|0)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 12)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -12|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
  $68 = $1;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($68);
 }
 $69 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(459,($41|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE6resizeEjRKS2_($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 88|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $__x;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 4)&-1;
 $__cs = $29;
 $30 = $__cs;
 $31 = $19;
 $32 = ($30>>>0)<($31>>>0);
 if ($32) {
  $33 = $19;
  $34 = $__cs;
  $35 = (($33) - ($34))|0;
  $36 = $20;
  __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE8__appendEjRKS2_($21,$35,$36);
  STACKTOP = sp;return;
 }
 $37 = $__cs;
 $38 = $19;
 $39 = ($37>>>0)>($38>>>0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = HEAP32[$21>>2]|0;
 $41 = $19;
 $42 = (($40) + ($41<<2)|0);
 $15 = $21;
 $16 = $42;
 $43 = $15;
 $14 = $43;
 $44 = $14;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $__old_size$i = $51;
 $52 = $16;
 $12 = $43;
 $13 = $52;
 $53 = $12;
 while(1) {
  $54 = $13;
  $55 = ((($53)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($54|0)!=($56|0);
  if (!($57)) {
   break;
  }
  $11 = $53;
  $58 = $11;
  $59 = ((($58)) + 8|0);
  $10 = $59;
  $60 = $10;
  $9 = $60;
  $61 = $9;
  $62 = ((($53)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + -4|0);
  HEAP32[$62>>2] = $64;
  $8 = $64;
  $65 = $8;
  $5 = $61;
  $6 = $65;
  $66 = $5;
  $67 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $66;
  $3 = $67;
  $68 = $2;
  $69 = $3;
  $0 = $68;
  $1 = $69;
 }
 $70 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(460,($43|0),($70|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPKwNS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx11c_dx_cell_tD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx16c_dx_node_mini_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -12|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 12)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPKwNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE8__appendEjRKS2_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__a$i = 0, $__annotator$i = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 8|0;
 $9 = sp + 242|0;
 $17 = sp + 176|0;
 $18 = sp + 164|0;
 $31 = sp;
 $36 = sp + 241|0;
 $__annotator$i = sp + 240|0;
 $__v = sp + 20|0;
 $47 = $this;
 $48 = $__n;
 $49 = $__x;
 $52 = $47;
 $46 = $52;
 $53 = $46;
 $54 = ((($53)) + 8|0);
 $45 = $54;
 $55 = $45;
 $44 = $55;
 $56 = $44;
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($52)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $57;
 $61 = $59;
 $62 = (($60) - ($61))|0;
 $63 = (($62|0) / 4)&-1;
 $64 = $48;
 $65 = ($63>>>0)>=($64>>>0);
 if ($65) {
  $66 = $48;
  $67 = $49;
  $41 = $52;
  $42 = $66;
  $43 = $67;
  $68 = $41;
  $40 = $68;
  $69 = $40;
  $70 = ((($69)) + 8|0);
  $39 = $70;
  $71 = $39;
  $38 = $71;
  $72 = $38;
  $__a$i = $72;
  while(1) {
   __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$68,1);
   $73 = $__a$i;
   $74 = ((($68)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $37 = $75;
   $76 = $37;
   $77 = $43;
   $33 = $73;
   $34 = $76;
   $35 = $77;
   $78 = $33;
   $79 = $34;
   $80 = $35;
   $32 = $80;
   $81 = $32;
   ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
   $28 = $78;
   $29 = $79;
   $30 = $81;
   $82 = $28;
   $83 = $29;
   $84 = $30;
   $27 = $84;
   $85 = $27;
   $24 = $82;
   $25 = $83;
   $26 = $85;
   $86 = $25;
   $87 = $26;
   $23 = $87;
   $88 = $23;
   $89 = HEAP32[$88>>2]|0;
   HEAP32[$86>>2] = $89;
   $90 = ((($68)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($91)) + 4|0);
   HEAP32[$90>>2] = $92;
   $93 = $42;
   $94 = (($93) + -1)|0;
   $42 = $94;
   __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $95 = $42;
   $96 = ($95>>>0)>(0);
   if (!($96)) {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 $22 = $52;
 $97 = $22;
 $98 = ((($97)) + 8|0);
 $21 = $98;
 $99 = $21;
 $20 = $99;
 $100 = $20;
 $__a = $100;
 $19 = $52;
 $101 = $19;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 4)&-1;
 $109 = $48;
 $110 = (($108) + ($109))|0;
 $16 = $52;
 HEAP32[$17>>2] = $110;
 $111 = $16;
 $112 = (__ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE8max_sizeEv($111)|0);
 $__ms$i = $112;
 $113 = HEAP32[$17>>2]|0;
 $114 = $__ms$i;
 $115 = ($113>>>0)>($114>>>0);
 if ($115) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($111);
 }
 $14 = $111;
 $116 = $14;
 $13 = $116;
 $117 = $13;
 $12 = $117;
 $118 = $12;
 $119 = ((($118)) + 8|0);
 $11 = $119;
 $120 = $11;
 $10 = $120;
 $121 = $10;
 $122 = HEAP32[$121>>2]|0;
 $123 = HEAP32[$117>>2]|0;
 $124 = $122;
 $125 = $123;
 $126 = (($124) - ($125))|0;
 $127 = (($126|0) / 4)&-1;
 $__cap$i = $127;
 $128 = $__cap$i;
 $129 = $__ms$i;
 $130 = (($129>>>0) / 2)&-1;
 $131 = ($128>>>0)>=($130>>>0);
 if ($131) {
  $132 = $__ms$i;
  $15 = $132;
 } else {
  $133 = $__cap$i;
  $134 = $133<<1;
  HEAP32[$18>>2] = $134;
  $7 = $18;
  $8 = $17;
  $135 = $7;
  $136 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $135;
  $5 = $136;
  $137 = $4;
  $138 = $5;
  $1 = $6;
  $2 = $137;
  $3 = $138;
  $139 = $2;
  $140 = HEAP32[$139>>2]|0;
  $141 = $3;
  $142 = HEAP32[$141>>2]|0;
  $143 = ($140>>>0)<($142>>>0);
  $144 = $5;
  $145 = $4;
  $146 = $143 ? $144 : $145;
  $147 = HEAP32[$146>>2]|0;
  $15 = $147;
 }
 $148 = $15;
 $0 = $52;
 $149 = $0;
 $150 = ((($149)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = HEAP32[$149>>2]|0;
 $153 = $151;
 $154 = $152;
 $155 = (($153) - ($154))|0;
 $156 = (($155|0) / 4)&-1;
 $157 = $__a;
 __ZNSt3__114__split_bufferIPKwRNS_9allocatorIS2_EEEC2EjjS5_($__v,$148,$156,$157);
 $158 = $48;
 $159 = $49;
 __THREW__ = 0;
 invoke_viii(461,($__v|0),($158|0),($159|0));
 $160 = __THREW__; __THREW__ = 0;
 $161 = $160&1;
 if ($161) {
  $164 = ___cxa_find_matching_catch()|0;
  $165 = tempRet0;
  $50 = $164;
  $51 = $165;
  __ZNSt3__114__split_bufferIPKwRNS_9allocatorIS2_EEED2Ev($__v);
  $166 = $50;
  $167 = $51;
  ___resumeException($166|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(462,($52|0),($__v|0));
 $162 = __THREW__; __THREW__ = 0;
 $163 = $162&1;
 if ($163) {
  $164 = ___cxa_find_matching_catch()|0;
  $165 = tempRet0;
  $50 = $164;
  $51 = $165;
  __ZNSt3__114__split_bufferIPKwRNS_9allocatorIS2_EEED2Ev($__v);
  $166 = $50;
  $167 = $51;
  ___resumeException($166|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIPKwRNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIPKwRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPKwRNS_9allocatorIS2_EEE18__construct_at_endEjRKS2_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 84|0;
 $18 = $this;
 $19 = $__n;
 $20 = $__x;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 12|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $__a = $27;
 while(1) {
  $28 = $__a;
  $29 = ((($21)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $0 = $30;
  $31 = $0;
  $32 = $20;
  $11 = $28;
  $12 = $31;
  $13 = $32;
  $33 = $11;
  $34 = $12;
  $35 = $13;
  $10 = $35;
  $36 = $10;
  ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
  $6 = $33;
  $7 = $34;
  $8 = $36;
  $37 = $6;
  $38 = $7;
  $39 = $8;
  $5 = $39;
  $40 = $5;
  $2 = $37;
  $3 = $38;
  $4 = $40;
  $41 = $3;
  $42 = $4;
  $1 = $42;
  $43 = $1;
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$41>>2] = $44;
  $45 = ((($21)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 4|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = (($48) + -1)|0;
  $19 = $49;
  $50 = $19;
  $51 = ($50>>>0)>(0);
  if (!($51)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPKwRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 12)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 12)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 12)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 12)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEERNS4_IS6_EEEC2EjjS8_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(463,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEERNS4_IS6_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(464,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEERNS4_IS6_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEERNS4_IS6_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__a$i$i$i$i$i = 0, $__annotator = 0, $__i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 93|0;
 $__annotator = sp + 92|0;
 $19 = $this;
 $20 = $__n;
 $21 = $19;
 $18 = $21;
 $22 = $18;
 $23 = ((($22)) + 8|0);
 $17 = $23;
 $24 = $17;
 $16 = $24;
 $25 = $16;
 $__a = $25;
 while(1) {
  __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator,$21,1);
  $26 = $__a;
  $27 = ((($21)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $15 = $28;
  $29 = $15;
  $12 = $26;
  $13 = $29;
  $30 = $12;
  $31 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $30;
  $10 = $31;
  $32 = $9;
  $33 = $10;
  $7 = $32;
  $8 = $33;
  $34 = $8;
  $6 = $34;
  $35 = $6;
  $5 = $35;
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $3 = $37;
  $2 = $35;
  $38 = $2;
  $1 = $38;
  $39 = $1;
  $0 = $39;
  $40 = $0;
  $__a$i$i$i$i$i = $40;
  $__i$i$i$i$i$i = 0;
  while(1) {
   $41 = $__i$i$i$i$i$i;
   $42 = ($41>>>0)<(3);
   if (!($42)) {
    break;
   }
   $43 = $__i$i$i$i$i$i;
   $44 = $__a$i$i$i$i$i;
   $45 = (($44) + ($43<<2)|0);
   HEAP32[$45>>2] = 0;
   $46 = $__i$i$i$i$i$i;
   $47 = (($46) + 1)|0;
   $__i$i$i$i$i$i = $47;
  }
  $48 = ((($21)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 12|0);
  HEAP32[$48>>2] = $50;
  $51 = $20;
  $52 = (($51) + -1)|0;
  $20 = $52;
  __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $53 = $20;
  $54 = ($53>>>0)>(0);
  if (!($54)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 357913941;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEERNS4_IS6_EEEC2EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*12)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*12)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*12)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEERNS4_IS6_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__a$i$i$i$i$i = 0, $__i$i$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp;
 $15 = sp + 92|0;
 $19 = $this;
 $20 = $__n;
 $21 = $19;
 $18 = $21;
 $22 = $18;
 $23 = ((($22)) + 12|0);
 $17 = $23;
 $24 = $17;
 $16 = $24;
 $25 = $16;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $__a = $27;
 while(1) {
  $28 = $__a;
  $29 = ((($21)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $0 = $30;
  $31 = $0;
  $13 = $28;
  $14 = $31;
  $32 = $13;
  $33 = $14;
  ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
  $10 = $32;
  $11 = $33;
  $34 = $10;
  $35 = $11;
  $8 = $34;
  $9 = $35;
  $36 = $9;
  $7 = $36;
  $37 = $7;
  $6 = $37;
  $38 = $6;
  $5 = $38;
  $39 = $5;
  $4 = $39;
  $3 = $37;
  $40 = $3;
  $2 = $40;
  $41 = $2;
  $1 = $41;
  $42 = $1;
  $__a$i$i$i$i$i = $42;
  $__i$i$i$i$i$i = 0;
  while(1) {
   $43 = $__i$i$i$i$i$i;
   $44 = ($43>>>0)<(3);
   if (!($44)) {
    break;
   }
   $45 = $__i$i$i$i$i$i;
   $46 = $__a$i$i$i$i$i;
   $47 = (($46) + ($45<<2)|0);
   HEAP32[$47>>2] = 0;
   $48 = $__i$i$i$i$i$i;
   $49 = (($48) + 1)|0;
   $__i$i$i$i$i$i = $49;
  }
  $50 = ((($21)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 12|0);
  HEAP32[$50>>2] = $52;
  $53 = $20;
  $54 = (($53) + -1)|0;
  $20 = $54;
  $55 = $20;
  $56 = ($55>>>0)>(0);
  if (!($56)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$i$i$i$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 212|0;
 $__t$i1 = sp + 188|0;
 $__t$i = sp + 140|0;
 $38 = sp;
 $43 = sp + 236|0;
 $53 = $this;
 $54 = $__v;
 $55 = $53;
 __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE17__annotate_deleteEv($55);
 $52 = $55;
 $56 = $52;
 $57 = ((($56)) + 8|0);
 $51 = $57;
 $58 = $51;
 $50 = $58;
 $59 = $50;
 $60 = HEAP32[$55>>2]|0;
 $61 = ((($55)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $54;
 $64 = ((($63)) + 4|0);
 $45 = $59;
 $46 = $60;
 $47 = $62;
 $48 = $64;
 while(1) {
  $65 = $47;
  $66 = $46;
  $67 = ($65|0)!=($66|0);
  if (!($67)) {
   break;
  }
  $68 = $45;
  $69 = $48;
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + -12|0);
  $44 = $71;
  $72 = $44;
  $73 = $47;
  $74 = ((($73)) + -12|0);
  $47 = $74;
  $23 = $74;
  $75 = $23;
  $22 = $75;
  $76 = $22;
  $40 = $68;
  $41 = $72;
  $42 = $76;
  $77 = $40;
  $78 = $41;
  $79 = $42;
  $39 = $79;
  $80 = $39;
  ;HEAP8[$38>>0]=HEAP8[$43>>0]|0;
  $35 = $77;
  $36 = $78;
  $37 = $80;
  $81 = $35;
  $82 = $36;
  $83 = $37;
  $34 = $83;
  $84 = $34;
  $31 = $81;
  $32 = $82;
  $33 = $84;
  $85 = $32;
  $86 = $33;
  $30 = $86;
  $87 = $30;
  $28 = $85;
  $29 = $87;
  $88 = $28;
  $89 = $29;
  $27 = $89;
  $90 = $27;
  ;HEAP32[$88>>2]=HEAP32[$90>>2]|0;HEAP32[$88+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$90+8>>2]|0;
  $91 = $29;
  $26 = $91;
  $92 = $26;
  $25 = $92;
  $93 = $25;
  $24 = $93;
  $94 = $24;
  $__a$i$i$i$i$i$i = $94;
  $__i$i$i$i$i$i$i = 0;
  while(1) {
   $95 = $__i$i$i$i$i$i$i;
   $96 = ($95>>>0)<(3);
   if (!($96)) {
    break;
   }
   $97 = $__i$i$i$i$i$i$i;
   $98 = $__a$i$i$i$i$i$i;
   $99 = (($98) + ($97<<2)|0);
   HEAP32[$99>>2] = 0;
   $100 = $__i$i$i$i$i$i$i;
   $101 = (($100) + 1)|0;
   $__i$i$i$i$i$i$i = $101;
  }
  $102 = $48;
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($103)) + -12|0);
  HEAP32[$102>>2] = $104;
 }
 $105 = $54;
 $106 = ((($105)) + 4|0);
 $3 = $55;
 $4 = $106;
 $107 = $3;
 $2 = $107;
 $108 = $2;
 $109 = HEAP32[$108>>2]|0;
 HEAP32[$__t$i2>>2] = $109;
 $110 = $4;
 $0 = $110;
 $111 = $0;
 $112 = HEAP32[$111>>2]|0;
 $113 = $3;
 HEAP32[$113>>2] = $112;
 $1 = $__t$i2;
 $114 = $1;
 $115 = HEAP32[$114>>2]|0;
 $116 = $4;
 HEAP32[$116>>2] = $115;
 $117 = ((($55)) + 4|0);
 $118 = $54;
 $119 = ((($118)) + 8|0);
 $8 = $117;
 $9 = $119;
 $120 = $8;
 $7 = $120;
 $121 = $7;
 $122 = HEAP32[$121>>2]|0;
 HEAP32[$__t$i1>>2] = $122;
 $123 = $9;
 $5 = $123;
 $124 = $5;
 $125 = HEAP32[$124>>2]|0;
 $126 = $8;
 HEAP32[$126>>2] = $125;
 $6 = $__t$i1;
 $127 = $6;
 $128 = HEAP32[$127>>2]|0;
 $129 = $9;
 HEAP32[$129>>2] = $128;
 $12 = $55;
 $130 = $12;
 $131 = ((($130)) + 8|0);
 $11 = $131;
 $132 = $11;
 $10 = $132;
 $133 = $10;
 $134 = $54;
 $15 = $134;
 $135 = $15;
 $136 = ((($135)) + 12|0);
 $14 = $136;
 $137 = $14;
 $13 = $137;
 $138 = $13;
 $19 = $133;
 $20 = $138;
 $139 = $19;
 $18 = $139;
 $140 = $18;
 $141 = HEAP32[$140>>2]|0;
 HEAP32[$__t$i>>2] = $141;
 $142 = $20;
 $16 = $142;
 $143 = $16;
 $144 = HEAP32[$143>>2]|0;
 $145 = $19;
 HEAP32[$145>>2] = $144;
 $17 = $__t$i;
 $146 = $17;
 $147 = HEAP32[$146>>2]|0;
 $148 = $20;
 HEAP32[$148>>2] = $147;
 $149 = $54;
 $150 = ((($149)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $54;
 HEAP32[$152>>2] = $151;
 $21 = $55;
 $153 = $21;
 $154 = ((($153)) + 4|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$153>>2]|0;
 $157 = $155;
 $158 = $156;
 $159 = (($157) - ($158))|0;
 $160 = (($159|0) / 12)&-1;
 __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE14__annotate_newEj($55,$160);
 $49 = $55;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEERNS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -12|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = ((($62)) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = ((($70)) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 12)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5160;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 40|0);
 __ZNSt3__16vectorIPKwNS_9allocatorIS2_EEED2Ev($3);
 $4 = ((($1)) + 28|0);
 __ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEED2Ev($4);
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 7;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 HEAP32[$agg$result>>2] = $5;
 $6 = ((($4)) + 28|0);
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 12)&-1;
 $15 = ((($agg$result)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$4>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 511]($4)|0);
 $20 = ((($agg$result)) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($4)) + 40|0);
 $0 = $21;
 $1 = 0;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<2)|0);
 $26 = ((($agg$result)) + 12|0);
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function __ZN2dx11c_dx_cell_t4itemEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 STACKTOP = sp;return (0|0);
}
function __ZN2dx11c_dx_cell_tD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx11c_dx_cell_tD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 12)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + (($39*12)|0)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 12)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -12|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
  $68 = $1;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($68);
 }
 $69 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(465,($41|0),($69|0));
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $72 = ___cxa_find_matching_catch(0|0)|0;
  $73 = tempRet0;
  ___clang_call_terminate($72);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE6resizeEjRKS2_($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 88|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $__x;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 4)&-1;
 $__cs = $29;
 $30 = $__cs;
 $31 = $19;
 $32 = ($30>>>0)<($31>>>0);
 if ($32) {
  $33 = $19;
  $34 = $__cs;
  $35 = (($33) - ($34))|0;
  $36 = $20;
  __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE8__appendEjRKS2_($21,$35,$36);
  STACKTOP = sp;return;
 }
 $37 = $__cs;
 $38 = $19;
 $39 = ($37>>>0)>($38>>>0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = HEAP32[$21>>2]|0;
 $41 = $19;
 $42 = (($40) + ($41<<2)|0);
 $15 = $21;
 $16 = $42;
 $43 = $15;
 $14 = $43;
 $44 = $14;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $__old_size$i = $51;
 $52 = $16;
 $12 = $43;
 $13 = $52;
 $53 = $12;
 while(1) {
  $54 = $13;
  $55 = ((($53)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($54|0)!=($56|0);
  if (!($57)) {
   break;
  }
  $11 = $53;
  $58 = $11;
  $59 = ((($58)) + 8|0);
  $10 = $59;
  $60 = $10;
  $9 = $60;
  $61 = $9;
  $62 = ((($53)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + -4|0);
  HEAP32[$62>>2] = $64;
  $8 = $64;
  $65 = $8;
  $5 = $61;
  $6 = $65;
  $66 = $5;
  $67 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $66;
  $3 = $67;
  $68 = $2;
  $69 = $3;
  $0 = $68;
  $1 = $69;
 }
 $70 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(466,($43|0),($70|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE8__appendEjRKS2_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__a$i = 0, $__annotator$i = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 8|0;
 $9 = sp + 242|0;
 $17 = sp + 176|0;
 $18 = sp + 164|0;
 $31 = sp;
 $36 = sp + 241|0;
 $__annotator$i = sp + 240|0;
 $__v = sp + 20|0;
 $47 = $this;
 $48 = $__n;
 $49 = $__x;
 $52 = $47;
 $46 = $52;
 $53 = $46;
 $54 = ((($53)) + 8|0);
 $45 = $54;
 $55 = $45;
 $44 = $55;
 $56 = $44;
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($52)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $57;
 $61 = $59;
 $62 = (($60) - ($61))|0;
 $63 = (($62|0) / 4)&-1;
 $64 = $48;
 $65 = ($63>>>0)>=($64>>>0);
 if ($65) {
  $66 = $48;
  $67 = $49;
  $41 = $52;
  $42 = $66;
  $43 = $67;
  $68 = $41;
  $40 = $68;
  $69 = $40;
  $70 = ((($69)) + 8|0);
  $39 = $70;
  $71 = $39;
  $38 = $71;
  $72 = $38;
  $__a$i = $72;
  while(1) {
   __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$68,1);
   $73 = $__a$i;
   $74 = ((($68)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $37 = $75;
   $76 = $37;
   $77 = $43;
   $33 = $73;
   $34 = $76;
   $35 = $77;
   $78 = $33;
   $79 = $34;
   $80 = $35;
   $32 = $80;
   $81 = $32;
   ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
   $28 = $78;
   $29 = $79;
   $30 = $81;
   $82 = $28;
   $83 = $29;
   $84 = $30;
   $27 = $84;
   $85 = $27;
   $24 = $82;
   $25 = $83;
   $26 = $85;
   $86 = $25;
   $87 = $26;
   $23 = $87;
   $88 = $23;
   $89 = HEAP32[$88>>2]|0;
   HEAP32[$86>>2] = $89;
   $90 = ((($68)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($91)) + 4|0);
   HEAP32[$90>>2] = $92;
   $93 = $42;
   $94 = (($93) + -1)|0;
   $42 = $94;
   __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $95 = $42;
   $96 = ($95>>>0)>(0);
   if (!($96)) {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 $22 = $52;
 $97 = $22;
 $98 = ((($97)) + 8|0);
 $21 = $98;
 $99 = $21;
 $20 = $99;
 $100 = $20;
 $__a = $100;
 $19 = $52;
 $101 = $19;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 4)&-1;
 $109 = $48;
 $110 = (($108) + ($109))|0;
 $16 = $52;
 HEAP32[$17>>2] = $110;
 $111 = $16;
 $112 = (__ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv($111)|0);
 $__ms$i = $112;
 $113 = HEAP32[$17>>2]|0;
 $114 = $__ms$i;
 $115 = ($113>>>0)>($114>>>0);
 if ($115) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($111);
 }
 $14 = $111;
 $116 = $14;
 $13 = $116;
 $117 = $13;
 $12 = $117;
 $118 = $12;
 $119 = ((($118)) + 8|0);
 $11 = $119;
 $120 = $11;
 $10 = $120;
 $121 = $10;
 $122 = HEAP32[$121>>2]|0;
 $123 = HEAP32[$117>>2]|0;
 $124 = $122;
 $125 = $123;
 $126 = (($124) - ($125))|0;
 $127 = (($126|0) / 4)&-1;
 $__cap$i = $127;
 $128 = $__cap$i;
 $129 = $__ms$i;
 $130 = (($129>>>0) / 2)&-1;
 $131 = ($128>>>0)>=($130>>>0);
 if ($131) {
  $132 = $__ms$i;
  $15 = $132;
 } else {
  $133 = $__cap$i;
  $134 = $133<<1;
  HEAP32[$18>>2] = $134;
  $7 = $18;
  $8 = $17;
  $135 = $7;
  $136 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $135;
  $5 = $136;
  $137 = $4;
  $138 = $5;
  $1 = $6;
  $2 = $137;
  $3 = $138;
  $139 = $2;
  $140 = HEAP32[$139>>2]|0;
  $141 = $3;
  $142 = HEAP32[$141>>2]|0;
  $143 = ($140>>>0)<($142>>>0);
  $144 = $5;
  $145 = $4;
  $146 = $143 ? $144 : $145;
  $147 = HEAP32[$146>>2]|0;
  $15 = $147;
 }
 $148 = $15;
 $0 = $52;
 $149 = $0;
 $150 = ((($149)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = HEAP32[$149>>2]|0;
 $153 = $151;
 $154 = $152;
 $155 = (($153) - ($154))|0;
 $156 = (($155|0) / 4)&-1;
 $157 = $__a;
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEEC2EjjS5_($__v,$148,$156,$157);
 $158 = $48;
 $159 = $49;
 __THREW__ = 0;
 invoke_viii(467,($__v|0),($158|0),($159|0));
 $160 = __THREW__; __THREW__ = 0;
 $161 = $160&1;
 if ($161) {
  $164 = ___cxa_find_matching_catch()|0;
  $165 = tempRet0;
  $50 = $164;
  $51 = $165;
  __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED2Ev($__v);
  $166 = $50;
  $167 = $51;
  ___resumeException($166|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(309,($52|0),($__v|0));
 $162 = __THREW__; __THREW__ = 0;
 $163 = $162&1;
 if ($163) {
  $164 = ___cxa_find_matching_catch()|0;
  $165 = tempRet0;
  $50 = $164;
  $51 = $165;
  __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED2Ev($__v);
  $166 = $50;
  $167 = $51;
  ___resumeException($166|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEE18__construct_at_endEjRKS2_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 84|0;
 $18 = $this;
 $19 = $__n;
 $20 = $__x;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 12|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $__a = $27;
 while(1) {
  $28 = $__a;
  $29 = ((($21)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $0 = $30;
  $31 = $0;
  $32 = $20;
  $11 = $28;
  $12 = $31;
  $13 = $32;
  $33 = $11;
  $34 = $12;
  $35 = $13;
  $10 = $35;
  $36 = $10;
  ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
  $6 = $33;
  $7 = $34;
  $8 = $36;
  $37 = $6;
  $38 = $7;
  $39 = $8;
  $5 = $39;
  $40 = $5;
  $2 = $37;
  $3 = $38;
  $4 = $40;
  $41 = $3;
  $42 = $4;
  $1 = $42;
  $43 = $1;
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$41>>2] = $44;
  $45 = ((($21)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 4|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = (($48) + -1)|0;
  $19 = $49;
  $50 = $19;
  $51 = ($50>>>0)>(0);
  if (!($51)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 12)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 12)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 12)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 12)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(468,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(269,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__a$i$i$i$i$i = 0, $__annotator = 0, $__i$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 93|0;
 $__annotator = sp + 92|0;
 $19 = $this;
 $20 = $__n;
 $21 = $19;
 $18 = $21;
 $22 = $18;
 $23 = ((($22)) + 8|0);
 $17 = $23;
 $24 = $17;
 $16 = $24;
 $25 = $16;
 $__a = $25;
 while(1) {
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator,$21,1);
  $26 = $__a;
  $27 = ((($21)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $15 = $28;
  $29 = $15;
  $12 = $26;
  $13 = $29;
  $30 = $12;
  $31 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $30;
  $10 = $31;
  $32 = $9;
  $33 = $10;
  $7 = $32;
  $8 = $33;
  $34 = $8;
  $6 = $34;
  $35 = $6;
  $5 = $35;
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $3 = $37;
  $2 = $35;
  $38 = $2;
  $1 = $38;
  $39 = $1;
  $0 = $39;
  $40 = $0;
  $__a$i$i$i$i$i = $40;
  $__i$i$i$i$i$i = 0;
  while(1) {
   $41 = $__i$i$i$i$i$i;
   $42 = ($41>>>0)<(3);
   if (!($42)) {
    break;
   }
   $43 = $__i$i$i$i$i$i;
   $44 = $__a$i$i$i$i$i;
   $45 = (($44) + ($43<<2)|0);
   HEAP32[$45>>2] = 0;
   $46 = $__i$i$i$i$i$i;
   $47 = (($46) + 1)|0;
   $__i$i$i$i$i$i = $47;
  }
  $48 = ((($21)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 12|0);
  HEAP32[$48>>2] = $50;
  $51 = $20;
  $52 = (($51) + -1)|0;
  $20 = $52;
  __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $53 = $20;
  $54 = ($53>>>0)>(0);
  if (!($54)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__a$i$i$i$i$i = 0, $__i$i$i$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp;
 $15 = sp + 92|0;
 $19 = $this;
 $20 = $__n;
 $21 = $19;
 $18 = $21;
 $22 = $18;
 $23 = ((($22)) + 12|0);
 $17 = $23;
 $24 = $17;
 $16 = $24;
 $25 = $16;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $__a = $27;
 while(1) {
  $28 = $__a;
  $29 = ((($21)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $0 = $30;
  $31 = $0;
  $13 = $28;
  $14 = $31;
  $32 = $13;
  $33 = $14;
  ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
  $10 = $32;
  $11 = $33;
  $34 = $10;
  $35 = $11;
  $8 = $34;
  $9 = $35;
  $36 = $9;
  $7 = $36;
  $37 = $7;
  $6 = $37;
  $38 = $6;
  $5 = $38;
  $39 = $5;
  $4 = $39;
  $3 = $37;
  $40 = $3;
  $2 = $40;
  $41 = $2;
  $1 = $41;
  $42 = $1;
  $__a$i$i$i$i$i = $42;
  $__i$i$i$i$i$i = 0;
  while(1) {
   $43 = $__i$i$i$i$i$i;
   $44 = ($43>>>0)<(3);
   if (!($44)) {
    break;
   }
   $45 = $__i$i$i$i$i$i;
   $46 = $__a$i$i$i$i$i;
   $47 = (($46) + ($45<<2)|0);
   HEAP32[$47>>2] = 0;
   $48 = $__i$i$i$i$i$i;
   $49 = (($48) + 1)|0;
   $__i$i$i$i$i$i = $49;
  }
  $50 = ((($21)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 12|0);
  HEAP32[$50>>2] = $52;
  $53 = $20;
  $54 = (($53) + -1)|0;
  $20 = $54;
  $55 = $20;
  $56 = ($55>>>0)>(0);
  if (!($56)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5264;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 40|0);
 __ZNSt3__16vectorIPKcNS_9allocatorIS2_EEED2Ev($3);
 $4 = ((($1)) + 28|0);
 __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($4);
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 6;
}
function __ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 HEAP32[$agg$result>>2] = $5;
 $6 = ((($4)) + 28|0);
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 12)&-1;
 $15 = ((($agg$result)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$4>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 511]($4)|0);
 $20 = ((($agg$result)) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($4)) + 40|0);
 $0 = $21;
 $1 = 0;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<2)|0);
 $26 = ((($agg$result)) + 12|0);
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 32)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<5)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 32)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -32|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(469,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI12dx_vector4_tNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI12dx_vector4_tNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -32|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 32)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 32)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 32)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 32)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 32)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferI12dx_vector4_tRNS_9allocatorIS1_EEEC2EjjS4_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(470,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferI12dx_vector4_tRNS_9allocatorIS1_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(471,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferI12dx_vector4_tRNS_9allocatorIS1_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferI12dx_vector4_tRNS_9allocatorIS1_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 32)&-1;
 $35 = (($22) + ($34<<5)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<5)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 32)&-1;
 $52 = (($43) + ($51<<5)|0);
 __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;HEAP32[$27+16>>2]=0|0;HEAP32[$27+20>>2]=0|0;HEAP32[$27+24>>2]=0|0;HEAP32[$27+28>>2]=0|0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 32|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 134217727;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferI12dx_vector4_tRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<5;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<5)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<5)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI12dx_vector4_tRNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;HEAP32[$29+16>>2]=0|0;HEAP32[$29+20>>2]=0|0;HEAP32[$29+24>>2]=0|0;HEAP32[$29+28>>2]=0|0;
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 32|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 32)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<5)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<5;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 32)&-1;
 __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI12dx_vector4_tRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -32|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 32)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 32)&-1;
 $39 = (($26) + ($38<<5)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 32)&-1;
 $51 = (($42) + ($50<<5)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 32)&-1;
 $67 = (($54) + ($66<<5)|0);
 __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 32)&-1;
 $39 = (($26) + ($38<<5)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 32)&-1;
 $55 = (($42) + ($54<<5)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<5)|0);
 __ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5316;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 28|0);
 __ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEED2Ev($3);
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 32)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 5;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 HEAP32[$agg$result>>2] = $5;
 $6 = ((($4)) + 28|0);
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 32)&-1;
 $15 = ((($agg$result)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$4>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 511]($4)|0);
 $20 = ((($agg$result)) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($4)) + 28|0);
 $0 = $21;
 $1 = 0;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<5)|0);
 $26 = ((($agg$result)) + 12|0);
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 24)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + (($39*24)|0)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 24)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -24|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(472,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI12dx_vector3_tNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI12dx_vector3_tNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -24|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 24)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 24)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 24)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 24)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 24)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferI12dx_vector3_tRNS_9allocatorIS1_EEEC2EjjS4_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(473,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferI12dx_vector3_tRNS_9allocatorIS1_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(474,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferI12dx_vector3_tRNS_9allocatorIS1_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferI12dx_vector3_tRNS_9allocatorIS1_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 24)&-1;
 $35 = (($22) + (($34*24)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*24)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 24)&-1;
 $52 = (($43) + (($51*24)|0)|0);
 __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;HEAP32[$27+16>>2]=0|0;HEAP32[$27+20>>2]=0|0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 24|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 178956970;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferI12dx_vector3_tRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = ($51*24)|0;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + (($57*24)|0)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + (($62*24)|0)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI12dx_vector3_tRNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;HEAP32[$29+16>>2]=0|0;HEAP32[$29+20>>2]=0|0;
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 24|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 24)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + (($51*24)|0)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = ($56*24)|0;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 24)&-1;
 __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI12dx_vector3_tRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -24|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 24)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 24)&-1;
 $39 = (($26) + (($38*24)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 24)&-1;
 $51 = (($42) + (($50*24)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 24)&-1;
 $67 = (($54) + (($66*24)|0)|0);
 __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 24)&-1;
 $39 = (($26) + (($38*24)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 24)&-1;
 $55 = (($42) + (($54*24)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*24)|0)|0);
 __ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5368;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 28|0);
 __ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEED2Ev($3);
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 24)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 HEAP32[$agg$result>>2] = $5;
 $6 = ((($4)) + 28|0);
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 24)&-1;
 $15 = ((($agg$result)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$4>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 511]($4)|0);
 $20 = ((($agg$result)) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($4)) + 28|0);
 $0 = $21;
 $1 = 0;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + (($23*24)|0)|0);
 $26 = ((($agg$result)) + 12|0);
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 16)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<4)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 16)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -16|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(475,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI12dx_vector2_tNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI12dx_vector2_tNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -16|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 16)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 16)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 16)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 16)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 16)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferI12dx_vector2_tRNS_9allocatorIS1_EEEC2EjjS4_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(476,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferI12dx_vector2_tRNS_9allocatorIS1_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(477,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferI12dx_vector2_tRNS_9allocatorIS1_EEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferI12dx_vector2_tRNS_9allocatorIS1_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 16)&-1;
 $35 = (($22) + ($34<<4)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<4)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 16)&-1;
 $52 = (($43) + ($51<<4)|0);
 __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 16|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 268435455;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferI12dx_vector2_tRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<4;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<4)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<4)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI12dx_vector2_tRNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;HEAP32[$29+12>>2]=0|0;
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 16|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 16)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<4)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<4;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 16)&-1;
 __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI12dx_vector2_tRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -16|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 16)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5420;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 28|0);
 __ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEED2Ev($3);
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 16)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 HEAP32[$agg$result>>2] = $5;
 $6 = ((($4)) + 28|0);
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 16)&-1;
 $15 = ((($agg$result)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$4>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 511]($4)|0);
 $20 = ((($agg$result)) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($4)) + 28|0);
 $0 = $21;
 $1 = 0;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<4)|0);
 $26 = ((($agg$result)) + 12|0);
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 8)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<3)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 8)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -8|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(478,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 8)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 8)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 8)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 8)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 8)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(479,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(480,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (($22) + ($34<<3)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<3)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (($43) + ($51<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  HEAPF64[$27>>3] = 0.0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<3;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<3)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<3)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  HEAPF64[$29>>3] = 0.0;
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 8|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 8)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<3)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<3;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 8)&-1;
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -8|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 8)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 8)&-1;
 $51 = (($42) + ($50<<3)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 8)&-1;
 $67 = (($54) + ($66<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5472;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 28|0);
 __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($3);
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 8)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 HEAP32[$agg$result>>2] = $5;
 $6 = ((($4)) + 28|0);
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 8)&-1;
 $15 = ((($agg$result)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$4>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 511]($4)|0);
 $20 = ((($agg$result)) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($4)) + 28|0);
 $0 = $21;
 $1 = 0;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<3)|0);
 $26 = ((($agg$result)) + 12|0);
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 4)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$20>>2]|0;
 $39 = $19;
 $40 = (($38) + ($39<<2)|0);
 $15 = $20;
 $16 = $40;
 $41 = $15;
 $14 = $41;
 $42 = $14;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($48|0) / 4)&-1;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $41;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -4|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(481,($41|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 84|0;
 $18 = sp + 72|0;
 $__v = sp + 12|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = ((($31)) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($30)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 4)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = ((($45)) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 4)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 4)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  $92 = $5;
  $93 = $4;
  $94 = $91 ? $92 : $93;
  $95 = HEAP32[$94>>2]|0;
  $15 = $95;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 4)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(482,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(483,($30|0),($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch()|0;
  $112 = tempRet0;
  $28 = $111;
  $29 = $112;
  __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  $113 = $28;
  $114 = $29;
  ___resumeException($113|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 57|0;
 $__annotator = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 8|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $__a = $18;
 while(1) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$14,1);
  $19 = $__a;
  $20 = ((($14)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $5 = $19;
  $6 = $22;
  $23 = $5;
  $24 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $23;
  $3 = $24;
  $25 = $2;
  $26 = $3;
  $0 = $25;
  $1 = $26;
  $27 = $1;
  HEAP32[$27>>2] = 0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 4|0);
  HEAP32[$28>>2] = $30;
  $31 = $13;
  $32 = (($31) + -1)|0;
  $13 = $32;
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $33 = $13;
  $34 = ($33>>>0)>(0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 56|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $10 = $16;
 $17 = $10;
 $9 = $17;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $__a = $20;
 while(1) {
  $21 = $__a;
  $22 = ((($14)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $24 = $0;
  $6 = $21;
  $7 = $24;
  $25 = $6;
  $26 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $25;
  $4 = $26;
  $27 = $3;
  $28 = $4;
  $1 = $27;
  $2 = $28;
  $29 = $2;
  HEAP32[$29>>2] = 0;
  $30 = ((($14)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 4|0);
  HEAP32[$30>>2] = $32;
  $33 = $13;
  $34 = (($33) + -1)|0;
  $13 = $34;
  $35 = $13;
  $36 = ($35>>>0)>(0);
  if (!($36)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5524;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 28|0);
 __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($3);
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $0 = $3;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$4>>2]|0;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 4)&-1;
 STACKTOP = sp;return ($11|0);
}
function __ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 HEAP32[$agg$result>>2] = $5;
 $6 = ((($4)) + 28|0);
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 4)&-1;
 $15 = ((($agg$result)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$4>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 511]($4)|0);
 $20 = ((($agg$result)) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($4)) + 28|0);
 $0 = $21;
 $1 = 0;
 $22 = $0;
 $23 = $1;
 $24 = HEAP32[$22>>2]|0;
 $25 = (($24) + ($23<<2)|0);
 $26 = ((($agg$result)) + 12|0);
 HEAP32[$26>>2] = $25;
 STACKTOP = sp;return;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5576;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 28|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 7;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 4|0);
 HEAP32[$agg$result>>2] = $17;
 $18 = ((($agg$result)) + 4|0);
 HEAP32[$18>>2] = 1;
 $19 = HEAP32[$16>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 511]($16)|0);
 $23 = ((($agg$result)) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($16)) + 28|0);
 $14 = $24;
 $25 = $14;
 $13 = $25;
 $26 = $13;
 $12 = $26;
 $27 = $12;
 $11 = $27;
 $28 = $11;
 $10 = $28;
 $29 = $10;
 $9 = $29;
 $30 = $9;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 1;
 $34 = ($33|0)!=(0);
 if ($34) {
  $3 = $27;
  $35 = $3;
  $2 = $35;
  $36 = $2;
  $1 = $36;
  $37 = $1;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $46 = $39;
  $0 = $46;
  $47 = $0;
  $48 = ((($agg$result)) + 12|0);
  HEAP32[$48>>2] = $47;
  STACKTOP = sp;return;
 } else {
  $8 = $27;
  $40 = $8;
  $7 = $40;
  $41 = $7;
  $6 = $41;
  $42 = $6;
  $43 = ((($42)) + 4|0);
  $5 = $43;
  $44 = $5;
  $4 = $44;
  $45 = $4;
  $46 = $45;
  $0 = $46;
  $47 = $0;
  $48 = ((($agg$result)) + 12|0);
  HEAP32[$48>>2] = $47;
  STACKTOP = sp;return;
 }
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5628;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 28|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 6;
}
function __ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = ((($16)) + 4|0);
 HEAP32[$agg$result>>2] = $17;
 $18 = ((($agg$result)) + 4|0);
 HEAP32[$18>>2] = 1;
 $19 = HEAP32[$16>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 511]($16)|0);
 $23 = ((($agg$result)) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($16)) + 28|0);
 $14 = $24;
 $25 = $14;
 $13 = $25;
 $26 = $13;
 $12 = $26;
 $27 = $12;
 $11 = $27;
 $28 = $11;
 $10 = $28;
 $29 = $10;
 $9 = $29;
 $30 = $9;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 1;
 $34 = ($33|0)!=(0);
 if ($34) {
  $3 = $27;
  $35 = $3;
  $2 = $35;
  $36 = $2;
  $1 = $36;
  $37 = $1;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $46 = $39;
  $0 = $46;
  $47 = $0;
  $48 = ((($agg$result)) + 12|0);
  HEAP32[$48>>2] = $47;
  STACKTOP = sp;return;
 } else {
  $8 = $27;
  $40 = $8;
  $7 = $40;
  $41 = $7;
  $6 = $41;
  $42 = $6;
  $43 = ((($42)) + 1|0);
  $5 = $43;
  $44 = $5;
  $4 = $44;
  $45 = $4;
  $46 = $45;
  $0 = $46;
  $47 = $0;
  $48 = ((($agg$result)) + 12|0);
  HEAP32[$48>>2] = $47;
  STACKTOP = sp;return;
 }
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 5;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$agg$result>>2] = $2;
 $3 = ((($agg$result)) + 4|0);
 HEAP32[$3>>2] = 1;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($1)|0);
 $8 = ((($agg$result)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 32|0);
 $10 = ((($agg$result)) + 12|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$agg$result>>2] = $2;
 $3 = ((($agg$result)) + 4|0);
 HEAP32[$3>>2] = 1;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($1)|0);
 $8 = ((($agg$result)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 32|0);
 $10 = ((($agg$result)) + 12|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$agg$result>>2] = $2;
 $3 = ((($agg$result)) + 4|0);
 HEAP32[$3>>2] = 1;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($1)|0);
 $8 = ((($agg$result)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 32|0);
 $10 = ((($agg$result)) + 12|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$agg$result>>2] = $2;
 $3 = ((($agg$result)) + 4|0);
 HEAP32[$3>>2] = 1;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($1)|0);
 $8 = ((($agg$result)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 32|0);
 $10 = ((($agg$result)) + 12|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx11c_dx_cell_tD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EE6lengthEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EE4typeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EE4cellEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$agg$result>>2] = $2;
 $3 = ((($agg$result)) + 4|0);
 HEAP32[$3>>2] = 1;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($1)|0);
 $8 = ((($agg$result)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 28|0);
 $10 = ((($agg$result)) + 12|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN2dx16c_dx_node_mini_tD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN2dx16c_dx_node_mini_tD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init518() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(12022);
 return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ti;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___strdup($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($1|0),(12023|0));
 $2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($2|0),(12028|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(12033);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(12038);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(12050);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(12064);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(12070);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(12085);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(12089);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(12102);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(12107);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(12121);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(12127);
 $3 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($3|0),(12134|0));
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(12146|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($5|0),4,(12179|0));
 $6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($6|0),(12192|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(12208);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(12238);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(12275);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(12314);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(12345);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(12385);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(12414);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(12452);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(12482);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(12521);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(12553);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(12586);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(12619);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(12653);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(12686);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(12720);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(12751);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(12783);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init555();
 return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 255;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $2 = $0;
 $3 = -32768 << 16 >> 16;
 $4 = 32767 << 16 >> 16;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 65535;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (632|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (640|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (648|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (656|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (664|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (672|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (680|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (688|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (696|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (704|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (712|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (720|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (728|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (736|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (760|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (320|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (992|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (976|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (968|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (960|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (952|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (944|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (936|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (920|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (928|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (912|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (904|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (896|0);
}
function ___cxx_global_var_init555() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(13337);
 return;
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[6448>>2]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((13688|0),(13717|0),1164,(13792|0));
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((13813|0),(13836|0),303,(13792|0));
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((6192|0),(484|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[6188>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(13911,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 511]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (5996);
   ___cxa_throw(($7|0),(784|0),(240|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13960|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(485,(13975|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(485,(14015|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(486);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(487)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[1496]|0;HEAP32[1496] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6008>>2]|0;HEAP32[6008>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv116__enum_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 return ($1|0);
}
function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,816,832,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L34: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L34;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L34;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 511]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,816,864,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[6196>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(14304,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[800>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 511](800,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[6196>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 511]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(14218,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[6196>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(14263,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(14342,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((6188|0),(488|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(14065,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[6188>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(14115,$vararg_buffer);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((14168|0),(13717|0),1175,(14197|0));
 // unreachable;
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (14363 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 14451;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 14451;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 14451;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6200>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 6460;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (16255 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (18094 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (6464 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($426, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($426) + -10)|0;
           $502 = (6464 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($426|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $426;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($426|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (6464 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $426;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $426;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $603 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $604 = ($603|0)==($a$5$i$lcssa|0);
          if (!($604)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $603;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($603) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $603;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (16264 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (16264 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (16521 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (16264 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (16264 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (16264 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (16264 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (16264 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (16264 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (16264 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (16264 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $95 = ($94|0)==($85|0);
        $97 = ($96|0)==($86|0);
        $98 = $95 & $97;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $94;$101 = $96;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($113|0)==($85|0);
     $116 = ($115|0)==($86|0);
     $117 = $114 & $116;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $118 = $156;$120 = $155;
     }
    } else {
     $118 = $115;$120 = $113;
    }
    $119 = ($118>>>0)<(1048576);
    $121 = ($120>>>0)<(0);
    $122 = ($118|0)==(1048576);
    $123 = $122 & $121;
    $124 = $119 | $123;
    if ($124) {
     $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$151 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$151 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $150;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 6496 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (6244 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[6456>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[6456>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((6228)|0));
   $$012 = HEAP32[(6224)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((6228)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 511]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 511]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 511]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0;
 var $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0;
 var $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0;
 var $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0;
 var $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0;
 var $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $333 = $4;
 } else {
  $333 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0104 = 0;$p$0109 = $fmt;$pos$0108 = 0;$s$0107 = 0;$wcs$0103 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0109>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0109)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0109)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0109)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0109)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp694 = (($93) + -48)|0;
        $isdigit795 = ($isdigittmp694>>>0)<(10);
        if ($isdigit795) {
         $97 = $93;$p$396 = $p$2;$width$097 = 0;
         while(1) {
          $94 = ($width$097*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$396)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp6 = (($100) + -48)|0;
          $isdigit7 = ($isdigittmp6>>>0)<(10);
          if ($isdigit7) {
           $97 = $100;$p$396 = $98;$width$097 = $96;
          } else {
           $$lcssa38 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa38<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre168 = HEAP8[$104>>0]|0;
         $107 = $$pre168;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0107;$wcs$1 = $wcs$0103;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$9 = $109 ? $110 : $105;
         $$10 = $109 ? -2 : -1;
         $p$5 = $$9;$size$0 = $$10;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$11 = $112 ? $113 : $105;
         $$12 = $112 ? 3 : 1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
         label = 152;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0108;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0108;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0108|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0108&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0108&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0108;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         $$pre170 = HEAP32[$7>>2]|0;
         if ($140) {
          $144 = $$pre170;
         } else {
          $141 = ((($$pre170)) + -1|0);
          HEAP32[$7>>2] = $141;
          $144 = $141;
         }
         $142 = HEAP32[$9>>2]|0;
         $143 = HEAP32[$10>>2]|0;
         $145 = $144;
         $146 = $143;
         $147 = (($142) + ($pos$0108))|0;
         $148 = (($147) + ($145))|0;
         $149 = (($148) - ($146))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8>>2]|0;
         $156 = $$pre172;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L67: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L69: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi182Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi182Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre180 = $invert$0 ^ 1;
             $$pre181 = $$pre180&255;
             $$pre$phi182Z2D = $$pre181;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L80: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
               label = 152;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L69;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L80;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0100 = $183;
                while(1) {
                 $184 = (($c$0100) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi182Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0100 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi182Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L88: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $199;
              label = 152;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L94: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph20 = $i$0$ph;
             while(1) {
              L98: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L94;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                label = 152;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L98;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph20;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph20) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph20<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph20 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
              label = 152;
              break L6;
             }
             $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
             label = 152;
             break L6;
            } else {
             $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = 0;
              label = 152;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
                break L88;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor16 = $k$1$ph << 1;
              $244 = $factor16 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$2$ph;$wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $156;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
               break L88;
              }
              $$pre176 = HEAP32[$8>>2]|0;
              $265 = $$pre176;
             }
            } else {
             $250 = $156;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
               break L88;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre174 = HEAP32[$8>>2]|0;
              $250 = $$pre174;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          $$pre178 = HEAP32[$7>>2]|0;
          if ($276) {
           $280 = $$pre178;
          } else {
           $277 = ((($$pre178)) + -1|0);
           HEAP32[$7>>2] = $277;
           $280 = $277;
          }
          $278 = HEAP32[$9>>2]|0;
          $279 = HEAP32[$10>>2]|0;
          $281 = $280;
          $282 = $279;
          $283 = (($281) - ($282))|0;
          $284 = (($283) + ($278))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond8 = $286 | $$not;
          if (!($or$cond8)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$4;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$3;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          } else {
           $287 = ($wcs$4|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$4) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$3|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
            break L67;
           }
           $290 = (($s$3) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 134;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 134;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 134;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 134;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $310 = (+___floatscan($f,$$size$0,0));
          $311 = HEAP32[$9>>2]|0;
          $312 = HEAP32[$7>>2]|0;
          $313 = HEAP32[$10>>2]|0;
          $314 = $312;
          $315 = $313;
          $316 = (($315) - ($314))|0;
          $317 = ($311|0)==($316|0);
          if ($317) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $318 = ($dest$0|0)==(0|0);
          if ($318) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $319 = $310;
            HEAPF32[$dest$0>>2] = $319;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         }
         }
        } while(0);
        L168: do {
         if ((label|0) == 134) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = $294;
          $297 = $295;
          $298 = (($297) - ($296))|0;
          $299 = ($293|0)==($298|0);
          if ($299) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$|0)==(112);
          $301 = ($dest$0|0)!=(0|0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0>>2] = $302;
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0|0)==(0|0);
          if ($303) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $304 = $291&255;
            HEAP8[$dest$0>>0] = $304;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case -1:  {
            $305 = $291&65535;
            HEAP16[$dest$0>>1] = $305;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 3:  {
            $306 = $dest$0;
            $307 = $306;
            HEAP32[$307>>2] = $291;
            $308 = (($306) + 4)|0;
            $309 = $308;
            HEAP32[$309>>2] = $292;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
           }
           }
          }
         }
        } while(0);
        $320 = HEAP32[$9>>2]|0;
        $321 = HEAP32[$7>>2]|0;
        $322 = HEAP32[$10>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($320) + ($pos$1))|0;
        $326 = (($325) + ($323))|0;
        $327 = (($326) - ($324))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $328 = $not$&1;
        $matches$0$ = (($328) + ($matches$0104))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $327;$s$5 = $s$4;$wcs$6 = $wcs$5;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0109) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa384 = $61;$matches$0104$lcssa = $matches$0104;$s$0107$lcssa = $s$0107;$wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = (($pos$0108) + 1)|0;
      $matches$1 = $matches$0104;$p$11 = $51;$pos$2 = $69;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      $$pre = HEAP32[$7>>2]|0;
      if ($36) {
       $40 = $$pre;
      } else {
       $37 = ((($$pre)) + -1|0);
       HEAP32[$7>>2] = $37;
       $40 = $37;
      }
      $38 = HEAP32[$9>>2]|0;
      $39 = HEAP32[$10>>2]|0;
      $41 = $40;
      $42 = $39;
      $43 = (($38) + ($pos$0108))|0;
      $44 = (($43) + ($41))|0;
      $45 = (($44) - ($42))|0;
      $matches$1 = $matches$0104;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     }
    } while(0);
    $329 = ((($p$11)) + 1|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = ($330<<24>>24)==(0);
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;$matches$0104 = $matches$1;$p$0109 = $329;$pos$0108 = $pos$2;$s$0107 = $s$5;$wcs$0103 = $wcs$6;
    }
   }
   if ((label|0) == 21) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa384|0)>(-1);
    $68 = ($matches$0104$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$7 = $s$0107$lcssa;$wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   }
   else if ((label|0) == 152) {
    $$old4 = ($matches$0104376|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0400;$s$7 = $s$6;$wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;$matches$2 = $matches$0104376;$s$8 = $s$6;$wcs$9 = $wcs$7;
    }
   }
   if ((label|0) == 153) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2|0)==(0);
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$9);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $334 = ($333|0)==(0);
 if (!($334)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=6500; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 489;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 511]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[6200>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((490|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 265;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 511]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 511]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = ((($$0)) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$014 = $n;$$023 = $s;$$05 = $d;
  while(1) {
   $1 = (($$014) + -1)|0;
   $2 = ((($$023)) + 4|0);
   $3 = HEAP32[$$023>>2]|0;
   $4 = ((($$05)) + 4|0);
   HEAP32[$$05>>2] = $3;
   $5 = ($1|0)==(0);
   if ($5) {
    break;
   } else {
    $$014 = $1;$$023 = $2;$$05 = $4;
   }
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = ((($$025)) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = ((($$07)) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 return ($d|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 511]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 511]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $65 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((17570 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 18050;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 18050;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 18050;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 18050 : (18052);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (18051);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 18050;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 18050;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 18060;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 18067;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (18068) : (18073);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (18070);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (18034 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$480 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$480 = $$pre179$i;
      }
      $481 = ($480|0)<(0);
      $$31$i = $481 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $491 = ($490|0)>(29);
        $492 = $491 ? 29 : $490;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(18102,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(18102,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 18086 : 18090;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 18094 : 18098;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 18050;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 18050;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (18034 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 18050;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (18050 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 18050;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $792 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792|0)<(10);
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[6836>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (6876 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (6876 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[6836>>2] = $22;
     } else {
      $23 = HEAP32[(6852)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(6844)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (6876 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (6876 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[6836>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(6852)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(6844)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(6856)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (6876 + ($92<<2)|0);
      $94 = HEAP32[6836>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[6836>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (6876 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (6876 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(6852)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(6844)>>2] = $81;
     HEAP32[(6856)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(6840)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (7140 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(6852)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (7140 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(6840)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(6840)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(6852)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(6852)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(6852)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(6844)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(6856)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (6876 + ($229<<2)|0);
       $231 = HEAP32[6836>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[6836>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (6876 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (6876 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(6852)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(6844)>>2] = $rsize$0$i$lcssa;
      HEAP32[(6856)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(6840)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (7140 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (7140 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(6844)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(6852)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (7140 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(6840)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(6840)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(6852)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(6852)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(6852)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (6876 + ($424<<2)|0);
          $426 = HEAP32[6836>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[6836>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (6876 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (6876 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(6852)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (7140 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(6840)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(6840)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(6852)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(6852)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(6844)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(6856)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(6856)>>2] = $514;
   HEAP32[(6844)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(6844)>>2] = 0;
   HEAP32[(6856)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(6848)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(6848)>>2] = $528;
  $529 = HEAP32[(6860)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(6860)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[7308>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(7316)>>2] = $538;
    HEAP32[(7312)>>2] = $538;
    HEAP32[(7320)>>2] = -1;
    HEAP32[(7324)>>2] = -1;
    HEAP32[(7328)>>2] = 0;
    HEAP32[(7280)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[7308>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(7316)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(7276)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(7268)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(7280)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(6860)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (7284);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(6848)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(7312)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(7268)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(7276)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(7316)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(7280)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(7280)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(7268)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(7268)>>2] = $632;
  $633 = HEAP32[(7272)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(7272)>>2] = $632;
  }
  $635 = HEAP32[(6860)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(6852)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(6852)>>2] = $tbase$255$i;
    }
    HEAP32[(7284)>>2] = $tbase$255$i;
    HEAP32[(7288)>>2] = $tsize$254$i;
    HEAP32[(7296)>>2] = 0;
    $640 = HEAP32[7308>>2]|0;
    HEAP32[(6872)>>2] = $640;
    HEAP32[(6868)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (6876 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (6876 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (6876 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(6860)>>2] = $654;
    HEAP32[(6848)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(7324)>>2]|0;
    HEAP32[(6864)>>2] = $659;
   } else {
    $sp$084$i = (7284);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(6848)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(6860)>>2] = $684;
       HEAP32[(6848)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(7324)>>2]|0;
       HEAP32[(6864)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(6852)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(6852)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (7284);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (7284);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(6848)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(6848)>>2] = $730;
        HEAP32[(6860)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(6856)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(6844)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(6844)>>2] = $736;
         HEAP32[(6856)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (6876 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[6836>>2]|0;
            $763 = $762 & $761;
            HEAP32[6836>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (7140 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(6840)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(6840)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(6852)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(6852)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(6852)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (6876 + ($840<<2)|0);
         $842 = HEAP32[6836>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[6836>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (6876 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (6876 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(6852)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (7140 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(6840)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(6840)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(6852)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(6852)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (7284);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(6860)>>2] = $953;
    HEAP32[(6848)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(7324)>>2]|0;
    HEAP32[(6864)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(7284)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(7284)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(7284)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(7284)+12>>2]|0;
    HEAP32[(7284)>>2] = $tbase$255$i;
    HEAP32[(7288)>>2] = $tsize$254$i;
    HEAP32[(7296)>>2] = 0;
    HEAP32[(7292)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (6876 + ($977<<2)|0);
      $979 = HEAP32[6836>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[6836>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (6876 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (6876 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(6852)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (7140 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(6840)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(6840)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(6852)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(6852)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(6848)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(6848)>>2] = $1062;
   $1063 = HEAP32[(6860)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(6860)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(6852)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(6856)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(6844)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (6876 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[6836>>2]|0;
     $36 = $35 & $34;
     HEAP32[6836>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (7140 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(6840)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(6840)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(6852)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(6852)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(6852)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(6860)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(6848)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(6848)>>2] = $120;
   HEAP32[(6860)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(6856)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(6856)>>2] = 0;
   HEAP32[(6844)>>2] = 0;
   return;
  }
  $125 = HEAP32[(6856)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(6844)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(6844)>>2] = $128;
   HEAP32[(6856)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (6876 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(6852)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[6836>>2]|0;
     $152 = $151 & $150;
     HEAP32[6836>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(6852)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(6852)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(6852)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (7140 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(6840)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(6840)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(6852)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(6852)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(6852)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(6856)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(6844)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (6876 + ($233<<2)|0);
  $235 = HEAP32[6836>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[6836>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (6876 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (6876 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(6852)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (7140 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(6840)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(6840)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(6852)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(6852)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(6868)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(6868)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (7292);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(6868)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(6852)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(7316)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(6860)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(6848)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(6860)>>2] = $36;
  HEAP32[(6848)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(6856)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(6844)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(6844)>>2] = $storemerge21;
  HEAP32[(6856)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (6876 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[6836>>2]|0;
    $88 = $87 & $86;
    HEAP32[6836>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (7140 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(6840)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(6840)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(6852)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(6852)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(6852)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(6852)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(6856)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(6844)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (6876 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[6836>>2]|0;
     $32 = $31 & $30;
     HEAP32[6836>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (7140 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(6840)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(6840)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(6852)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(6852)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(6852)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(6852)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(6860)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(6848)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(6848)>>2] = $115;
   HEAP32[(6860)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(6856)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(6856)>>2] = 0;
   HEAP32[(6844)>>2] = 0;
   return;
  }
  $120 = HEAP32[(6856)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(6844)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(6844)>>2] = $123;
   HEAP32[(6856)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (6876 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[6836>>2]|0;
     $146 = $145 & $144;
     HEAP32[6836>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (7140 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(6840)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(6840)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(6852)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(6852)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(6852)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(6856)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(6844)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (6876 + ($224<<2)|0);
  $226 = HEAP32[6836>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[6836>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (6876 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (6876 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(6852)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (7140 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(6840)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(6840)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(6852)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(6852)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__str)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 } else {
  $9 = ((($__str)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($__str)) + 1|0);
  $12 = $2 ? $11 : $10;
  $13 = (($12) + ($__pos)|0);
  $14 = (($7) - ($__pos))|0;
  $15 = ($14>>>0)<($__n>>>0);
  $16 = $15 ? $14 : $__n;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$13,$16);
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($15)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($15) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1)|0);
  _memcpy(($26|0),($27|0),($25|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = ((($this)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31)|0);
 HEAP8[$33>>0] = 0;
 return;
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($this,$__pos1,$__n1,$__s,$__n2) {
 $this = $this|0;
 $__pos1 = $__pos1|0;
 $__n1 = $__n1|0;
 $__s = $__s|0;
 $__n2 = $__n2|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos1>>>0);
 $9 = ($__n2|0)==(-1);
 $or$cond = $9 | $8;
 if ($or$cond) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 $10 = (($7) - ($__pos1))|0;
 $11 = ($10>>>0)<($__n1>>>0);
 $12 = $11 ? $10 : $__n1;
 if ($2) {
  $15 = ((($this)) + 1|0);
  $17 = $15;
 } else {
  $13 = ((($this)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $16 = (($17) + ($__pos1)|0);
 $18 = ($12>>>0)>($__n2>>>0);
 $19 = $18 ? $__n2 : $12;
 $20 = (_memcmp($16,$__s,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ($12>>>0)<($__n2>>>0);
  if ($22) {
   $__r$0 = -1;
  } else {
   $$ = $18&1;
   return ($$|0);
  }
 } else {
  $__r$0 = $20;
 }
 return ($__r$0|0);
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 __THREW__ = 0;
 $1 = (invoke_iiiiii(491,($this|0),0,-1,($__s|0),($0|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 4|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 4|0);
  $21 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $21 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  $14 = (($12) + 4)|0;
  $15 = $14 & -4;
  $16 = $13 ? 2 : $15;
  $18 = $16;
 } else {
  $18 = 1073741807;
 }
 $17 = $18 << 2;
 $19 = (__Znwj($17)|0);
 $20 = ($__n_copy|0)==(0);
 if (!($20)) {
  (_wmemcpy($19,$21,$__n_copy)|0);
 }
 $22 = ($__n_add|0)==(0);
 if (!($22)) {
  $23 = (($19) + ($__n_copy<<2)|0);
  (_wmemcpy($23,$__p_new_stuff,$__n_add)|0);
 }
 $24 = (($__old_sz) - ($__n_del))|0;
 $25 = ($24|0)==($__n_copy|0);
 if (!($25)) {
  $26 = (($24) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $27 = (($19) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $28 = (($21) + ($$sum1<<2)|0);
  (_wmemcpy($27,$28,$26)|0);
 }
 $29 = ($__old_cap|0)==(1);
 if (!($29)) {
  __ZdlPv($21);
 }
 $30 = ((($this)) + 8|0);
 HEAP32[$30>>2] = $19;
 $31 = $18 | 1;
 HEAP32[$this>>2] = $31;
 $32 = (($24) + ($__n_add))|0;
 $33 = ((($this)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = (($19) + ($32<<2)|0);
 HEAP32[$34>>2] = 0;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_iiiddi(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=a5|0;
  return FUNCTION_TABLE_iiiddi[index&511](a1|0,a2|0,+a3,+a4,a5|0)|0;
}


function dynCall_iiidi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0;
  return FUNCTION_TABLE_iiidi[index&511](a1|0,a2|0,+a3,a4|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_iiidd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4;
  return FUNCTION_TABLE_iiidd[index&511](a1|0,a2|0,+a3,+a4)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_iiiddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5;
  return FUNCTION_TABLE_iiiddd[index&511](a1|0,a2|0,+a3,+a4,+a5)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_iidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  return FUNCTION_TABLE_iidddd[index&511](a1|0,+a2,+a3,+a4,+a5)|0;
}


function dynCall_iidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  return FUNCTION_TABLE_iidd[index&511](a1|0,+a2,+a3)|0;
}


function dynCall_iidddi(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=a5|0;
  return FUNCTION_TABLE_iidddi[index&511](a1|0,+a2,+a3,+a4,a5|0)|0;
}


function dynCall_iidi(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0;
  return FUNCTION_TABLE_iidi[index&511](a1|0,+a2,a3|0)|0;
}


function dynCall_iiiddddi(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=a7|0;
  return FUNCTION_TABLE_iiiddddi[index&511](a1|0,a2|0,+a3,+a4,+a5,+a6,a7|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiidddi(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=a6|0;
  return FUNCTION_TABLE_iiidddi[index&511](a1|0,a2|0,+a3,+a4,+a5,a6|0)|0;
}


function dynCall_iiidddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  return FUNCTION_TABLE_iiidddd[index&511](a1|0,a2|0,+a3,+a4,+a5,+a6)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&511](a1|0,a2|0,+a3)|0;
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&511](a1|0);
}


function dynCall_iid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return FUNCTION_TABLE_iid[index&511](a1|0,+a2)|0;
}


function dynCall_iiddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  return FUNCTION_TABLE_iiddd[index&511](a1|0,+a2,+a3,+a4)|0;
}


function dynCall_iiddddi(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=a6|0;
  return FUNCTION_TABLE_iiddddi[index&511](a1|0,+a2,+a3,+a4,+a5,a6|0)|0;
}


function dynCall_iiddi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=a4|0;
  return FUNCTION_TABLE_iiddi[index&511](a1|0,+a2,+a3,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&511](a1|0,a2|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_d(index) {
  index = index|0;
  
  return +FUNCTION_TABLE_d[index&511]();
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&511](a1|0,a2|0,+a3);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = p4|0; nullFunc_iiiddi(1);return 0;
}
function b2(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0; nullFunc_iiidi(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function __embind_finalize_value_array__wrapper(p0) {
 p0 = p0|0; __embind_finalize_value_array(p0|0);
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3; nullFunc_iiidd(4);return 0;
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function b6(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_iiiddd(6);return 0;
}
function b7(p0) {
 p0 = p0|0; nullFunc_ii(7);return 0;
}
function b8(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_iidddd(8);return 0;
}
function b9(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_iidd(9);return 0;
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = p4|0; nullFunc_iidddi(10);return 0;
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = p2|0; nullFunc_iidi(11);return 0;
}
function b12(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = p6|0; nullFunc_iiiddddi(12);return 0;
}
function b13(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(13);return 0;
}
function b14(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(14);return 0;
}
function b15(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = p5|0; nullFunc_iiidddi(15);return 0;
}
function b16(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_iiidddd(16);return 0;
}
function b17(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(17);return +0;
}
function b18(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(18);return 0;
}
function b19(p0) {
 p0 = p0|0; nullFunc_di(19);return +0;
}
function b20(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_iid(20);return 0;
}
function b21(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_iiddd(21);return 0;
}
function b22(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = p5|0; nullFunc_iiddddi(22);return 0;
}
function b23(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = p3|0; nullFunc_iiddi(23);return 0;
}
function b24(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(24);return 0;
}
function b25(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_dii(25);return +0;
}
function b26(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(26);
}
function __embind_register_value_array__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; __embind_register_value_array(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function b27() {
 ; nullFunc_d(27);return +0;
}
function b28() {
 ; nullFunc_i(28);return 0;
}
function b29(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(29);return 0;
}
function b30(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(30);
}
function b31() {
 ; nullFunc_v(31);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b32(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(32);
}
function b33(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(33);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,__ZN2mp3xml9xml_colorC2Ehhhh,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_iiiddi = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN10emscripten8internal7InvokerIbJiddiEE6invokeEPFbiddiEiddi,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiidi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal7InvokerIbJidiEE6invokeEPFbidiEidi,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8tinyxml27XMLNodeD2Ev,__ZN8tinyxml27XMLNodeD0Ev,b3,b3,b3,b3,b3,b3,__ZN8tinyxml210XMLCommentD2Ev,__ZN8tinyxml210XMLCommentD0Ev,b3,b3,b3,b3,b3
,b3,__ZN8tinyxml214XMLDeclarationD2Ev,__ZN8tinyxml214XMLDeclarationD0Ev,b3,b3,b3,b3,b3,b3,__ZN8tinyxml210XMLUnknownD2Ev,__ZN8tinyxml210XMLUnknownD0Ev,b3,b3,b3,b3,b3,b3,__ZN8tinyxml210XMLElementD2Ev,__ZN8tinyxml210XMLElementD0Ev,b3,b3,b3,b3,b3,b3,__ZN8tinyxml211XMLDocumentD2Ev,__ZN8tinyxml211XMLDocumentD0Ev,__ZN8tinyxml210XMLPrinterD2Ev,__ZN8tinyxml210XMLPrinterD0Ev,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8tinyxml27XMLTextD2Ev,__ZN8tinyxml27XMLTextD0Ev,b3,__ZN8tinyxml210XMLVisitorD2Ev,__ZN8tinyxml210XMLVisitorD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8tinyxml28MemPoolTILi48EED2Ev,__ZN8tinyxml28MemPoolTILi48EED0Ev
,b3,b3,b3,__ZN8tinyxml28MemPoolTILi48EE10SetTrackedEv,__ZN8tinyxml28MemPoolTILi48EE5ClearEv,__ZN8tinyxml28MemPoolTILi56EED2Ev,__ZN8tinyxml28MemPoolTILi56EED0Ev,b3,b3,b3,__ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv,__ZN8tinyxml28MemPoolTILi56EE5ClearEv,__ZN8tinyxml28MemPoolTILi36EED2Ev,__ZN8tinyxml28MemPoolTILi36EED0Ev,b3,b3,b3,__ZN8tinyxml28MemPoolTILi36EE10SetTrackedEv,__ZN8tinyxml28MemPoolTILi36EE5ClearEv,__ZN8tinyxml28MemPoolTILi52EED2Ev,__ZN8tinyxml28MemPoolTILi52EED0Ev,b3,b3,b3,__ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv,__ZN8tinyxml28MemPoolTILi52EE5ClearEv,__ZN8tinyxml27MemPoolD2Ev,__ZN8tinyxml27MemPoolD0Ev,__ZN8tinyxml212XMLAttributeD2Ev,__ZN8tinyxml212XMLAttributeD0Ev
,__ZN2dx12c_dx_xnode_tD2Ev,__ZN2dx12c_dx_xnode_tD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN2dx28fn_node_iterator_rewind_implEP16dx_node_iterator,__ZN2dx29fn_node_iterator_release_implEP16dx_node_iterator,b3,b3,__ZN2dx29fn_node_data_cell_commit_implEP7dx_cell,b3,b3,b3,b3
,b3,__ZN2dx18c_dx_object_mini_t18fn_dx_object_usingEP9dx_object,__ZN2dx18c_dx_object_mini_t20fn_dx_object_releaseEP9dx_object,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t11EED2Ev,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t11EED0Ev,b3,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t10EED2Ev,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t10EED0Ev,b3,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t9EED2Ev,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t9EED0Ev,b3,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t8EED2Ev,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t8EED0Ev,b3,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED2Ev,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED0Ev,b3,b3,b3,b3,__ZN2dx11c_dx_cell_tD2Ev,__ZN2dx11c_dx_cell_tD0Ev,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED2Ev,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED0Ev,b3,b3,b3,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EED2Ev,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EED0Ev
,b3,b3,b3,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EED2Ev,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EED0Ev,b3,b3,b3,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EED2Ev,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EED0Ev,b3,b3,b3,__ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EED2Ev,__ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EED0Ev,b3,b3,b3,__ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EED2Ev,__ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EED0Ev,b3,b3,b3,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED2Ev,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EED0Ev,b3,b3,b3,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED2Ev,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EED0Ev
,b3,b3,b3,__ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EED2Ev,__ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EED0Ev,b3,b3,b3,__ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EED2Ev,__ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EED0Ev,b3,b3,b3,__ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EED2Ev,__ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EED0Ev,b3,b3,b3,__ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EED2Ev,__ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EED0Ev,b3,b3,b3,__ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EED2Ev,__ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EED0Ev,b3,b3,b3,__ZN2dx16c_dx_node_mini_tD2Ev,__ZN2dx16c_dx_node_mini_tD0Ev
,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,__ZN10__cxxabiv116__enum_type_infoD0Ev,b3,__ZN10__cxxabiv117__class_type_infoD0Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZN8tinyxml27StrPair5ResetEv,__ZN8tinyxml27XMLNode14DeleteChildrenEv,b3,__ZN8tinyxml27XMLNode10DeleteNodeEPS0_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE,__ZN8tinyxml28MemPoolTILi56EEC2Ev,__ZN8tinyxml28MemPoolTILi36EEC2Ev,__ZN8tinyxml28MemPoolTILi52EEC2Ev,__ZN8tinyxml28MemPoolTILi48EEC2Ev,__ZN8tinyxml211XMLDocument5ClearEv,__ZN8tinyxml28DynArrayIPKcLi10EEC2Ev,__ZN8tinyxml28DynArrayIcLi20EEC2Ev,b3
,__ZN8tinyxml27StrPairC2Ev,__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev,__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi36EE5BlockELi10EEC2Ev,__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev,__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi48EE5BlockELi10EEC2Ev,b3,b3,b3,b3,__ZN2mp15Cnxid_tInstanceD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorI8Vector2dEEvPT_,b3,b3,b3,b3,__embind_finalize_value_array__wrapper,b3,__ZN10emscripten8internal14raw_destructorI8Vector3dEEvPT_,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorI8Vector4dEEvPT_,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__ZN2dx18c_dx_object_mini_tC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,_cleanup526,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_iiidd = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal7InvokerIbJiddEE6invokeEPFbiddEidd,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,__ZN8tinyxml210XMLPrinter12CloseElementEb,b5,__ZN8tinyxml210XMLPrinter10PrintSpaceEi,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZN8tinyxml28MemPoolTILi48EE4FreeEPv,b5,b5,b5,b5,b5,b5,__ZN8tinyxml28MemPoolTILi56EE4FreeEPv,b5,b5,b5,b5,b5,b5,__ZN8tinyxml28MemPoolTILi36EE4FreeEPv,b5,b5,b5,b5,b5,b5,__ZN8tinyxml28MemPoolTILi52EE4FreeEPv,b5,b5,b5,b5,b5,b5
,b5,b5,b5,__ZN2dx12c_dx_xnode_t4cellEv,b5,b5,b5,__ZN2dx16c_dx_node_mini_t7add_tagEPKc,b5,__ZN2dx16c_dx_node_mini_t8put_metaEPK12dx_node_meta,b5,b5,b5,__ZN2dx26fn_node_get_data_cell_implEP7dx_node,b5,b5,b5,__ZN2dx21fn_node_put_meta_implEP7dx_nodePK12dx_node_meta,b5,b5,b5,b5,b5,b5,b5,b5,__ZN2dx20fn_node_put_tag_implEP7dx_nodePKc,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE4cellEv,b5,b5,b5,b5,b5,b5,b5,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE4cellEv,b5,b5
,b5,b5,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EE4cellEv,b5,b5,b5,b5,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EE4cellEv,b5,b5,b5,b5,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EE4cellEv,b5,b5,b5,b5,__ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EE4cellEv,b5,b5,b5,b5,__ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EE4cellEv,b5,b5,b5,b5,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE4cellEv,b5,b5
,b5,b5,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE4cellEv,b5,b5,b5,b5,__ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EE4cellEv,b5,b5,b5,b5,__ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EE4cellEv,b5,b5,b5,b5,__ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EE4cellEv,b5,b5,b5,b5,__ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EE4cellEv,b5,b5,b5,b5,__ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EE4cellEv,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,b5,b5,b5,b5,b5,b5,b5,__ZN8tinyxml27XMLNode6UnlinkEPS0_,b5,b5,b5,b5,b5,b5,__ZN8tinyxml27StrPair10TransferToEPS0_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8tinyxml28DynArrayIcLi20EE4PushEc
,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,b5,__ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNKSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE17__annotate_shrinkEj,__ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EEC2EPKc,__ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EEC2EPKc,__ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EEC2EPKc,__ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EEC2EPKc,__ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EEC2EPKc,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EEC2EPKc,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EEC2EPKc,b5,b5,b5,b5,b5,b5,b5,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t8EEC2EPKc,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t9EEC2EPKc,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t10EEC2EPKc,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t11EEC2EPKc
,__ZN2dx25c_dx_node_iterator_mini_tC2EPNS_12c_dx_xnode_tE,b5,b5,b5,b5,b5,__Z9FormatXDOP7dx_nodePN8tinyxml210XMLElementE,b5,__ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE,b5,b5,b5,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Z8ParseXDOP7dx_nodePN8tinyxml210XMLElementE,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,__Z11getNodeNamei,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Z18getNodeStringValuei,__Z20getNodeVector2dValuei,__Z20getNodeVector3dValuei,__Z20getNodeVector4dValuei,b5,b5,b5
,b5,b5,b5,__Z15formatToXmlFilei,b5,__ZNSt3__16vectorIiNS_9allocatorIiEEE6resizeEj,__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj,__ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE6resizeEj,__ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE6resizeEj,__ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE6resizeEj,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEj,b5,__ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE6resizeEj,b5,__ZNSt3__16vectorIPN2dx16c_dx_node_mini_tENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIPKwNS_9allocatorIS2_EEE17__annotate_shrinkEj,b5,__ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNSt3__114__split_bufferINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEERNS4_IS6_EEE18__construct_at_endEj,__ZNSt3__16vectorINS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj,__ZNKSt3__16vectorIPKcNS_9allocatorIS2_EEE17__annotate_shrinkEj,b5,__ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEE18__construct_at_endEj,__ZNKSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferI12dx_vector4_tRNS_9allocatorIS1_EEE18__construct_at_endEj,__ZNSt3__16vectorI12dx_vector4_tNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,__ZNKSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferI12dx_vector3_tRNS_9allocatorIS1_EEE18__construct_at_endEj,__ZNSt3__16vectorI12dx_vector3_tNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,__ZNKSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferI12dx_vector2_tRNS_9allocatorIS1_EEE18__construct_at_endEj,__ZNSt3__16vectorI12dx_vector2_tNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,__ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEj
,__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEj,__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE,__ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEj,__ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE,b5,_abort_message,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iiiddd = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal7InvokerIbJidddEE6invokeEPFbidddEiddd,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_ii = [b7,__ZN8tinyxml27XMLNode9ToElementEv,__ZN8tinyxml27XMLNode6ToTextEv,__ZN8tinyxml27XMLNode9ToCommentEv,__ZN8tinyxml27XMLNode10ToDocumentEv,__ZN8tinyxml27XMLNode13ToDeclarationEv,__ZN8tinyxml27XMLNode9ToUnknownEv,__ZNK8tinyxml27XMLNode9ToElementEv,__ZNK8tinyxml27XMLNode6ToTextEv,__ZNK8tinyxml27XMLNode9ToCommentEv,__ZNK8tinyxml27XMLNode10ToDocumentEv,__ZNK8tinyxml27XMLNode13ToDeclarationEv,__ZNK8tinyxml27XMLNode9ToUnknownEv,b7,b7,b7,b7,__ZN8tinyxml210XMLComment9ToCommentEv,__ZNK8tinyxml210XMLComment9ToCommentEv,b7,b7,b7,b7,b7,b7,__ZN8tinyxml214XMLDeclaration13ToDeclarationEv,__ZNK8tinyxml214XMLDeclaration13ToDeclarationEv,b7,b7
,b7,b7,b7,b7,__ZN8tinyxml210XMLUnknown9ToUnknownEv,__ZNK8tinyxml210XMLUnknown9ToUnknownEv,b7,b7,b7,b7,b7,b7,__ZN8tinyxml210XMLElement9ToElementEv,__ZNK8tinyxml210XMLElement9ToElementEv,b7,b7,b7,b7,b7,b7,__ZN8tinyxml211XMLDocument10ToDocumentEv,__ZNK8tinyxml211XMLDocument10ToDocumentEv,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN8tinyxml27XMLText6ToTextEv,__ZNK8tinyxml27XMLText6ToTextEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,__ZNK8tinyxml28MemPoolTILi48EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi48EE5AllocEv,b7,b7,b7,b7,b7,__ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi56EE5AllocEv,b7,b7,b7,b7,b7,__ZNK8tinyxml28MemPoolTILi36EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi36EE5AllocEv,b7,b7,b7,b7,b7,__ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv,__ZN8tinyxml28MemPoolTILi52EE5AllocEv,b7,b7,b7,b7,b7,b7,b7
,b7,b7,__ZN2dx12c_dx_xnode_t6lengthEv,b7,b7,b7,__ZN2dx16c_dx_node_mini_t13get_tag_countEv,b7,__ZN2dx16c_dx_node_mini_t8get_metaEv,b7,__ZN2dx21fn_node_get_name_implEP7dx_node,__ZN2dx21fn_node_get_type_implEP7dx_node,__ZN2dx23fn_node_get_length_implEP7dx_node,b7,b7,b7,b7,b7,__ZN2dx21fn_node_get_meta_implEP7dx_node,__ZN2dx25fn_node_iterator_get_implEP7dx_node,__ZN2dx26fn_node_iterator_next_implEP16dx_node_iterator,b7,b7,b7,b7,b7,b7,__ZN2dx26fn_node_get_tag_count_implEP7dx_node,b7,b7
,b7,b7,b7,b7,b7,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t11EE4typeEv,b7,b7,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t10EE4typeEv,b7,b7,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t9EE4typeEv,b7,b7,__ZN2dx18c_dx_xnode_impl_ttIL11e_dx_type_t8EE4typeEv,b7,b7,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE6lengthEv,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE4typeEv,b7,b7,b7,b7,b7,b7,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE6lengthEv,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE4typeEv,b7,b7,b7
,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EE6lengthEv,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EE4typeEv,b7,b7,b7,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EE6lengthEv,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EE4typeEv,b7,b7,b7,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EE6lengthEv,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EE4typeEv,b7,b7,b7,__ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EE6lengthEv,__ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EE4typeEv,b7,b7,b7,__ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EE6lengthEv,__ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EE4typeEv,b7,b7,b7,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE6lengthEv,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EE4typeEv,b7,b7,b7
,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE6lengthEv,__ZN2dx19c_dx_cell_string_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EE4typeEv,b7,b7,b7,__ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EE6lengthEv,__ZN2dx17c_dx_cell_impl_ttI12dx_vector4_tL11e_dx_type_t5EE4typeEv,b7,b7,b7,__ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EE6lengthEv,__ZN2dx17c_dx_cell_impl_ttI12dx_vector3_tL11e_dx_type_t4EE4typeEv,b7,b7,b7,__ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EE6lengthEv,__ZN2dx17c_dx_cell_impl_ttI12dx_vector2_tL11e_dx_type_t3EE4typeEv,b7,b7,b7,__ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EE6lengthEv,__ZN2dx17c_dx_cell_impl_ttIdL11e_dx_type_t2EE4typeEv,b7,b7,b7,__ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EE6lengthEv,__ZN2dx17c_dx_cell_impl_ttIiL11e_dx_type_t1EE4typeEv,b7,b7,b7
,b7,b7,b7,__ZNKSt9bad_alloc4whatEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,___stdio_close,b7,b7,b7,b7
,b7,__ZNSt3__111char_traitsIcE6lengthEPKc,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK8tinyxml211XMLDocument5ErrorEv,b7,__ZNK8tinyxml27XMLNode10NoChildrenEv,__ZNK8tinyxml27XMLNode5ValueEv,__ZNK8tinyxml210XMLElement11ClosingTypeEv,b7,__ZNK8tinyxml27StrPair5EmptyEv,__ZN8tinyxml27StrPair6GetStrEv,__ZNK8tinyxml210XMLElement4NameEv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK8tinyxml210XMLPrinter4CStrEv,b7,b7,b7,b7,__Z17string2kerneltypeNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b7,__Z4nxidPKc,b7,b7,b7,_atoi,b7,b7,b7,b7,b7,__ZN8tinyxml211XMLDocument11RootElementEv,b7,b7,b7
,b7,b7,__Z14getDatasetNodei,__Z17getNodeChildCounti,b7,b7,__Z11getNodeTypei,__Z13getNodeLengthi,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__Z15getNodeIntValuei,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,__ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_,__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi,__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb,__ZN10emscripten8internal15EnumBindingTypeI11e_dx_type_tE12fromWireTypeES2_,__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi,__ZN10emscripten8internal15EnumBindingTypeI11e_dx_type_tE10toWireTypeES2_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iidddd = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__Z20setVector4dNodeValueidddd,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_iidd = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__Z20setVector2dNodeValueidd,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_iidddi = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__Z20addVector3dNodeValueidddi,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_iidi = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__Z16addRealNodeValueidi,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_iiiddddi = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10emscripten8internal7InvokerIbJiddddiEE6invokeEPFbiddddiEiddddi,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_iiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__118__find_first_of_ceIPKcS2_PFbccEEET_S5_S5_T0_S6_T1_,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN10emscripten8internal7InvokerIiJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE11e_dx_type_tiEE6invokeEPFiiS8_S9_iEiPNS0_11BindingTypeIS8_EUt_ES9_i,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairE,b14,b14,b14,b14,b14,b14,b14,__ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairE,b14,b14,b14,b14
,b14,b14,b14,__ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairE,b14,b14,b14,b14,b14,b14,b14,__ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairE,b14,b14,b14,b14,b14,b14,b14,__ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairE,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairE,b14,b14,b14,b14,__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN2dx23fn_node_add_child2_implEP7dx_nodePK12dx_node_metai,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,__ZN2dx18c_dx_object_mini_t20fn_dx_object_create2EPKcPK12dx_node_metai,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b14,__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,b14,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_sn_write,b14,___stdio_write,___stdio_seek,___stdout_write,__ZNSt3__111char_traitsIcE7compareEPKcS3_j
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNK8tinyxml210XMLElement9AttributeEPKcS2_,b14,b14,b14,b14,_sscanf,b14,b14,b14,b14,b14,b14,__ZN8tinyxml211XMLDocument5ParseEPKcj,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__Z15addIntNodeValueiii,b14,__Z18addStringNodeValueiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,__ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii,b14,b14,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJ11e_dx_type_tiEE6invokeEPFS8_S9_iES9_i,b14,b14,__ZN10emscripten8internal7InvokerIbJiiEE6invokeEPFbiiEii,b14,__ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbiS8_EiPNS0_11BindingTypeIS8_EUt_E,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiiEE6invokeEPFS8_iiEii,__ZN10emscripten8internal7InvokerI8Vector2dJiiEE6invokeEPFS2_iiEii
,__ZN10emscripten8internal7InvokerI8Vector3dJiiEE6invokeEPFS2_iiEii,__ZN10emscripten8internal7InvokerI8Vector4dJiiEE6invokeEPFS2_iiEii,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiS8_EE6invokeEPFS8_iS8_EiPNS0_11BindingTypeIS8_EUt_E,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,_do_read,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_iiidddi = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal7InvokerIbJidddiEE6invokeEPFbidddiEidddi,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_iiidddd = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN10emscripten8internal7InvokerIbJiddddEE6invokeEPFbiddddEidddd,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_diii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN10emscripten8internal7InvokerIdJiiEE6invokeEPFdiiEii,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17];
var FUNCTION_TABLE_iiid = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN10emscripten8internal7InvokerIbJidEE6invokeEPFbidEid,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18];
var FUNCTION_TABLE_di = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_atof,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__Z16getNodeRealValuei,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,__ZN10emscripten8internal7InvokerIfJEE6invokeEPFfvE,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19];
var FUNCTION_TABLE_iid = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__Z16setRealNodeValueid,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_iiddd = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__Z20setVector3dNodeValueiddd,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21];
var FUNCTION_TABLE_iiddddi = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__Z20addVector4dNodeValueiddddi,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];
var FUNCTION_TABLE_iiddi = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__Z20addVector2dNodeValueiddi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23];
var FUNCTION_TABLE_iii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE,b24,b24,b24,b24,b24,__ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE
,__ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE,b24,b24,b24,b24,b24,__ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE,b24,b24,b24,b24,b24,__ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE,b24,b24,b24,b24,b24,__ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_,__ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE,b24,b24,b24,b24,__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE
,__ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE,b24,__ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE,__ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE,__ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE,__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE,__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE,b24,__ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE,b24,b24,b24,__ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE,__ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE,__ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE,b24,b24,b24,b24,b24,__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE,__ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE,b24,__ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE,__ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE,__ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE,__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE,__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,__ZN2dx12c_dx_xnode_t4itemEi,__ZN2dx16c_dx_node_mini_t7get_tagEi,b24,b24,b24,b24,b24,b24,b24,b24,__ZN2dx22fn_node_get_child_implEP7dx_nodei,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN2dx20fn_node_get_tag_implEP7dx_nodei,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN2dx11c_dx_cell_t4itemEi,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN8tinyxml27XMLNode14InsertEndChildEPS0_,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE4findIS6_EENS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEEiEERKT_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b24,__ZN8tinyxml211XMLDocument10NewElementEPKc,__ZN8tinyxml27XMLNode12LinkEndChildEPS0_,b24,b24,b24,b24,b24,__ZNSt3__111char_traitsIcE2eqEcc,b24,b24,b24,__ZNK8tinyxml210XMLElement12IntAttributeEPKc,b24,b24,b24,b24,b24,b24,__ZN8tinyxml27XMLNode17FirstChildElementEPKc,b24,__ZN8tinyxml27XMLNode18NextSiblingElementEPKc,b24,b24,__ZN10emscripten11value_arrayI8Vector2dE7elementIS1_fEERS2_MT_T0_,__ZN10emscripten11value_arrayI8Vector3dE7elementIS1_fEERS2_MT_T0_,__ZN10emscripten11value_arrayI8Vector4dE7elementIS1_fEERS2_MT_T0_
,b24,b24,b24,b24,__Z12getChildNodeii,b24,b24,b24,b24,__Z15setIntNodeValueii,b24,__Z18setStringNodeValueiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__Z20getNodeIntArrayValueii,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,__ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi,b24,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJiEE6invokeEPFS8_iEi,__ZN10emscripten8internal7InvokerI11e_dx_type_tJiEE6invokeEPFS2_iEi,b24,__ZN10emscripten8internal7InvokerI11e_dx_type_tJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeEPFS2_S9_EPNS0_11BindingTypeIS9_EUt_E,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN10emscripten8internal7InvokerI8Vector2dJiEE6invokeEPFS2_iEi,__ZN10emscripten8internal7InvokerI8Vector3dJiEE6invokeEPFS2_iEi,__ZN10emscripten8internal7InvokerI8Vector4dJiEE6invokeEPFS2_iEi,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24];
var FUNCTION_TABLE_dii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNK8tinyxml210XMLElement15DoubleAttributeEPKc,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__Z21getNodeRealArrayValueii,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN10emscripten8internal12MemberAccessI8Vector2dfE7getWireIS2_EEfRKMS2_fRKT_,b25,b25,b25,b25,b25,__ZN10emscripten8internal12MemberAccessI8Vector3dfE7getWireIS2_EEfRKMS2_fRKT_,b25,b25,b25,b25
,__ZN10emscripten8internal12MemberAccessI8Vector4dfE7getWireIS2_EEfRKMS2_fRKT_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25];
var FUNCTION_TABLE_viiiiii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b26,b26,b26,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b26,b26,b26,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__embind_register_value_array__wrapper,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26];
var FUNCTION_TABLE_d = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,__Z10getVersionv,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27];
var FUNCTION_TABLE_i = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,__Z13createDatasetv,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZN10emscripten8internal15raw_constructorI8Vector2dJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,b28,__ZN10emscripten8internal6TypeIDI8Vector2dE3getEv,b28,b28,b28,b28,__ZN10emscripten8internal15raw_constructorI8Vector3dJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,b28,__ZN10emscripten8internal6TypeIDI8Vector3dE3getEv,b28,b28,__ZN10emscripten8internal15raw_constructorI8Vector4dJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,b28,__ZN10emscripten8internal6TypeIDI8Vector4dE3getEv
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,___cxa_get_globals_fast,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28];
var FUNCTION_TABLE_iiiii = [b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZN2dx22fn_node_add_child_implEP7dx_nodePKc11e_dx_type_ti,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZN2dx18c_dx_object_mini_t19fn_dx_object_createEPKcS2_11e_dx_type_ti
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,__Z12addChildNodeiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE11e_dx_type_ti,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZN10emscripten8internal7InvokerIbJiiiEE6invokeEPFbiiiEiii,b29,__ZN10emscripten8internal7InvokerIbJiNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEiEE6invokeEPFbiS8_iEiPNS0_11BindingTypeIS8_EUt_Ei,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29];
var FUNCTION_TABLE_viii = [b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN2dx18fn_put_string_implEP7dx_nodePKci,__ZN2dx19fn_put_wstring_implEP7dx_nodePKwi,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE15__insert_uniqueERKS6_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN2dx23c_dx_cell_array_impl_ttIiL11e_dx_type_t1EEC2EPKci,__ZN2dx23c_dx_cell_array_impl_ttIdL11e_dx_type_t2EEC2EPKci,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector2_tL11e_dx_type_t3EEC2EPKci,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector3_tL11e_dx_type_t4EEC2EPKci,__ZN2dx23c_dx_cell_array_impl_ttI12dx_vector4_tL11e_dx_type_t5EEC2EPKci,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEcL11e_dx_type_t6EEC2EPKci,__ZN2dx25c_dx_cell_string_array_ttINSt3__112basic_stringIwNS1_11char_traitsIwEENS1_9allocatorIwEEEEwL11e_dx_type_t7EEC2EPKci,b30,b30,b30,b30
,b30,__ZN8tinyxml210XMLElement12SetAttributeEPKcS2_,b30,__Z17kerneltype2string11e_dx_type_ti,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_PNS_6vectorIS5_NS3_IS5_EEEE,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__Z23getNodeStringArrayValueii
,__Z25getNodeVector2dArrayValueii,__Z25getNodeVector3dArrayValueii,__Z25getNodeVector4dArrayValueii,b30,__Z15loadFromXmlFileiNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b30,b30,b30,b30,b30,b30,__ZNSt3__16vectorIPKcNS_9allocatorIS2_EEE6resizeEjRKS2_,b30,__ZNSt3__16vectorIPKwNS_9allocatorIS2_EEE6resizeEjRKS2_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZNSt3__114__split_bufferIPKwRNS_9allocatorIS2_EEE18__construct_at_endEjRKS2_,b30,b30,b30,b30,b30,__ZNSt3__114__split_bufferIPKcRNS_9allocatorIS2_EEE18__construct_at_endEjRKS2_,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30];
var FUNCTION_TABLE_v = [b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,___cxa_pure_virtual__wrapper,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,__ZL25default_terminate_handlerv,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b31,___cxa_end_catch__wrapper,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31];
var FUNCTION_TABLE_viid = [b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZN10emscripten8internal12MemberAccessI8Vector2dfE7setWireIS2_EEvRKMS2_fRT_f,b32,b32,b32,b32,b32,__ZN10emscripten8internal12MemberAccessI8Vector3dfE7setWireIS2_EEvRKMS2_fRT_f,b32,b32,b32
,b32,__ZN10emscripten8internal12MemberAccessI8Vector4dfE7setWireIS2_EEvRKMS2_fRT_f,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32];
var FUNCTION_TABLE_viiii = [b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEPKcS3_,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,__ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSE_SE_,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,__ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33];

  return { ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_xml_conv_cpp: __GLOBAL__sub_I_xml_conv_cpp, __GLOBAL__sub_I_xml_tree_cpp: __GLOBAL__sub_I_xml_tree_cpp, __GLOBAL__sub_I_nxid_cpp: __GLOBAL__sub_I_nxid_cpp, __GLOBAL__sub_I_nxdat_mini_cpp: __GLOBAL__sub_I_nxdat_mini_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiiii: dynCall_viiiii, dynCall_iiiddi: dynCall_iiiddi, dynCall_iiidi: dynCall_iiidi, dynCall_vi: dynCall_vi, dynCall_iiidd: dynCall_iiidd, dynCall_vii: dynCall_vii, dynCall_iiiddd: dynCall_iiiddd, dynCall_ii: dynCall_ii, dynCall_iidddd: dynCall_iidddd, dynCall_iidd: dynCall_iidd, dynCall_iidddi: dynCall_iidddi, dynCall_iidi: dynCall_iidi, dynCall_iiiddddi: dynCall_iiiddddi, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiii: dynCall_iiii, dynCall_iiidddi: dynCall_iiidddi, dynCall_iiidddd: dynCall_iiidddd, dynCall_diii: dynCall_diii, dynCall_iiid: dynCall_iiid, dynCall_di: dynCall_di, dynCall_iid: dynCall_iid, dynCall_iiddd: dynCall_iiddd, dynCall_iiddddi: dynCall_iiddddi, dynCall_iiddi: dynCall_iiddi, dynCall_iii: dynCall_iii, dynCall_dii: dynCall_dii, dynCall_viiiiii: dynCall_viiiiii, dynCall_d: dynCall_d, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real___GLOBAL__sub_I_xml_tree_cpp = asm["__GLOBAL__sub_I_xml_tree_cpp"]; asm["__GLOBAL__sub_I_xml_tree_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_xml_tree_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_nxid_cpp = asm["__GLOBAL__sub_I_nxid_cpp"]; asm["__GLOBAL__sub_I_nxid_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_nxid_cpp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real___GLOBAL__sub_I_nxdat_mini_cpp = asm["__GLOBAL__sub_I_nxdat_mini_cpp"]; asm["__GLOBAL__sub_I_nxdat_mini_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_nxdat_mini_cpp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real___GLOBAL__sub_I_xml_conv_cpp = asm["__GLOBAL__sub_I_xml_conv_cpp"]; asm["__GLOBAL__sub_I_xml_conv_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_xml_conv_cpp.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var __GLOBAL__sub_I_xml_tree_cpp = Module["__GLOBAL__sub_I_xml_tree_cpp"] = asm["__GLOBAL__sub_I_xml_tree_cpp"];
var __GLOBAL__sub_I_nxid_cpp = Module["__GLOBAL__sub_I_nxid_cpp"] = asm["__GLOBAL__sub_I_nxid_cpp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var __GLOBAL__sub_I_nxdat_mini_cpp = Module["__GLOBAL__sub_I_nxdat_mini_cpp"] = asm["__GLOBAL__sub_I_nxdat_mini_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var __GLOBAL__sub_I_xml_conv_cpp = Module["__GLOBAL__sub_I_xml_conv_cpp"] = asm["__GLOBAL__sub_I_xml_conv_cpp"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiddi = Module["dynCall_iiiddi"] = asm["dynCall_iiiddi"];
var dynCall_iiidi = Module["dynCall_iiidi"] = asm["dynCall_iiidi"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiidd = Module["dynCall_iiidd"] = asm["dynCall_iiidd"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiddd = Module["dynCall_iiiddd"] = asm["dynCall_iiiddd"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidddd = Module["dynCall_iidddd"] = asm["dynCall_iidddd"];
var dynCall_iidd = Module["dynCall_iidd"] = asm["dynCall_iidd"];
var dynCall_iidddi = Module["dynCall_iidddi"] = asm["dynCall_iidddi"];
var dynCall_iidi = Module["dynCall_iidi"] = asm["dynCall_iidi"];
var dynCall_iiiddddi = Module["dynCall_iiiddddi"] = asm["dynCall_iiiddddi"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiidddi = Module["dynCall_iiidddi"] = asm["dynCall_iiidddi"];
var dynCall_iiidddd = Module["dynCall_iiidddd"] = asm["dynCall_iiidddd"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_iiddd = Module["dynCall_iiddd"] = asm["dynCall_iiddd"];
var dynCall_iiddddi = Module["dynCall_iiddddi"] = asm["dynCall_iiddddi"];
var dynCall_iiddi = Module["dynCall_iiddi"] = asm["dynCall_iiddi"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_d = Module["dynCall_d"] = asm["dynCall_d"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



