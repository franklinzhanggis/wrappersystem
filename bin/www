#!/usr/bin/env node

var args = process.argv.splice(2);
if(args.length < 1){
  return console.log('Error: lack of args!');
}
if(args[0] == '1'){
  
  /**
   * Module dependencies.
   */
  var app = require('../app');
  var debug = require('debug')('ComputerRes:server');
  var http = require('http');
  var setting = require('../setting');


  /**
   * Get port from environment and store in Express.
   */
  var port = normalizePort(process.env.PORT || setting.port);
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}
else if(args[0] == '2'){
  var debugContainer = require('../debug');
  if(args.length < 5){
      return console.log('Error: lack of args!');
  }
  debugContainer(args[1], args[2], args[3], args[4], args[5])
}
else if(args[0] == '3'){
  var batchUpload = require('../batchUpload');
  batchUpload();
}
else if(args[0] == '--version'){
  var setting = require('../setting');
  console.log(setting.version);
}